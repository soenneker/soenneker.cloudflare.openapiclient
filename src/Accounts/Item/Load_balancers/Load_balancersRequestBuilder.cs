// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitor_groups;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitors;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Pools;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Preview;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Regions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Search;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\load_balancers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Load_balancersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The monitor_groups property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitor_groups.Monitor_groupsRequestBuilder Monitor_groups
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitor_groups.Monitor_groupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The monitors property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitors.MonitorsRequestBuilder Monitors
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Monitors.MonitorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pools property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Pools.PoolsRequestBuilder Pools
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Pools.PoolsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preview property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Preview.PreviewRequestBuilder Preview
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Preview.PreviewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The regions property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Regions.RegionsRequestBuilder Regions
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Regions.RegionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Search.SearchRequestBuilder Search
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Load_balancersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Load_balancersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/load_balancers", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Load_balancersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Load_balancersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/load_balancers", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
