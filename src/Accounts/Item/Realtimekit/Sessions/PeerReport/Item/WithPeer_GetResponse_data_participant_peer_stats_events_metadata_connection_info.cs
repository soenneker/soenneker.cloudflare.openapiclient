// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backend_r_t_t property</summary>
        public double? BackendRTT { get; set; }
        /// <summary>The connectivity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_connectivity? Connectivity { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_connectivity Connectivity { get; set; }
#endif
        /// <summary>The effective_network_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EffectiveNetworkType { get; set; }
#nullable restore
#else
        public string EffectiveNetworkType { get; set; }
#endif
        /// <summary>The fractional_loss property</summary>
        public int? FractionalLoss { get; set; }
        /// <summary>The ip_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_ip_details? IpDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_ip_details IpDetails { get; set; }
#endif
        /// <summary>The jitter property</summary>
        public int? Jitter { get; set; }
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_location? Location { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_location Location { get; set; }
#endif
        /// <summary>The r_t_t property</summary>
        public double? RTT { get; set; }
        /// <summary>The throughput property</summary>
        public int? Throughput { get; set; }
        /// <summary>The turn_connectivity property</summary>
        public bool? TurnConnectivity { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info"/> and sets the default values.
        /// </summary>
        public WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backend_r_t_t", n => { BackendRTT = n.GetDoubleValue(); } },
                { "connectivity", n => { Connectivity = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_connectivity>(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_connectivity.CreateFromDiscriminatorValue); } },
                { "effective_network_type", n => { EffectiveNetworkType = n.GetStringValue(); } },
                { "fractional_loss", n => { FractionalLoss = n.GetIntValue(); } },
                { "ip_details", n => { IpDetails = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_ip_details>(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_ip_details.CreateFromDiscriminatorValue); } },
                { "jitter", n => { Jitter = n.GetIntValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_location>(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_location.CreateFromDiscriminatorValue); } },
                { "r_t_t", n => { RTT = n.GetDoubleValue(); } },
                { "throughput", n => { Throughput = n.GetIntValue(); } },
                { "turn_connectivity", n => { TurnConnectivity = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("backend_r_t_t", BackendRTT);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_connectivity>("connectivity", Connectivity);
            writer.WriteStringValue("effective_network_type", EffectiveNetworkType);
            writer.WriteIntValue("fractional_loss", FractionalLoss);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_ip_details>("ip_details", IpDetails);
            writer.WriteIntValue("jitter", Jitter);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_stats_events_metadata_connection_info_location>("location", Location);
            writer.WriteDoubleValue("r_t_t", RTT);
            writer.WriteIntValue("throughput", Throughput);
            writer.WriteBoolValue("turn_connectivity", TurnConnectivity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
