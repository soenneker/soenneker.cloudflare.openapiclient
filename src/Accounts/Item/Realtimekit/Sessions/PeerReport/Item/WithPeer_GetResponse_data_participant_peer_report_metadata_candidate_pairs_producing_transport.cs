// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The available_outgoing_bitrate property</summary>
        public int? AvailableOutgoingBitrate { get; set; }
        /// <summary>The bytes_discarded_on_send property</summary>
        public int? BytesDiscardedOnSend { get; set; }
        /// <summary>The bytes_received property</summary>
        public int? BytesReceived { get; set; }
        /// <summary>The bytes_sent property</summary>
        public int? BytesSent { get; set; }
        /// <summary>The current_round_trip_time property</summary>
        public double? CurrentRoundTripTime { get; set; }
        /// <summary>The last_packet_received_timestamp property</summary>
        public int? LastPacketReceivedTimestamp { get; set; }
        /// <summary>The last_packet_sent_timestamp property</summary>
        public int? LastPacketSentTimestamp { get; set; }
        /// <summary>The local_candidate_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateAddress { get; set; }
#nullable restore
#else
        public string LocalCandidateAddress { get; set; }
#endif
        /// <summary>The local_candidate_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateId { get; set; }
#nullable restore
#else
        public string LocalCandidateId { get; set; }
#endif
        /// <summary>The local_candidate_network_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateNetworkType { get; set; }
#nullable restore
#else
        public string LocalCandidateNetworkType { get; set; }
#endif
        /// <summary>The local_candidate_port property</summary>
        public int? LocalCandidatePort { get; set; }
        /// <summary>The local_candidate_protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateProtocol { get; set; }
#nullable restore
#else
        public string LocalCandidateProtocol { get; set; }
#endif
        /// <summary>The local_candidate_related_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateRelatedAddress { get; set; }
#nullable restore
#else
        public string LocalCandidateRelatedAddress { get; set; }
#endif
        /// <summary>The local_candidate_related_port property</summary>
        public int? LocalCandidateRelatedPort { get; set; }
        /// <summary>The local_candidate_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalCandidateType { get; set; }
#nullable restore
#else
        public string LocalCandidateType { get; set; }
#endif
        /// <summary>The nominated property</summary>
        public bool? Nominated { get; set; }
        /// <summary>The packets_discarded_on_send property</summary>
        public int? PacketsDiscardedOnSend { get; set; }
        /// <summary>The packets_received property</summary>
        public int? PacketsReceived { get; set; }
        /// <summary>The packets_sent property</summary>
        public int? PacketsSent { get; set; }
        /// <summary>The remote_candidate_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteCandidateAddress { get; set; }
#nullable restore
#else
        public string RemoteCandidateAddress { get; set; }
#endif
        /// <summary>The remote_candidate_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteCandidateId { get; set; }
#nullable restore
#else
        public string RemoteCandidateId { get; set; }
#endif
        /// <summary>The remote_candidate_port property</summary>
        public int? RemoteCandidatePort { get; set; }
        /// <summary>The remote_candidate_protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteCandidateProtocol { get; set; }
#nullable restore
#else
        public string RemoteCandidateProtocol { get; set; }
#endif
        /// <summary>The remote_candidate_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteCandidateType { get; set; }
#nullable restore
#else
        public string RemoteCandidateType { get; set; }
#endif
        /// <summary>The total_round_trip_time property</summary>
        public double? TotalRoundTripTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport"/> and sets the default values.
        /// </summary>
        public WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Sessions.PeerReport.Item.WithPeer_GetResponse_data_participant_peer_report_metadata_candidate_pairs_producing_transport();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available_outgoing_bitrate", n => { AvailableOutgoingBitrate = n.GetIntValue(); } },
                { "bytes_discarded_on_send", n => { BytesDiscardedOnSend = n.GetIntValue(); } },
                { "bytes_received", n => { BytesReceived = n.GetIntValue(); } },
                { "bytes_sent", n => { BytesSent = n.GetIntValue(); } },
                { "current_round_trip_time", n => { CurrentRoundTripTime = n.GetDoubleValue(); } },
                { "last_packet_received_timestamp", n => { LastPacketReceivedTimestamp = n.GetIntValue(); } },
                { "last_packet_sent_timestamp", n => { LastPacketSentTimestamp = n.GetIntValue(); } },
                { "local_candidate_address", n => { LocalCandidateAddress = n.GetStringValue(); } },
                { "local_candidate_id", n => { LocalCandidateId = n.GetStringValue(); } },
                { "local_candidate_network_type", n => { LocalCandidateNetworkType = n.GetStringValue(); } },
                { "local_candidate_port", n => { LocalCandidatePort = n.GetIntValue(); } },
                { "local_candidate_protocol", n => { LocalCandidateProtocol = n.GetStringValue(); } },
                { "local_candidate_related_address", n => { LocalCandidateRelatedAddress = n.GetStringValue(); } },
                { "local_candidate_related_port", n => { LocalCandidateRelatedPort = n.GetIntValue(); } },
                { "local_candidate_type", n => { LocalCandidateType = n.GetStringValue(); } },
                { "nominated", n => { Nominated = n.GetBoolValue(); } },
                { "packets_discarded_on_send", n => { PacketsDiscardedOnSend = n.GetIntValue(); } },
                { "packets_received", n => { PacketsReceived = n.GetIntValue(); } },
                { "packets_sent", n => { PacketsSent = n.GetIntValue(); } },
                { "remote_candidate_address", n => { RemoteCandidateAddress = n.GetStringValue(); } },
                { "remote_candidate_id", n => { RemoteCandidateId = n.GetStringValue(); } },
                { "remote_candidate_port", n => { RemoteCandidatePort = n.GetIntValue(); } },
                { "remote_candidate_protocol", n => { RemoteCandidateProtocol = n.GetStringValue(); } },
                { "remote_candidate_type", n => { RemoteCandidateType = n.GetStringValue(); } },
                { "total_round_trip_time", n => { TotalRoundTripTime = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("available_outgoing_bitrate", AvailableOutgoingBitrate);
            writer.WriteIntValue("bytes_discarded_on_send", BytesDiscardedOnSend);
            writer.WriteIntValue("bytes_received", BytesReceived);
            writer.WriteIntValue("bytes_sent", BytesSent);
            writer.WriteDoubleValue("current_round_trip_time", CurrentRoundTripTime);
            writer.WriteIntValue("last_packet_received_timestamp", LastPacketReceivedTimestamp);
            writer.WriteIntValue("last_packet_sent_timestamp", LastPacketSentTimestamp);
            writer.WriteStringValue("local_candidate_address", LocalCandidateAddress);
            writer.WriteStringValue("local_candidate_id", LocalCandidateId);
            writer.WriteStringValue("local_candidate_network_type", LocalCandidateNetworkType);
            writer.WriteIntValue("local_candidate_port", LocalCandidatePort);
            writer.WriteStringValue("local_candidate_protocol", LocalCandidateProtocol);
            writer.WriteStringValue("local_candidate_related_address", LocalCandidateRelatedAddress);
            writer.WriteIntValue("local_candidate_related_port", LocalCandidateRelatedPort);
            writer.WriteStringValue("local_candidate_type", LocalCandidateType);
            writer.WriteBoolValue("nominated", Nominated);
            writer.WriteIntValue("packets_discarded_on_send", PacketsDiscardedOnSend);
            writer.WriteIntValue("packets_received", PacketsReceived);
            writer.WriteIntValue("packets_sent", PacketsSent);
            writer.WriteStringValue("remote_candidate_address", RemoteCandidateAddress);
            writer.WriteStringValue("remote_candidate_id", RemoteCandidateId);
            writer.WriteIntValue("remote_candidate_port", RemoteCandidatePort);
            writer.WriteStringValue("remote_candidate_protocol", RemoteCandidateProtocol);
            writer.WriteStringValue("remote_candidate_type", RemoteCandidateType);
            writer.WriteDoubleValue("total_round_trip_time", TotalRoundTripTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
