// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Item;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Sessions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\realtimekit\livestreams
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LivestreamsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The sessions property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Sessions.SessionsRequestBuilder Sessions
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Sessions.SessionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.accounts.item.realtimekit.livestreams.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Item.WithLivestream_ItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Item.WithLivestream_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("livestream_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.Item.WithLivestream_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LivestreamsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/livestreams{?end_time*,exclude_meetings*,page_no*,per_page*,sort_order*,start_time*,status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LivestreamsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/livestreams{?end_time*,exclude_meetings*,page_no*,per_page*,sort_order*,start_time*,status*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns details of livestreams associated with the given organization ID. It includes livestreams created by your organization and RealtimeKit meetings that are livestreamed by your organization. If you only want details of livestreams created by your organization and not RealtimeKit meetings, you can use the `exclude_meetings` query parameter.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Fetch_all_livestreams_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Fetch_all_livestreams_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder.LivestreamsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Fetch_all_livestreams_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder.LivestreamsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Fetch_all_livestreams_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Fetch_all_livestreams_200.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a livestream for the given organization ID and returns ingest server, stream key, and playback URL. You can pass custom input to the ingest server and stream key, and freely distribute the content using the playback URL on any player that supports HLS/LHLS.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams_201"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams_201?> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams_201> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams_201>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams_201.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns details of livestreams associated with the given organization ID. It includes livestreams created by your organization and RealtimeKit meetings that are livestreamed by your organization. If you only want details of livestreams created by your organization and not RealtimeKit meetings, you can use the `exclude_meetings` query parameter.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder.LivestreamsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder.LivestreamsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a livestream for the given organization ID and returns ingest server, stream key, and playback URL. You can pass custom input to the ingest server and stream key, and freely distribute the content using the playback URL on any player that supports HLS/LHLS.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Post_accounts_account_id_realtimekit_livestreams body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.LivestreamsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns details of livestreams associated with the given organization ID. It includes livestreams created by your organization and RealtimeKit meetings that are livestreamed by your organization. If you only want details of livestreams created by your organization and not RealtimeKit meetings, you can use the `exclude_meetings` query parameter.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LivestreamsRequestBuilderGetQueryParameters 
        {
            /// <summary>Specify the end time range in ISO format to access the live stream.</summary>
            [QueryParameter("end_time")]
            public DateTimeOffset? EndTime { get; set; }
            /// <summary>Exclude the RealtimeKit meetings that are livestreamed.</summary>
            [QueryParameter("exclude_meetings")]
            public bool? ExcludeMeetings { get; set; }
            /// <summary>The page number from which you want your page search results to be displayed.</summary>
            [QueryParameter("page_no")]
            public int? PageNo { get; set; }
            /// <summary>Number of results per page.</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Specifies the sorting order for the results.</summary>
            [QueryParameter("sort_order")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.GetSort_orderQueryParameterType? SortOrder { get; set; }
            /// <summary>Specify the start time range in ISO format to access the live stream.</summary>
            [QueryParameter("start_time")]
            public DateTimeOffset? StartTime { get; set; }
            /// <summary>Specifies the status of the operation.</summary>
            [QueryParameter("status")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Livestreams.GetStatusQueryParameterType? Status { get; set; }
        }
    }
}
#pragma warning restore CS0618
