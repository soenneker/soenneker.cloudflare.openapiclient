// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecordingsPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>By default, a meeting allows only one recording to run at a time. Enabling the `allow_multiple_recordings` parameter to true allows you to initiate multiple recordings concurrently in the same meeting. This allows you to record separate videos of the same meeting with different configurations, such as portrait mode or landscape mode.</summary>
        public bool? AllowMultipleRecordings { get; set; }
        /// <summary>Object containing configuration regarding the audio that is being recorded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig? AudioConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig AudioConfig { get; set; }
#endif
        /// <summary>Update the recording file name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileNamePrefix { get; set; }
#nullable restore
#else
        public string FileNamePrefix { get; set; }
#endif
        /// <summary>Allows you to add timed metadata to your recordings, which are digital markers inserted into a video file to provide contextual information at specific points in the content range. The ID3 tags containing this information are available to clients on the playback timeline in HLS format. The output files are generated in a compressed .tar format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_InteractiveConfig? InteractiveConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_InteractiveConfig InteractiveConfig { get; set; }
#endif
        /// <summary>Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.</summary>
        public int? MaxSeconds { get; set; }
        /// <summary>ID of the meeting to record.</summary>
        public Guid? MeetingId { get; set; }
        /// <summary>The realtimekit_bucket_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig? RealtimekitBucketConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig RealtimekitBucketConfig { get; set; }
#endif
        /// <summary>The rtmp_out_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig? RtmpOutConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig RtmpOutConfig { get; set; }
#endif
        /// <summary>The storage_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig? StorageConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig StorageConfig { get; set; }
#endif
        /// <summary>Pass a custom url to record arbitary screen</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The video_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig? VideoConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig VideoConfig { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody"/> and sets the default values.
        /// </summary>
        public RecordingsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_multiple_recordings", n => { AllowMultipleRecordings = n.GetBoolValue(); } },
                { "audio_config", n => { AudioConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig.CreateFromDiscriminatorValue); } },
                { "file_name_prefix", n => { FileNamePrefix = n.GetStringValue(); } },
                { "interactive_config", n => { InteractiveConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_InteractiveConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_InteractiveConfig.CreateFromDiscriminatorValue); } },
                { "max_seconds", n => { MaxSeconds = n.GetIntValue(); } },
                { "meeting_id", n => { MeetingId = n.GetGuidValue(); } },
                { "realtimekit_bucket_config", n => { RealtimekitBucketConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig.CreateFromDiscriminatorValue); } },
                { "rtmp_out_config", n => { RtmpOutConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig.CreateFromDiscriminatorValue); } },
                { "storage_config", n => { StorageConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig.CreateFromDiscriminatorValue); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "video_config", n => { VideoConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_multiple_recordings", AllowMultipleRecordings);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig>("audio_config", AudioConfig);
            writer.WriteStringValue("file_name_prefix", FileNamePrefix);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_InteractiveConfig>("interactive_config", InteractiveConfig);
            writer.WriteIntValue("max_seconds", MaxSeconds);
            writer.WriteGuidValue("meeting_id", MeetingId);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig>("realtimekit_bucket_config", RealtimekitBucketConfig);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig>("rtmp_out_config", RtmpOutConfig);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig>("storage_config", StorageConfig);
            writer.WriteStringValue("url", Url);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig>("video_config", VideoConfig);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
