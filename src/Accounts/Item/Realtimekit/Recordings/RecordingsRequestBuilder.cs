// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.ActiveRecording;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Item;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Track;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\realtimekit\recordings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RecordingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The activeRecording property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.ActiveRecording.ActiveRecordingRequestBuilder ActiveRecording
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.ActiveRecording.ActiveRecordingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The track property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Track.TrackRequestBuilder Track
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Track.TrackRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.accounts.item.realtimekit.recordings.item collection</summary>
        /// <param name="position">ID of the recording</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Item.WithRecording_ItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Item.WithRecording_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("recording_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.Item.WithRecording_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/recordings{?end_time*,expired*,meeting_id*,page_no*,per_page*,search*,sort_by*,sort_order*,start_time*,status}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/recordings{?end_time*,expired*,meeting_id*,page_no*,per_page*,search*,sort_by*,sort_order*,start_time*,status}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all recordings for an organization. If the `meeting_id` parameter is passed, returns all recordings for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsGetResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsGetResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsGetResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Starts recording a meeting. The meeting can be started by an organization admin directly, or a participant with permissions to start a recording, based on the type of authorization used.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostResponse?> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostResponse> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all recordings for an organization. If the `meeting_id` parameter is passed, returns all recordings for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Starts recording a meeting. The meeting can be started by an organization admin directly, or a participant with permissions to start a recording, based on the type of authorization used.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.RecordingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all recordings for an organization. If the `meeting_id` parameter is passed, returns all recordings for the given meeting ID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecordingsRequestBuilderGetQueryParameters 
        {
            /// <summary>The end time range for which you want to retrieve the meetings. The time must be specified in ISO format.</summary>
            [QueryParameter("end_time")]
            public DateTimeOffset? EndTime { get; set; }
            /// <summary>If passed, only shows expired/non-expired recordings on RealtimeKit&apos;s bucket</summary>
            [QueryParameter("expired")]
            public bool? Expired { get; set; }
            /// <summary>ID of a meeting. Optional. Will limit results to only this meeting if passed.</summary>
            [QueryParameter("meeting_id")]
            public Guid? MeetingId { get; set; }
            /// <summary>The page number from which you want your page search results to be displayed.</summary>
            [QueryParameter("page_no")]
            public double? PageNo { get; set; }
            /// <summary>Number of results per page</summary>
            [QueryParameter("per_page")]
            public double? PerPage { get; set; }
            /// <summary>The search query string. You can search using the meeting ID or title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            [QueryParameter("sort_by")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.GetSort_byQueryParameterType? SortBy { get; set; }
            [QueryParameter("sort_order")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.GetSort_orderQueryParameterType? SortOrder { get; set; }
            /// <summary>The start time range for which you want to retrieve the meetings. The time must be specified in ISO format.</summary>
            [QueryParameter("start_time")]
            public DateTimeOffset? StartTime { get; set; }
            /// <summary>Filter by one or more recording status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.GetStatusQueryParameterType[]? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Recordings.GetStatusQueryParameterType[] Status { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
