// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveLivestream;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveSession;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestream;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestreams;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Participants;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\realtimekit\meetings\{meeting_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithMeeting_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The activeLivestream property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveLivestream.ActiveLivestreamRequestBuilder ActiveLivestream
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveLivestream.ActiveLivestreamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The activeSession property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveSession.ActiveSessionRequestBuilder ActiveSession
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.ActiveSession.ActiveSessionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The livestream property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestream.LivestreamRequestBuilder Livestream
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestream.LivestreamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The livestreams property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestreams.LivestreamsRequestBuilder Livestreams
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Livestreams.LivestreamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The participants property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Participants.ParticipantsRequestBuilder Participants
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.Participants.ParticipantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMeeting_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/meetings/{meeting_id}{?name*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMeeting_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/realtimekit/meetings/{meeting_id}{?name*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a meeting details in an organization for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_GenericErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_GetResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder.WithMeeting_ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_GetResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder.WithMeeting_ItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_GenericErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_GetResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_GetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a meeting in an organization for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_GenericErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchResponse?> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchResponse> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_GenericErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Replaces all the details for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutResponse?> PutAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutResponse> PutAsync(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a meeting details in an organization for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder.WithMeeting_ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder.WithMeeting_ItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates a meeting in an organization for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Replaces all the details for the given meeting ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a meeting details in an organization for the given meeting ID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithMeeting_ItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
