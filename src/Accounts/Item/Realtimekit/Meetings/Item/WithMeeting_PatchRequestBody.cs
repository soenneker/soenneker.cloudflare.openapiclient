// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithMeeting_PatchRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The AI Config allows you to customize the behavior of meeting transcriptions and summaries</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AIConfig? AiConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AIConfig AiConfig { get; set; }
#endif
        /// <summary>Specifies if the meeting should start getting livestreamed on start.</summary>
        public bool? LiveStreamOnStart { get; set; }
        /// <summary>If a meeting is updated to persist_chat, meeting chat would remain for a week within the meeting space.</summary>
        public bool? PersistChat { get; set; }
        /// <summary>The region in which this meeting should be created.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_preferred_region? PreferredRegion { get; set; }
        /// <summary>Specifies if the meeting should start getting recorded as soon as someone joins the meeting.</summary>
        public bool? RecordOnStart { get; set; }
        /// <summary>Time in seconds, for which a session remains active, after the last participant has left the meeting.</summary>
        public double? SessionKeepAliveTimeInSecs { get; set; }
        /// <summary>Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_status? Status { get; set; }
        /// <summary>Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.</summary>
        public bool? SummarizeOnEnd { get; set; }
        /// <summary>Title of the meeting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody"/> and sets the default values.
        /// </summary>
        public WithMeeting_PatchRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ai_config", n => { AiConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AIConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AIConfig.CreateFromDiscriminatorValue); } },
                { "live_stream_on_start", n => { LiveStreamOnStart = n.GetBoolValue(); } },
                { "persist_chat", n => { PersistChat = n.GetBoolValue(); } },
                { "preferred_region", n => { PreferredRegion = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_preferred_region>(); } },
                { "record_on_start", n => { RecordOnStart = n.GetBoolValue(); } },
                { "session_keep_alive_time_in_secs", n => { SessionKeepAliveTimeInSecs = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_status>(); } },
                { "summarize_on_end", n => { SummarizeOnEnd = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AIConfig>("ai_config", AiConfig);
            writer.WriteBoolValue("live_stream_on_start", LiveStreamOnStart);
            writer.WriteBoolValue("persist_chat", PersistChat);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_preferred_region>("preferred_region", PreferredRegion);
            writer.WriteBoolValue("record_on_start", RecordOnStart);
            writer.WriteDoubleValue("session_keep_alive_time_in_secs", SessionKeepAliveTimeInSecs);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.Meetings.Item.WithMeeting_PatchRequestBody_status>("status", Status);
            writer.WriteBoolValue("summarize_on_end", SummarizeOnEnd);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
