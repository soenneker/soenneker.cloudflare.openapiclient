// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Item;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Networks;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.PhysicalDevices;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policies;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policy;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Posture;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Registrations;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Resilience;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Revoke;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Settings;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Unrevoke;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\devices
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DevicesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The networks property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Networks.NetworksRequestBuilder Networks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Networks.NetworksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The physicalDevices property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.PhysicalDevices.PhysicalDevicesRequestBuilder PhysicalDevices
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.PhysicalDevices.PhysicalDevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The policies property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policies.PoliciesRequestBuilder Policies
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policies.PoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The policy property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policy.PolicyRequestBuilder Policy
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Policy.PolicyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The posture property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Posture.PostureRequestBuilder Posture
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Posture.PostureRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The registrations property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Registrations.RegistrationsRequestBuilder Registrations
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Registrations.RegistrationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resilience property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Resilience.ResilienceRequestBuilder Resilience
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Resilience.ResilienceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The revoke property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Revoke.RevokeRequestBuilder Revoke
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Revoke.RevokeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unrevoke property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Unrevoke.UnrevokeRequestBuilder Unrevoke
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Unrevoke.UnrevokeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.accounts.item.devices.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Item.WithDevice_ItemRequestBuilder"/></returns>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Item.WithDevice_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("device_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.Item.WithDevice_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/devices", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/devices", rawUrl)
        {
        }
        /// <summary>
        /// List WARP devices. Not supported when [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/) is enabled for the account.**Deprecated**: please use one of the following endpoints instead:- GET /accounts/{account_id}/devices/physical-devices- GET /accounts/{account_id}/devices/registrations
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_devices_response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Devices_list_devices_4XX">When receiving a 4XX status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_devices_response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_devices_response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Devices_list_devices_4XX.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_devices_response>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_devices_response.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List WARP devices. Not supported when [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/) is enabled for the account.**Deprecated**: please use one of the following endpoints instead:- GET /accounts/{account_id}/devices/physical-devices- GET /accounts/{account_id}/devices/registrations
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
