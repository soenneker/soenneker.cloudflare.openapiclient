// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.Item;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\abuse-reports
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AbuseReportsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.accounts.item.abuseReports.item collection</summary>
        /// <param name="position">Identifier of the abuse report</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.Item.WithReport_paramItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.Item.WithReport_paramItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("report_param", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.Item.WithReport_paramItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AbuseReportsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/abuse-reports{?created_after*,created_before*,domain*,mitigation_status*,page*,per_page*,sort*,status*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AbuseReportsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/abuse-reports{?created_after*,created_before*,domain*,mitigation_status*,page*,per_page*,sort*,status*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// List the abuse reports for a given account.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_500">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder.AbuseReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder.AbuseReportsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_500.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.ListAbuseReports_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List the abuse reports for a given account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder.AbuseReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder.AbuseReportsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List the abuse reports for a given account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AbuseReportsRequestBuilderGetQueryParameters 
        {
            /// <summary>Returns reports created after the specified date</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("created_after")]
            public string? CreatedAfter { get; set; }
#nullable restore
#else
            [QueryParameter("created_after")]
            public string CreatedAfter { get; set; }
#endif
            /// <summary>Returns reports created before the specified date</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("created_before")]
            public string? CreatedBefore { get; set; }
#nullable restore
#else
            [QueryParameter("created_before")]
            public string CreatedBefore { get; set; }
#endif
            /// <summary>Filter by domain name related to the abuse report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("domain")]
            public string? Domain { get; set; }
#nullable restore
#else
            [QueryParameter("domain")]
            public string Domain { get; set; }
#endif
            /// <summary>Filter reports that have any mitigations in the given status.</summary>
            [QueryParameter("mitigation_status")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Abuse_reports_MitigationStatus? MitigationStatus { get; set; }
            /// <summary>Where in pagination to start listing abuse reports</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>How many abuse reports per page to list</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>A property to sort by, followed by the order (id, cdate, domain, type, status)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            /// <summary>Filter by the status of the report.</summary>
            [QueryParameter("status")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Abuse_reports_ReportStatus? Status { get; set; }
            /// <summary>Filter by the type of the report.</summary>
            [QueryParameter("type")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Abuse_reports_ReportType? Type { get; set; }
        }
    }
}
#pragma warning restore CS0618
