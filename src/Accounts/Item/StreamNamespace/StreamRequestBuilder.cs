// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Clip;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Copy;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Direct_upload;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Item;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Keys;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Live_inputs;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StorageUsage;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Watermarks;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Webhook;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\stream
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StreamRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The clip property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Clip.ClipRequestBuilder Clip
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Clip.ClipRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The copy property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Copy.CopyRequestBuilder Copy
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Copy.CopyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The direct_upload property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Direct_upload.Direct_uploadRequestBuilder Direct_upload
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Direct_upload.Direct_uploadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keys property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Keys.KeysRequestBuilder Keys
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Keys.KeysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The live_inputs property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Live_inputs.Live_inputsRequestBuilder Live_inputs
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Live_inputs.Live_inputsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The storageUsage property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StorageUsage.StorageUsageRequestBuilder StorageUsage
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StorageUsage.StorageUsageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watermarks property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Watermarks.WatermarksRequestBuilder Watermarks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Watermarks.WatermarksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhook property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Webhook.WebhookRequestBuilder Webhook
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Webhook.WebhookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.accounts.item.stream.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Item.WithIdentifierItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Item.WithIdentifierItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("identifier", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.Item.WithIdentifierItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StreamRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/stream", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StreamRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/stream", rawUrl)
        {
        }
        /// <summary>
        /// Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StreamRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StreamRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
