// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Access;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Addressing;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Ai;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AiGateway;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Alerting;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Audit_logs;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Autorag;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Billing;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Botnet_feed;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrandProtection;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrowserRendering;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Calls;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cfd_tunnel;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Challenges;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.CloudforceOne;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cni;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Connectivity;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_ns;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_pages;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.D1;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dex;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Diagnostics;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dlp;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_firewall;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_settings;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Email;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.EmailSecurity;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_notifications;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_subscriptions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Firewall;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Gateway;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Hyperdrive;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Iam;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Images;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Infrastructure;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Intel;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logpush;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logs;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Magic;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Members;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mnm;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Move;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mtls_certificates;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Organizations;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pages;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.PayPerCrawl;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pcaps;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pipelines;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Profile;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Queues;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.R2;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Registrar;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.RequestTracer;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Roles;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rules;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rulesets;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rum;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secondary_dns;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secrets_store;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.SecurityCenter;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Shares;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Slurper;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Storage;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Subscriptions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Teamnet;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tokens;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tunnels;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Urlscanner;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Vectorize;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Waiting_rooms;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Warp_connector;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workers;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workflows;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zt_risk_scoring;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Account_identifierItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The abuseReports property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder AbuseReports
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AbuseReports.AbuseReportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The access property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Access.AccessRequestBuilder Access
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Access.AccessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addressing property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Addressing.AddressingRequestBuilder Addressing
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Addressing.AddressingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ai property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Ai.AiRequestBuilder Ai
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Ai.AiRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The aiGateway property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AiGateway.AiGatewayRequestBuilder AiGateway
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.AiGateway.AiGatewayRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The alerting property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Alerting.AlertingRequestBuilder Alerting
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Alerting.AlertingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audit_logs property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Audit_logs.Audit_logsRequestBuilder Audit_logs
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Audit_logs.Audit_logsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The autorag property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Autorag.AutoragRequestBuilder Autorag
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Autorag.AutoragRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The billing property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Billing.BillingRequestBuilder Billing
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Billing.BillingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The botnet_feed property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Botnet_feed.Botnet_feedRequestBuilder Botnet_feed
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Botnet_feed.Botnet_feedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The brandProtection property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrandProtection.BrandProtectionRequestBuilder BrandProtection
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrandProtection.BrandProtectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The browserRendering property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrowserRendering.BrowserRenderingRequestBuilder BrowserRendering
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.BrowserRendering.BrowserRenderingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The calls property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Calls.CallsRequestBuilder Calls
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Calls.CallsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cfd_tunnel property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cfd_tunnel.Cfd_tunnelRequestBuilder Cfd_tunnel
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cfd_tunnel.Cfd_tunnelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The challenges property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Challenges.ChallengesRequestBuilder Challenges
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Challenges.ChallengesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cloudforceOne property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.CloudforceOne.CloudforceOneRequestBuilder CloudforceOne
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.CloudforceOne.CloudforceOneRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cni property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cni.CniRequestBuilder Cni
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Cni.CniRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The connectivity property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Connectivity.ConnectivityRequestBuilder Connectivity
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Connectivity.ConnectivityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_ns property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_ns.Custom_nsRequestBuilder Custom_ns
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_ns.Custom_nsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_pages property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_pages.Custom_pagesRequestBuilder Custom_pages
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Custom_pages.Custom_pagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The d1 property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.D1.D1RequestBuilder D1
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.D1.D1RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The devices property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder Devices
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Devices.DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dex property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dex.DexRequestBuilder Dex
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dex.DexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The diagnostics property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Diagnostics.DiagnosticsRequestBuilder Diagnostics
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Diagnostics.DiagnosticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dlp property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dlp.DlpRequestBuilder Dlp
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dlp.DlpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dns_firewall property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_firewall.Dns_firewallRequestBuilder Dns_firewall
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_firewall.Dns_firewallRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dns_settings property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_settings.Dns_settingsRequestBuilder Dns_settings
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Dns_settings.Dns_settingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The email property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Email.EmailRequestBuilder Email
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Email.EmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emailSecurity property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.EmailSecurity.EmailSecurityRequestBuilder EmailSecurity
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.EmailSecurity.EmailSecurityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The event_notifications property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_notifications.Event_notificationsRequestBuilder Event_notifications
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_notifications.Event_notificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The event_subscriptions property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_subscriptions.Event_subscriptionsRequestBuilder Event_subscriptions
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Event_subscriptions.Event_subscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The firewall property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Firewall.FirewallRequestBuilder Firewall
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Firewall.FirewallRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gateway property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Gateway.GatewayRequestBuilder Gateway
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Gateway.GatewayRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hyperdrive property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Hyperdrive.HyperdriveRequestBuilder Hyperdrive
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Hyperdrive.HyperdriveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The iam property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Iam.IamRequestBuilder Iam
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Iam.IamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The images property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Images.ImagesRequestBuilder Images
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Images.ImagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The infrastructure property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Infrastructure.InfrastructureRequestBuilder Infrastructure
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Infrastructure.InfrastructureRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The intel property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Intel.IntelRequestBuilder Intel
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Intel.IntelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The load_balancers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Load_balancersRequestBuilder Load_balancers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Load_balancers.Load_balancersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logpush property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logpush.LogpushRequestBuilder Logpush
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logpush.LogpushRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logs property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logs.LogsRequestBuilder Logs
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Logs.LogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The magic property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Magic.MagicRequestBuilder Magic
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Magic.MagicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The members property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Members.MembersRequestBuilder Members
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Members.MembersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mnm property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mnm.MnmRequestBuilder Mnm
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mnm.MnmRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The move property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Move.MoveRequestBuilder Move
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Move.MoveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mtls_certificates property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mtls_certificates.Mtls_certificatesRequestBuilder Mtls_certificates
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Mtls_certificates.Mtls_certificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Organizations.OrganizationsRequestBuilder Organizations
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Organizations.OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pages property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pages.PagesRequestBuilder Pages
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pages.PagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The payPerCrawl property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.PayPerCrawl.PayPerCrawlRequestBuilder PayPerCrawl
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.PayPerCrawl.PayPerCrawlRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pcaps property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pcaps.PcapsRequestBuilder Pcaps
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pcaps.PcapsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pipelines property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pipelines.PipelinesRequestBuilder Pipelines
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Pipelines.PipelinesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The profile property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Profile.ProfileRequestBuilder Profile
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Profile.ProfileRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The queues property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Queues.QueuesRequestBuilder Queues
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Queues.QueuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The r2 property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.R2.R2RequestBuilder R2
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.R2.R2RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The realtimekit property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.RealtimekitRequestBuilder Realtimekit
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Realtimekit.RealtimekitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The registrar property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Registrar.RegistrarRequestBuilder Registrar
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Registrar.RegistrarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The requestTracer property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.RequestTracer.RequestTracerRequestBuilder RequestTracer
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.RequestTracer.RequestTracerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roles property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Roles.RolesRequestBuilder Roles
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Roles.RolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rules property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rules.RulesRequestBuilder Rules
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rules.RulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rulesets property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rulesets.RulesetsRequestBuilder Rulesets
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rulesets.RulesetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rum property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rum.RumRequestBuilder Rum
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Rum.RumRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The secondary_dns property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secondary_dns.Secondary_dnsRequestBuilder Secondary_dns
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secondary_dns.Secondary_dnsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The secrets_store property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secrets_store.Secrets_storeRequestBuilder Secrets_store
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Secrets_store.Secrets_storeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The securityCenter property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.SecurityCenter.SecurityCenterRequestBuilder SecurityCenter
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.SecurityCenter.SecurityCenterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The shares property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Shares.SharesRequestBuilder Shares
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Shares.SharesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The slurper property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Slurper.SlurperRequestBuilder Slurper
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Slurper.SlurperRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The storage property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Storage.StorageRequestBuilder Storage
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Storage.StorageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stream property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder Stream
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.StreamNamespace.StreamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscriptions property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teamnet property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Teamnet.TeamnetRequestBuilder Teamnet
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Teamnet.TeamnetRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tokens property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tokens.TokensRequestBuilder Tokens
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tokens.TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tunnels property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tunnels.TunnelsRequestBuilder Tunnels
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Tunnels.TunnelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The urlscanner property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Urlscanner.UrlscannerRequestBuilder Urlscanner
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Urlscanner.UrlscannerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vectorize property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Vectorize.VectorizeRequestBuilder Vectorize
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Vectorize.VectorizeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The waiting_rooms property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Waiting_rooms.Waiting_roomsRequestBuilder Waiting_rooms
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Waiting_rooms.Waiting_roomsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The warp_connector property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Warp_connector.Warp_connectorRequestBuilder Warp_connector
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Warp_connector.Warp_connectorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workers.WorkersRequestBuilder Workers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workers.WorkersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflows property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workflows.WorkflowsRequestBuilder Workflows
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Workflows.WorkflowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zerotrust property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.ZerotrustRequestBuilder Zerotrust
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.ZerotrustRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zt_risk_scoring property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zt_risk_scoring.Zt_risk_scoringRequestBuilder Zt_risk_scoring
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zt_risk_scoring.Zt_risk_scoringRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Account_identifierItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Account_identifierItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Account_identifierItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Account_identifierItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}", rawUrl)
        {
        }
        /// <summary>
        /// Delete a specific account (only available for tenant admins at this time). This is a permanent operation that will delete any zones or other resources under the account
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_single_id"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_single_id?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_single_id> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_single_id>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_single_id.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get information about a specific account that you are a member of.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update an existing account.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account?> PutAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_components_schemas_account body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account> PutAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_components_schemas_account body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_response_single_account.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a specific account (only available for tenant admins at this time). This is a permanent operation that will delete any zones or other resources under the account
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get information about a specific account that you are a member of.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update an existing account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_components_schemas_account body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_components_schemas_account body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Account_identifierItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Account_identifierItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Account_identifierItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
