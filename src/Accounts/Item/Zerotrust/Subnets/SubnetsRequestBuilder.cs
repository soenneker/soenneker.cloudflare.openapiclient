// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.Cloudflare_source;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_identifier-id}\zerotrust\subnets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubnetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The cloudflare_source property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.Cloudflare_source.Cloudflare_sourceRequestBuilder Cloudflare_source
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.Cloudflare_source.Cloudflare_sourceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubnetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/zerotrust/subnets{?address_family*,comment*,existed_at*,is_default_network*,is_deleted*,name*,network*,page*,per_page*,sort_order*,subnet_types*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubnetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_identifier%2Did}/zerotrust/subnets{?address_family*,comment*,existed_at*,is_default_network*,is_deleted*,name*,network*,page*,per_page*,sort_order*,subnet_types*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists and filters subnets in an account.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_subnet_response_collection"/></returns>
        /// <param name="body">Fallback request body schema</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_subnet_response_collection?> GetAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_RequestBody_application_json body, Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder.SubnetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_subnet_response_collection> GetAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_RequestBody_application_json body, Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder.SubnetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToGetRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_subnet_response_collection>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_subnet_response_collection.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists and filters subnets in an account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Fallback request body schema</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_RequestBody_application_json body, Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder.SubnetsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_RequestBody_application_json body, Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder.SubnetsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists and filters subnets in an account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubnetsRequestBuilderGetQueryParameters 
        {
            /// <summary>If set, only include subnets in the given address family - `v4` or `v6`</summary>
            [Obsolete("This property is deprecated, use AddressFamilyAsTunnelAddressFamily instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("address_family")]
            public string? AddressFamily { get; set; }
#nullable restore
#else
            [QueryParameter("address_family")]
            public string AddressFamily { get; set; }
#endif
            /// <summary>If set, only include subnets in the given address family - `v4` or `v6`</summary>
            [QueryParameter("address_family")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_address_family? AddressFamilyAsTunnelAddressFamily { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("comment")]
            public string? Comment { get; set; }
#nullable restore
#else
            [QueryParameter("comment")]
            public string Comment { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("existed_at")]
            public string? ExistedAt { get; set; }
#nullable restore
#else
            [QueryParameter("existed_at")]
            public string ExistedAt { get; set; }
#endif
            [QueryParameter("is_default_network")]
            public bool? IsDefaultNetwork { get; set; }
            [QueryParameter("is_deleted")]
            public bool? IsDeleted { get; set; }
            /// <summary>If set, only list subnets with the given name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("network")]
            public string? Network { get; set; }
#nullable restore
#else
            [QueryParameter("network")]
            public string Network { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
            [QueryParameter("per_page")]
            public double? PerPage { get; set; }
            [Obsolete("This property is deprecated, use SortOrderAsZeroTrustNetworksSubnetsListParamSortOrder instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort_order")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sort_order")]
            public string SortOrder { get; set; }
#endif
            [QueryParameter("sort_order")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_Param_sort_order? SortOrderAsZeroTrustNetworksSubnetsListParamSortOrder { get; set; }
            [Obsolete("This property is deprecated, use SubnetTypesAsZeroTrustNetworksSubnetsListParamSubnetTypes instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subnet_types")]
            public string? SubnetTypes { get; set; }
#nullable restore
#else
            [QueryParameter("subnet_types")]
            public string SubnetTypes { get; set; }
#endif
            [QueryParameter("subnet_types")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_networks_subnets_list_Param_subnet_types? SubnetTypesAsZeroTrustNetworksSubnetsListParamSubnetTypes { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubnetsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Accounts.Item.Zerotrust.Subnets.SubnetsRequestBuilder.SubnetsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
