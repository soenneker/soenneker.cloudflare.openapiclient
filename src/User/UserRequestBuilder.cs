// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using Soenneker.Cloudflare.OpenApiClient.User.Audit_logs;
using Soenneker.Cloudflare.OpenApiClient.User.Billing;
using Soenneker.Cloudflare.OpenApiClient.User.Firewall;
using Soenneker.Cloudflare.OpenApiClient.User.Invites;
using Soenneker.Cloudflare.OpenApiClient.User.Load_balancers;
using Soenneker.Cloudflare.OpenApiClient.User.Load_balancing_analytics;
using Soenneker.Cloudflare.OpenApiClient.User.Organizations;
using Soenneker.Cloudflare.OpenApiClient.User.Subscriptions;
using Soenneker.Cloudflare.OpenApiClient.User.Tokens;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.User
{
    /// <summary>
    /// Builds and executes requests for operations under \user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The audit_logs property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Audit_logs.Audit_logsRequestBuilder Audit_logs
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Audit_logs.Audit_logsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The billing property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Billing.BillingRequestBuilder Billing
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Billing.BillingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The firewall property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Firewall.FirewallRequestBuilder Firewall
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Firewall.FirewallRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invites property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Invites.InvitesRequestBuilder Invites
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Invites.InvitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The load_balancers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Load_balancers.Load_balancersRequestBuilder Load_balancers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Load_balancers.Load_balancersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The load_balancing_analytics property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Load_balancing_analytics.Load_balancing_analyticsRequestBuilder Load_balancing_analytics
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Load_balancing_analytics.Load_balancing_analyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Organizations.OrganizationsRequestBuilder Organizations
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Organizations.OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscriptions property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tokens property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.User.Tokens.TokensRequestBuilder Tokens
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.User.Tokens.TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.User.UserRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.User.UserRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user", rawUrl)
        {
        }
        /// <summary>
        /// User Details
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Edit part of your user details.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response?> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.User_edit_user body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.User_edit_user body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Iam_single_user_response.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// User Details
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Edit part of your user details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.User_edit_user body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.User_edit_user body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.User.UserRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.User.UserRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.User.UserRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
