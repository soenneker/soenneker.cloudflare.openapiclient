// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// AWS S3 bucket to copy objects from.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class R2_enable_sippy_aws_source : IAdditionalDataHolder, IParsable
    {
        /// <summary>Access Key ID of an IAM credential (ideally scoped to a single S3 bucket).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessKeyId { get; set; }
#nullable restore
#else
        public string AccessKeyId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the AWS S3 bucket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bucket { get; set; }
#nullable restore
#else
        public string Bucket { get; set; }
#endif
        /// <summary>The provider property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source_provider? Provider { get; set; }
        /// <summary>Name of the AWS availability zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecretAccessKey { get; set; }
#nullable restore
#else
        public string SecretAccessKey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source"/> and sets the default values.
        /// </summary>
        public R2_enable_sippy_aws_source()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessKeyId", n => { AccessKeyId = n.GetStringValue(); } },
                { "bucket", n => { Bucket = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source_provider>(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "secretAccessKey", n => { SecretAccessKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accessKeyId", AccessKeyId);
            writer.WriteStringValue("bucket", Bucket);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_enable_sippy_aws_source_provider>("provider", Provider);
            writer.WriteStringValue("region", Region);
            writer.WriteStringValue("secretAccessKey", SecretAccessKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
