// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dlp_NewCustomProfile : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ai_context_enabled property</summary>
        public bool? AiContextEnabled { get; set; }
        /// <summary>Related DLP policies will trigger when the match count exceeds the number set.</summary>
        public int? AllowedMatchCount { get; set; }
        /// <summary>The confidence_threshold property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfidenceThreshold { get; set; }
#nullable restore
#else
        public string ConfidenceThreshold { get; set; }
#endif
        /// <summary>Scan the context of predefined entries to only return matches surrounded by keywords.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_ContextAwareness? ContextAwareness { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_ContextAwareness ContextAwareness { get; set; }
#endif
        /// <summary>The description of the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The entries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_EntryOfNewProfile>? Entries { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_EntryOfNewProfile> Entries { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The ocr_enabled property</summary>
        public bool? OcrEnabled { get; set; }
        /// <summary>Entries from other profiles (e.g. pre-defined Cloudflare profiles, or your Microsoft Information Protection profiles).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewSharedEntry>? SharedEntries { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewSharedEntry> SharedEntries { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewCustomProfile"/> and sets the default values.
        /// </summary>
        public Dlp_NewCustomProfile()
        {
            AdditionalData = new Dictionary<string, object>();
            ConfidenceThreshold = "low";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewCustomProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewCustomProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewCustomProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ai_context_enabled", n => { AiContextEnabled = n.GetBoolValue(); } },
                { "allowed_match_count", n => { AllowedMatchCount = n.GetIntValue(); } },
                { "confidence_threshold", n => { ConfidenceThreshold = n.GetStringValue(); } },
                { "context_awareness", n => { ContextAwareness = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_ContextAwareness>(global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_ContextAwareness.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "entries", n => { Entries = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_EntryOfNewProfile>(global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_EntryOfNewProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "ocr_enabled", n => { OcrEnabled = n.GetBoolValue(); } },
                { "shared_entries", n => { SharedEntries = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewSharedEntry>(global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewSharedEntry.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("ai_context_enabled", AiContextEnabled);
            writer.WriteIntValue("allowed_match_count", AllowedMatchCount);
            writer.WriteStringValue("confidence_threshold", ConfidenceThreshold);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_ContextAwareness>("context_awareness", ContextAwareness);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_EntryOfNewProfile>("entries", Entries);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("ocr_enabled", OcrEnabled);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewSharedEntry>("shared_entries", SharedEntries);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
