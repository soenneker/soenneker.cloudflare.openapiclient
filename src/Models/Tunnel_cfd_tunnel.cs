// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A Cloudflare Tunnel that connects your origin to Cloudflare&apos;s edge.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tunnel_cfd_tunnel : IAdditionalDataHolder, IParsable
    {
        /// <summary>Cloudflare account ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountTag { get; private set; }
#nullable restore
#else
        public string AccountTag { get; private set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Cloudflare Tunnel connections between your origin and Cloudflare&apos;s edge.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection>? Connections { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection> Connections { get; set; }
#endif
        /// <summary>Timestamp of when the tunnel established at least one connection to Cloudflare&apos;s edge. If `null`, the tunnel is inactive.</summary>
        public DateTimeOffset? ConnsActiveAt { get; set; }
        /// <summary>Timestamp of when the tunnel became inactive (no connections to Cloudflare&apos;s edge). If `null`, the tunnel is active.</summary>
        public DateTimeOffset? ConnsInactiveAt { get; set; }
        /// <summary>Timestamp of when the resource was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.</summary>
        public DateTimeOffset? DeletedAt { get; private set; }
        /// <summary>UUID of the tunnel.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Metadata associated with the tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_metadata Metadata { get; set; }
#endif
        /// <summary>A user-friendly name for a tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.</summary>
        public bool? RemoteConfig { get; set; }
        /// <summary>The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_status? Status { get; set; }
        /// <summary>The type of tunnel.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_tunnel_type? TunType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_cfd_tunnel"/> and sets the default values.
        /// </summary>
        public Tunnel_cfd_tunnel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_cfd_tunnel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_cfd_tunnel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_cfd_tunnel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_tag", n => { AccountTag = n.GetStringValue(); } },
                { "connections", n => { Connections = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conns_active_at", n => { ConnsActiveAt = n.GetDateTimeOffsetValue(); } },
                { "conns_inactive_at", n => { ConnsInactiveAt = n.GetDateTimeOffsetValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "deleted_at", n => { DeletedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_metadata>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_metadata.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "remote_config", n => { RemoteConfig = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_status>(); } },
                { "tun_type", n => { TunType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_tunnel_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection>("connections", Connections);
            writer.WriteDateTimeOffsetValue("conns_active_at", ConnsActiveAt);
            writer.WriteDateTimeOffsetValue("conns_inactive_at", ConnsInactiveAt);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_metadata>("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("remote_config", RemoteConfig);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_tunnel_type>("tun_type", TunType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
