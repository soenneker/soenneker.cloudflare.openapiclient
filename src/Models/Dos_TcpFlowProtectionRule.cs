// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dos_TcpFlowProtectionRule : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The burst sensitivity. Must be one of &apos;low&apos;, &apos;medium&apos;, &apos;high&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BurstSensitivity { get; set; }
#nullable restore
#else
        public string BurstSensitivity { get; set; }
#endif
        /// <summary>The creation timestamp of the TCP Flow Protection rule.</summary>
        public DateTimeOffset? CreatedOn { get; set; }
        /// <summary>The unique ID of the TCP Flow Protection rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The mode for TCP Flow Protection. Must be one of &apos;enabled&apos;, &apos;disabled&apos;, &apos;monitoring&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mode { get; set; }
#nullable restore
#else
        public string Mode { get; set; }
#endif
        /// <summary>The last modification timestamp of the TCP Flow Protection rule.</summary>
        public DateTimeOffset? ModifiedOn { get; set; }
        /// <summary>The name of the TCP Flow Protection rule. Value is relative to the &apos;scope&apos; setting. For &apos;global&apos; scope, name should be &apos;global&apos;. For either the &apos;region&apos; or &apos;datacenter&apos; scope, name should be the actual name of the region or datacenter, e.g., &apos;wnam&apos; or &apos;lax&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The rate sensitivity. Must be one of &apos;low&apos;, &apos;medium&apos;, &apos;high&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RateSensitivity { get; set; }
#nullable restore
#else
        public string RateSensitivity { get; set; }
#endif
        /// <summary>The scope for the TCP Flow Protection rule. Must be one of &apos;global&apos;, &apos;region&apos;, or &apos;datacenter&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scope { get; set; }
#nullable restore
#else
        public string Scope { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_TcpFlowProtectionRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_TcpFlowProtectionRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_TcpFlowProtectionRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "burst_sensitivity", n => { BurstSensitivity = n.GetStringValue(); } },
                { "created_on", n => { CreatedOn = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "mode", n => { Mode = n.GetStringValue(); } },
                { "modified_on", n => { ModifiedOn = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "rate_sensitivity", n => { RateSensitivity = n.GetStringValue(); } },
                { "scope", n => { Scope = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("burst_sensitivity", BurstSensitivity);
            writer.WriteDateTimeOffsetValue("created_on", CreatedOn);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("mode", Mode);
            writer.WriteDateTimeOffsetValue("modified_on", ModifiedOn);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("rate_sensitivity", RateSensitivity);
            writer.WriteStringValue("scope", Scope);
        }
    }
}
#pragma warning restore CS0618
