// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot Mount
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Mconn_snapshot_mount : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Available disk size (bytes)</summary>
        public double? AvailableBytes { get; set; }
        /// <summary>Connector identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectorId { get; set; }
#nullable restore
#else
        public string ConnectorId { get; set; }
#endif
        /// <summary>File system on disk (EXT4, NTFS, etc.)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileSystem { get; set; }
#nullable restore
#else
        public string FileSystem { get; set; }
#endif
        /// <summary>Determines whether the disk is read-only</summary>
        public bool? IsReadOnly { get; set; }
        /// <summary>Determines whether the disk is removable</summary>
        public bool? IsRemovable { get; set; }
        /// <summary>Kind of disk (HDD, SSD, etc.)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kind { get; set; }
#nullable restore
#else
        public string Kind { get; set; }
#endif
        /// <summary>Path where disk is mounted</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MountPoint { get; set; }
#nullable restore
#else
        public string MountPoint { get; set; }
#endif
        /// <summary>Name of the disk mount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Total disk size (bytes)</summary>
        public double? TotalBytes { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount"/> and sets the default values.
        /// </summary>
        public Mconn_snapshot_mount()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available_bytes", n => { AvailableBytes = n.GetDoubleValue(); } },
                { "connector_id", n => { ConnectorId = n.GetStringValue(); } },
                { "file_system", n => { FileSystem = n.GetStringValue(); } },
                { "is_read_only", n => { IsReadOnly = n.GetBoolValue(); } },
                { "is_removable", n => { IsRemovable = n.GetBoolValue(); } },
                { "kind", n => { Kind = n.GetStringValue(); } },
                { "mount_point", n => { MountPoint = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "total_bytes", n => { TotalBytes = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("available_bytes", AvailableBytes);
            writer.WriteStringValue("connector_id", ConnectorId);
            writer.WriteStringValue("file_system", FileSystem);
            writer.WriteBoolValue("is_read_only", IsReadOnly);
            writer.WriteBoolValue("is_removable", IsRemovable);
            writer.WriteStringValue("kind", Kind);
            writer.WriteStringValue("mount_point", MountPoint);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("total_bytes", TotalBytes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
