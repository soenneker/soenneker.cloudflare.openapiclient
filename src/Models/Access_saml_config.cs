// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Access_saml_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Attributes { get; set; }
#nullable restore
#else
        public List<string> Attributes { get; set; }
#endif
        /// <summary>The attribute name for email in the SAML response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAttributeName { get; set; }
#nullable restore
#else
        public string EmailAttributeName { get; set; }
#endif
        /// <summary>Add a list of attribute names that will be returned in the response header from the Access callback.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config_header_attributes>? HeaderAttributes { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config_header_attributes> HeaderAttributes { get; set; }
#endif
        /// <summary>X509 certificate to verify the signature in the SAML authentication response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IdpPublicCerts { get; set; }
#nullable restore
#else
        public List<string> IdpPublicCerts { get; set; }
#endif
        /// <summary>IdP Entity ID or Issuer URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerUrl { get; set; }
#nullable restore
#else
        public string IssuerUrl { get; set; }
#endif
        /// <summary>Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.</summary>
        public bool? SignRequest { get; set; }
        /// <summary>URL to send the SAML authentication requests to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SsoTargetUrl { get; set; }
#nullable restore
#else
        public string SsoTargetUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config"/> and sets the default values.
        /// </summary>
        public Access_saml_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attributes", n => { Attributes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "email_attribute_name", n => { EmailAttributeName = n.GetStringValue(); } },
                { "header_attributes", n => { HeaderAttributes = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config_header_attributes>(global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config_header_attributes.CreateFromDiscriminatorValue)?.AsList(); } },
                { "idp_public_certs", n => { IdpPublicCerts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "issuer_url", n => { IssuerUrl = n.GetStringValue(); } },
                { "sign_request", n => { SignRequest = n.GetBoolValue(); } },
                { "sso_target_url", n => { SsoTargetUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("attributes", Attributes);
            writer.WriteStringValue("email_attribute_name", EmailAttributeName);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_saml_config_header_attributes>("header_attributes", HeaderAttributes);
            writer.WriteCollectionOfPrimitiveValues<string>("idp_public_certs", IdpPublicCerts);
            writer.WriteStringValue("issuer_url", IssuerUrl);
            writer.WriteBoolValue("sign_request", SignRequest);
            writer.WriteStringValue("sso_target_url", SsoTargetUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
