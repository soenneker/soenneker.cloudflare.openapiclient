// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Zone_analytics_api_timeseries_item : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Breakdown of totals for bandwidth in the form of bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_bandwidth? Bandwidth { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_bandwidth Bandwidth { get; set; }
#endif
        /// <summary>Breakdown of totals for pageviews.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_pageviews? Pageviews { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_pageviews Pageviews { get; set; }
#endif
        /// <summary>Breakdown of totals for requests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_requests? Requests { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_requests Requests { get; set; }
#endif
        /// <summary>The (inclusive) beginning of the requested time frame. This value can be a negative integer representing the number of minutes in the past relative to time the request is made, or can be an absolute timestamp that conforms to RFC 3339. At this point in time, it cannot exceed a time in the past greater than one year.Ranges that the Cloudflare web application provides will provide the following period length for each point:- Last 60 minutes (from -59 to -1): 1 minute resolution- Last 7 hours (from -419 to -60): 15 minutes resolution- Last 15 hours (from -899 to -420): 30 minutes resolution- Last 72 hours (from -4320 to -900): 1 hour resolution- Older than 3 days (-525600 to -4320): 1 day resolution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_since? Since { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_since Since { get; set; }
#endif
        /// <summary>Breakdown of totals for threats.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_threats? Threats { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_threats Threats { get; set; }
#endif
        /// <summary>The uniques property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_uniques? Uniques { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_uniques Uniques { get; set; }
#endif
        /// <summary>The (exclusive) end of the requested time frame. This value can be a negative integer representing the number of minutes in the past relative to time the request is made, or can be an absolute timestamp that conforms to RFC 3339. If omitted, the time of the request is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_until? Until { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_until Until { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_timeseries_item"/> and sets the default values.
        /// </summary>
        public Zone_analytics_api_timeseries_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_timeseries_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_timeseries_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_timeseries_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bandwidth", n => { Bandwidth = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_bandwidth>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_bandwidth.CreateFromDiscriminatorValue); } },
                { "pageviews", n => { Pageviews = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_pageviews>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_pageviews.CreateFromDiscriminatorValue); } },
                { "requests", n => { Requests = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_requests>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_requests.CreateFromDiscriminatorValue); } },
                { "since", n => { Since = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_since>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_since.CreateFromDiscriminatorValue); } },
                { "threats", n => { Threats = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_threats>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_threats.CreateFromDiscriminatorValue); } },
                { "uniques", n => { Uniques = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_uniques>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_uniques.CreateFromDiscriminatorValue); } },
                { "until", n => { Until = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_until>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_until.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_bandwidth>("bandwidth", Bandwidth);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_pageviews>("pageviews", Pageviews);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_requests>("requests", Requests);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_since>("since", Since);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_threats>("threats", Threats);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_uniques>("uniques", Uniques);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zone_analytics_api_until>("until", Until);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
