// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// An object configuring the rule&apos;s rate limit behavior.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Rulesets_RuleRatelimit : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Characteristics of the request on which the rate limit counter will be incremented.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Characteristics { get; set; }
#nullable restore
#else
        public List<string> Characteristics { get; set; }
#endif
        /// <summary>An expression that defines when the rate limit counter should be incremented. It defaults to the same as the rule&apos;s expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountingExpression { get; set; }
#nullable restore
#else
        public string CountingExpression { get; set; }
#endif
        /// <summary>Period of time in seconds after which the action will be disabled following its first execution.</summary>
        public int? MitigationTimeout { get; set; }
        /// <summary>Period in seconds over which the counter is being incremented.</summary>
        public int? Period { get; set; }
        /// <summary>The threshold of requests per period after which the action will be executed for the first time.</summary>
        public int? RequestsPerPeriod { get; set; }
        /// <summary>Whether counting is only performed when an origin is reached.</summary>
        public bool? RequestsToOrigin { get; set; }
        /// <summary>The score threshold per period for which the action will be executed the first time.</summary>
        public int? ScorePerPeriod { get; set; }
        /// <summary>A response header name provided by the origin, which contains the score to increment rate limit counter with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScoreResponseHeaderName { get; set; }
#nullable restore
#else
        public string ScoreResponseHeaderName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_RuleRatelimit"/> and sets the default values.
        /// </summary>
        public Rulesets_RuleRatelimit()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_RuleRatelimit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_RuleRatelimit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_RuleRatelimit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "characteristics", n => { Characteristics = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "counting_expression", n => { CountingExpression = n.GetStringValue(); } },
                { "mitigation_timeout", n => { MitigationTimeout = n.GetIntValue(); } },
                { "period", n => { Period = n.GetIntValue(); } },
                { "requests_per_period", n => { RequestsPerPeriod = n.GetIntValue(); } },
                { "requests_to_origin", n => { RequestsToOrigin = n.GetBoolValue(); } },
                { "score_per_period", n => { ScorePerPeriod = n.GetIntValue(); } },
                { "score_response_header_name", n => { ScoreResponseHeaderName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("characteristics", Characteristics);
            writer.WriteStringValue("counting_expression", CountingExpression);
            writer.WriteIntValue("mitigation_timeout", MitigationTimeout);
            writer.WriteIntValue("period", Period);
            writer.WriteIntValue("requests_per_period", RequestsPerPeriod);
            writer.WriteBoolValue("requests_to_origin", RequestsToOrigin);
            writer.WriteIntValue("score_per_period", ScorePerPeriod);
            writer.WriteStringValue("score_response_header_name", ScoreResponseHeaderName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
