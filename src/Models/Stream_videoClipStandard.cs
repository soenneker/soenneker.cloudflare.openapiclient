// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Stream_videoClipStandard : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedOrigins { get; set; }
#nullable restore
#else
        public List<string> AllowedOrigins { get; set; }
#endif
        /// <summary>The unique video identifier (UID).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClippedFromVideoUID { get; set; }
#nullable restore
#else
        public string ClippedFromVideoUID { get; set; }
#endif
        /// <summary>A user-defined identifier for the media creator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Creator { get; set; }
#nullable restore
#else
        public string Creator { get; set; }
#endif
        /// <summary>Specifies the end time for the video clip in seconds.</summary>
        public int? EndTimeSeconds { get; set; }
        /// <summary>The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.</summary>
        public int? MaxDurationSeconds { get; set; }
        /// <summary>Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.</summary>
        public bool? RequireSignedURLs { get; set; }
        /// <summary>Specifies the start time for the video clip in seconds.</summary>
        public int? StartTimeSeconds { get; set; }
        /// <summary>The timestamp for a thumbnail image calculated as a percentage value of the video&apos;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.</summary>
        public double? ThumbnailTimestampPct { get; set; }
        /// <summary>The watermark property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarkAtUpload? Watermark { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarkAtUpload Watermark { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videoClipStandard"/> and sets the default values.
        /// </summary>
        public Stream_videoClipStandard()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videoClipStandard"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videoClipStandard CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videoClipStandard();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowedOrigins", n => { AllowedOrigins = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "clippedFromVideoUID", n => { ClippedFromVideoUID = n.GetStringValue(); } },
                { "creator", n => { Creator = n.GetStringValue(); } },
                { "endTimeSeconds", n => { EndTimeSeconds = n.GetIntValue(); } },
                { "maxDurationSeconds", n => { MaxDurationSeconds = n.GetIntValue(); } },
                { "requireSignedURLs", n => { RequireSignedURLs = n.GetBoolValue(); } },
                { "startTimeSeconds", n => { StartTimeSeconds = n.GetIntValue(); } },
                { "thumbnailTimestampPct", n => { ThumbnailTimestampPct = n.GetDoubleValue(); } },
                { "watermark", n => { Watermark = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarkAtUpload>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarkAtUpload.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("allowedOrigins", AllowedOrigins);
            writer.WriteStringValue("clippedFromVideoUID", ClippedFromVideoUID);
            writer.WriteStringValue("creator", Creator);
            writer.WriteIntValue("endTimeSeconds", EndTimeSeconds);
            writer.WriteIntValue("maxDurationSeconds", MaxDurationSeconds);
            writer.WriteBoolValue("requireSignedURLs", RequireSignedURLs);
            writer.WriteIntValue("startTimeSeconds", StartTimeSeconds);
            writer.WriteDoubleValue("thumbnailTimestampPct", ThumbnailTimestampPct);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarkAtUpload>("watermark", Watermark);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
