// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DnsSettings_dnsSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_flatten_all_cnames? FlattenAllCnames { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_flatten_all_cnames FlattenAllCnames { get; set; }
#endif
        /// <summary>Whether to enable Foundation DNS Advanced Nameservers on the zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_foundation_dns? FoundationDns { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_foundation_dns FoundationDns { get; set; }
#endif
        /// <summary>Settings for this internal zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_internal_dns? InternalDns { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_internal_dns InternalDns { get; set; }
#endif
        /// <summary>Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_multi_provider? MultiProvider { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_multi_provider MultiProvider { get; set; }
#endif
        /// <summary>The time to live (TTL) of the zone&apos;s nameserver (NS) records.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_ns_ttl? NsTtl { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_ns_ttl NsTtl { get; set; }
#endif
        /// <summary>Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_secondary_overrides? SecondaryOverrides { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_secondary_overrides SecondaryOverrides { get; set; }
#endif
        /// <summary>Components of the zone&apos;s SOA record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa? Soa { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa Soa { get; set; }
#endif
        /// <summary>Whether the zone mode is a regular or CDN/DNS only zone.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_zone_mode? ZoneMode { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_dnsSettings"/> and sets the default values.
        /// </summary>
        public DnsSettings_dnsSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_dnsSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_dnsSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_dnsSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "flatten_all_cnames", n => { FlattenAllCnames = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_flatten_all_cnames>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_flatten_all_cnames.CreateFromDiscriminatorValue); } },
                { "foundation_dns", n => { FoundationDns = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_foundation_dns>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_foundation_dns.CreateFromDiscriminatorValue); } },
                { "internal_dns", n => { InternalDns = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_internal_dns>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_internal_dns.CreateFromDiscriminatorValue); } },
                { "multi_provider", n => { MultiProvider = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_multi_provider>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_multi_provider.CreateFromDiscriminatorValue); } },
                { "ns_ttl", n => { NsTtl = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_ns_ttl>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_ns_ttl.CreateFromDiscriminatorValue); } },
                { "secondary_overrides", n => { SecondaryOverrides = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_secondary_overrides>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_secondary_overrides.CreateFromDiscriminatorValue); } },
                { "soa", n => { Soa = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa.CreateFromDiscriminatorValue); } },
                { "zone_mode", n => { ZoneMode = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_zone_mode>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_flatten_all_cnames>("flatten_all_cnames", FlattenAllCnames);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_foundation_dns>("foundation_dns", FoundationDns);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_internal_dns>("internal_dns", InternalDns);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_multi_provider>("multi_provider", MultiProvider);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_ns_ttl>("ns_ttl", NsTtl);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_secondary_overrides>("secondary_overrides", SecondaryOverrides);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa>("soa", Soa);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_zone_mode>("zone_mode", ZoneMode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
