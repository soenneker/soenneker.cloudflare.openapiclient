// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Rolling policy for file sinks (when &amp; why to close a file and open a new one).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Cloudflare_pipelines_r2Table_rolling_policy : IParsable
    {
        /// <summary>Files will be rolled after reaching this number of bytes</summary>
        public int? FileSizeBytes { get; set; }
        /// <summary>Number of seconds of inactivity to wait before rolling over to a new file</summary>
        public int? InactivitySeconds { get; set; }
        /// <summary>Number of seconds to wait before rolling over to a new file</summary>
        public int? IntervalSeconds { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_pipelines_r2Table_rolling_policy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_pipelines_r2Table_rolling_policy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_pipelines_r2Table_rolling_policy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "file_size_bytes", n => { FileSizeBytes = n.GetIntValue(); } },
                { "inactivity_seconds", n => { InactivitySeconds = n.GetIntValue(); } },
                { "interval_seconds", n => { IntervalSeconds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("file_size_bytes", FileSizeBytes);
            writer.WriteIntValue("inactivity_seconds", InactivitySeconds);
            writer.WriteIntValue("interval_seconds", IntervalSeconds);
        }
    }
}
#pragma warning restore CS0618
