// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_bgp_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ASN used on the customer end of the BGP session</summary>
        public int? CustomerAsn { get; set; }
        /// <summary>Prefixes in this list will be advertised to the customer device, in addition to the routes in the Magic routing table.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ExtraPrefixes { get; set; }
#nullable restore
#else
        public List<string> ExtraPrefixes { get; set; }
#endif
        /// <summary>MD5 key to use for session authentication.Note that *this is not a security measure*. MD5 is not a valid security mechanism, and thekey is not treated as a secret value. This is *only* supported for preventingmisconfiguration, not for defending against malicious attacks.The MD5 key, if set, must be of non-zero length and consist only of the following types ofcharacter:* ASCII alphanumerics: `[a-zA-Z0-9]`* Special characters in the set `&apos;!@#$%^&amp;*()+[]{}&lt;&gt;/.,;:_-~`= \|`In other words, MD5 keys may contain any printable ASCII character aside from newline (0x0A),quotation mark (`&quot;`), vertical tab (0x0B), carriage return (0x0D), tab (0x09), form feed(0x0C), and the question mark (`?`). Requests specifying an MD5 key with one or more ofthese disallowed characters will be rejected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Md5Key { get; set; }
#nullable restore
#else
        public string Md5Key { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config"/> and sets the default values.
        /// </summary>
        public Magic_bgp_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customer_asn", n => { CustomerAsn = n.GetIntValue(); } },
                { "extra_prefixes", n => { ExtraPrefixes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "md5_key", n => { Md5Key = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("customer_asn", CustomerAsn);
            writer.WriteCollectionOfPrimitiveValues<string>("extra_prefixes", ExtraPrefixes);
            writer.WriteStringValue("md5_key", Md5Key);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
