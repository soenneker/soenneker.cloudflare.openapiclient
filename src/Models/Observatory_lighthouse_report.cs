// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// The Lighthouse report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Observatory_lighthouse_report : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Cumulative Layout Shift.</summary>
        public double? Cls { get; set; }
        /// <summary>The type of device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_device_type? DeviceType { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_device_type DeviceType { get; set; }
#endif
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report_error? Error { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report_error Error { get; set; }
#endif
        /// <summary>First Contentful Paint.</summary>
        public double? Fcp { get; set; }
        /// <summary>The URL to the full Lighthouse JSON report.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JsonReportUrl { get; set; }
#nullable restore
#else
        public string JsonReportUrl { get; set; }
#endif
        /// <summary>Largest Contentful Paint.</summary>
        public double? Lcp { get; set; }
        /// <summary>The Lighthouse performance score.</summary>
        public double? PerformanceScore { get; set; }
        /// <summary>Speed Index.</summary>
        public double? Si { get; set; }
        /// <summary>The state of the Lighthouse report.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_state? State { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_state State { get; set; }
#endif
        /// <summary>Total Blocking Time.</summary>
        public double? Tbt { get; set; }
        /// <summary>Time To First Byte.</summary>
        public double? Ttfb { get; set; }
        /// <summary>Time To Interactive.</summary>
        public double? Tti { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report"/> and sets the default values.
        /// </summary>
        public Observatory_lighthouse_report()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cls", n => { Cls = n.GetDoubleValue(); } },
                { "deviceType", n => { DeviceType = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_device_type>(global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_device_type.CreateFromDiscriminatorValue); } },
                { "error", n => { Error = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report_error>(global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report_error.CreateFromDiscriminatorValue); } },
                { "fcp", n => { Fcp = n.GetDoubleValue(); } },
                { "jsonReportUrl", n => { JsonReportUrl = n.GetStringValue(); } },
                { "lcp", n => { Lcp = n.GetDoubleValue(); } },
                { "performanceScore", n => { PerformanceScore = n.GetDoubleValue(); } },
                { "si", n => { Si = n.GetDoubleValue(); } },
                { "state", n => { State = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_state>(global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_state.CreateFromDiscriminatorValue); } },
                { "tbt", n => { Tbt = n.GetDoubleValue(); } },
                { "ttfb", n => { Ttfb = n.GetDoubleValue(); } },
                { "tti", n => { Tti = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("cls", Cls);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_device_type>("deviceType", DeviceType);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_report_error>("error", Error);
            writer.WriteDoubleValue("fcp", Fcp);
            writer.WriteStringValue("jsonReportUrl", JsonReportUrl);
            writer.WriteDoubleValue("lcp", Lcp);
            writer.WriteDoubleValue("performanceScore", PerformanceScore);
            writer.WriteDoubleValue("si", Si);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Observatory_lighthouse_state>("state", State);
            writer.WriteDoubleValue("tbt", Tbt);
            writer.WriteDoubleValue("ttfb", Ttfb);
            writer.WriteDoubleValue("tti", Tti);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
