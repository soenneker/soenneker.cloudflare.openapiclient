// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DigitalExperienceMonitoring_device : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alwaysOn property</summary>
        public bool? AlwaysOn { get; set; }
        /// <summary>The batteryCharging property</summary>
        public bool? BatteryCharging { get; set; }
        /// <summary>The batteryCycles property</summary>
        public long? BatteryCycles { get; set; }
        /// <summary>The batteryPct property</summary>
        public float? BatteryPct { get; set; }
        /// <summary>Cloudflare colo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_colo? Colo { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_colo Colo { get; set; }
#endif
        /// <summary>The connectionType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionType { get; set; }
#nullable restore
#else
        public string ConnectionType { get; set; }
#endif
        /// <summary>The cpuPct property</summary>
        public float? CpuPct { get; set; }
        /// <summary>The cpuPctByApp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? CpuPctByApp { get; set; }
#nullable restore
#else
        public UntypedNode CpuPctByApp { get; set; }
#endif
        /// <summary>Device identifier (UUID v4)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The deviceIpv4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? DeviceIpv4 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info DeviceIpv4 { get; set; }
#endif
        /// <summary>The deviceIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? DeviceIpv6 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info DeviceIpv6 { get; set; }
#endif
        /// <summary>Device identifier (human readable)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName { get; set; }
#nullable restore
#else
        public string DeviceName { get; set; }
#endif
        /// <summary>The diskReadBps property</summary>
        public long? DiskReadBps { get; set; }
        /// <summary>The diskUsagePct property</summary>
        public float? DiskUsagePct { get; set; }
        /// <summary>The diskWriteBps property</summary>
        public long? DiskWriteBps { get; set; }
        /// <summary>The dohSubdomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DohSubdomain { get; set; }
#nullable restore
#else
        public string DohSubdomain { get; set; }
#endif
        /// <summary>The estimatedLossPct property</summary>
        public float? EstimatedLossPct { get; set; }
        /// <summary>The firewallEnabled property</summary>
        public bool? FirewallEnabled { get; set; }
        /// <summary>The gatewayIpv4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? GatewayIpv4 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info GatewayIpv4 { get; set; }
#endif
        /// <summary>The gatewayIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? GatewayIpv6 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info GatewayIpv6 { get; set; }
#endif
        /// <summary>The handshakeLatencyMs property</summary>
        public long? HandshakeLatencyMs { get; set; }
        /// <summary>The ispIpv4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? IspIpv4 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info IspIpv4 { get; set; }
#endif
        /// <summary>The ispIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info? IspIpv6 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info IspIpv6 { get; set; }
#endif
        /// <summary>The metal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metal { get; set; }
#nullable restore
#else
        public string Metal { get; set; }
#endif
        /// <summary>The mode under which the WARP client is run</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_mode? Mode { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_mode Mode { get; set; }
#endif
        /// <summary>The networkRcvdBps property</summary>
        public long? NetworkRcvdBps { get; set; }
        /// <summary>The networkSentBps property</summary>
        public long? NetworkSentBps { get; set; }
        /// <summary>The networkSsid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkSsid { get; set; }
#nullable restore
#else
        public string NetworkSsid { get; set; }
#endif
        /// <summary>User contact email address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_personEmail? PersonEmail { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_personEmail PersonEmail { get; set; }
#endif
        /// <summary>Operating system</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_platform? Platform { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_platform Platform { get; set; }
#endif
        /// <summary>The ramAvailableKb property</summary>
        public long? RamAvailableKb { get; set; }
        /// <summary>The ramUsedPct property</summary>
        public float? RamUsedPct { get; set; }
        /// <summary>The ramUsedPctByApp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? RamUsedPctByApp { get; set; }
#nullable restore
#else
        public UntypedNode RamUsedPctByApp { get; set; }
#endif
        /// <summary>Network status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_status? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_status Status { get; set; }
#endif
        /// <summary>The switchLocked property</summary>
        public bool? SwitchLocked { get; set; }
        /// <summary>Timestamp in ISO format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_timestamp? Timestamp { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_timestamp Timestamp { get; set; }
#endif
        /// <summary>WARP client version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_version? Version { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_version Version { get; set; }
#endif
        /// <summary>The wifiStrengthDbm property</summary>
        public long? WifiStrengthDbm { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_device"/> and sets the default values.
        /// </summary>
        public DigitalExperienceMonitoring_device()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_device"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_device CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_device();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alwaysOn", n => { AlwaysOn = n.GetBoolValue(); } },
                { "batteryCharging", n => { BatteryCharging = n.GetBoolValue(); } },
                { "batteryCycles", n => { BatteryCycles = n.GetLongValue(); } },
                { "batteryPct", n => { BatteryPct = n.GetFloatValue(); } },
                { "colo", n => { Colo = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_colo>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_colo.CreateFromDiscriminatorValue); } },
                { "connectionType", n => { ConnectionType = n.GetStringValue(); } },
                { "cpuPct", n => { CpuPct = n.GetFloatValue(); } },
                { "cpuPctByApp", n => { CpuPctByApp = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceIpv4", n => { DeviceIpv4 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "deviceIpv6", n => { DeviceIpv6 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "diskReadBps", n => { DiskReadBps = n.GetLongValue(); } },
                { "diskUsagePct", n => { DiskUsagePct = n.GetFloatValue(); } },
                { "diskWriteBps", n => { DiskWriteBps = n.GetLongValue(); } },
                { "dohSubdomain", n => { DohSubdomain = n.GetStringValue(); } },
                { "estimatedLossPct", n => { EstimatedLossPct = n.GetFloatValue(); } },
                { "firewallEnabled", n => { FirewallEnabled = n.GetBoolValue(); } },
                { "gatewayIpv4", n => { GatewayIpv4 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "gatewayIpv6", n => { GatewayIpv6 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "handshakeLatencyMs", n => { HandshakeLatencyMs = n.GetLongValue(); } },
                { "ispIpv4", n => { IspIpv4 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "ispIpv6", n => { IspIpv6 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info.CreateFromDiscriminatorValue); } },
                { "metal", n => { Metal = n.GetStringValue(); } },
                { "mode", n => { Mode = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_mode>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_mode.CreateFromDiscriminatorValue); } },
                { "networkRcvdBps", n => { NetworkRcvdBps = n.GetLongValue(); } },
                { "networkSentBps", n => { NetworkSentBps = n.GetLongValue(); } },
                { "networkSsid", n => { NetworkSsid = n.GetStringValue(); } },
                { "personEmail", n => { PersonEmail = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_personEmail>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_personEmail.CreateFromDiscriminatorValue); } },
                { "platform", n => { Platform = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_platform>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_platform.CreateFromDiscriminatorValue); } },
                { "ramAvailableKb", n => { RamAvailableKb = n.GetLongValue(); } },
                { "ramUsedPct", n => { RamUsedPct = n.GetFloatValue(); } },
                { "ramUsedPctByApp", n => { RamUsedPctByApp = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_status>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_status.CreateFromDiscriminatorValue); } },
                { "switchLocked", n => { SwitchLocked = n.GetBoolValue(); } },
                { "timestamp", n => { Timestamp = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_timestamp>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_timestamp.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_version>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_version.CreateFromDiscriminatorValue); } },
                { "wifiStrengthDbm", n => { WifiStrengthDbm = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("alwaysOn", AlwaysOn);
            writer.WriteBoolValue("batteryCharging", BatteryCharging);
            writer.WriteLongValue("batteryCycles", BatteryCycles);
            writer.WriteFloatValue("batteryPct", BatteryPct);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_colo>("colo", Colo);
            writer.WriteStringValue("connectionType", ConnectionType);
            writer.WriteFloatValue("cpuPct", CpuPct);
            writer.WriteObjectValue<UntypedNode>("cpuPctByApp", CpuPctByApp);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("deviceIpv4", DeviceIpv4);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("deviceIpv6", DeviceIpv6);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteLongValue("diskReadBps", DiskReadBps);
            writer.WriteFloatValue("diskUsagePct", DiskUsagePct);
            writer.WriteLongValue("diskWriteBps", DiskWriteBps);
            writer.WriteStringValue("dohSubdomain", DohSubdomain);
            writer.WriteFloatValue("estimatedLossPct", EstimatedLossPct);
            writer.WriteBoolValue("firewallEnabled", FirewallEnabled);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("gatewayIpv4", GatewayIpv4);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("gatewayIpv6", GatewayIpv6);
            writer.WriteLongValue("handshakeLatencyMs", HandshakeLatencyMs);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("ispIpv4", IspIpv4);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_ip_info>("ispIpv6", IspIpv6);
            writer.WriteStringValue("metal", Metal);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_mode>("mode", Mode);
            writer.WriteLongValue("networkRcvdBps", NetworkRcvdBps);
            writer.WriteLongValue("networkSentBps", NetworkSentBps);
            writer.WriteStringValue("networkSsid", NetworkSsid);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_personEmail>("personEmail", PersonEmail);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_platform>("platform", Platform);
            writer.WriteLongValue("ramAvailableKb", RamAvailableKb);
            writer.WriteFloatValue("ramUsedPct", RamUsedPct);
            writer.WriteObjectValue<UntypedNode>("ramUsedPctByApp", RamUsedPctByApp);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_status>("status", Status);
            writer.WriteBoolValue("switchLocked", SwitchLocked);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_timestamp>("timestamp", Timestamp);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_version>("version", Version);
            writer.WriteLongValue("wifiStrengthDbm", WifiStrengthDbm);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
