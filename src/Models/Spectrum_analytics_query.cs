// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Spectrum_analytics_query : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Can be used to break down the data by given attributes. Options are: Dimension                 | Name                            | Example--------------------------|---------------------------------|--------------------------event                     | Connection Event                | connect, progress, disconnect, originError, clientFilteredappID                     | Application ID                  | 40d67c87c6cd4b889a4fd57805225e85coloName                  | Colo Name                       | SFOipVersion                 | IP version used by the client   | 4, 6.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Current?>? Dimensions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Current?> Dimensions { get; set; }
#endif
        /// <summary>Used to filter rows by one or more dimensions. Filters can be combined using OR and AND boolean logic. AND takes precedence over OR in all the expressions. The OR operator is defined using a comma (,) or OR keyword surrounded by whitespace. The AND operator is defined using a semicolon (;) or AND keyword surrounded by whitespace. Note that the semicolon is a reserved character in URLs (rfc1738) and needs to be percent-encoded as %3B. Comparison options are:Operator                  | Name                            | URL Encoded--------------------------|---------------------------------|--------------------------==                        | Equals                          | %3D%3D!=                        | Does not equals                 | !%3D\&gt;                        | Greater Than                    | %3E\&lt;                        | Less Than                       | %3C\&gt;=                       | Greater than or equal to        | %3E%3D\&lt;=                       | Less than or equal to           | %3C%3D</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Filters { get; set; }
#nullable restore
#else
        public string Filters { get; set; }
#endif
        /// <summary>Limit number of returned metrics.</summary>
        public double? Limit { get; set; }
        /// <summary>One or more metrics to compute. Options are: Metric                    | Name                                | Example                  | Unit--------------------------|-------------------------------------|--------------------------|--------------------------count                     | Count of total events               | 1000                     | CountbytesIngress              | Sum of ingress bytes                | 1000                     | SumbytesEgress               | Sum of egress bytes                 | 1000                     | SumdurationAvg               | Average connection duration         | 1.0                      | Time in millisecondsdurationMedian            | Median connection duration          | 1.0                      | Time in millisecondsduration90th              | 90th percentile connection duration | 1.0                      | Time in millisecondsduration99th              | 99th percentile connection duration | 1.0                      | Time in milliseconds.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Current?>? Metrics { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Current?> Metrics { get; set; }
#endif
        /// <summary>The since property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_since? Since { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_since Since { get; set; }
#endif
        /// <summary>The sort order for the result set; sort fields must be included in `metrics` or `dimensions`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Sort { get; set; }
#nullable restore
#else
        public List<string> Sort { get; set; }
#endif
        /// <summary>The until property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_until? Until { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_until Until { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_query"/> and sets the default values.
        /// </summary>
        public Spectrum_analytics_query()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_query"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_query CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_query();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dimensions", n => { Dimensions = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Current>()?.AsList(); } },
                { "filters", n => { Filters = n.GetStringValue(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "metrics", n => { Metrics = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Current>()?.AsList(); } },
                { "since", n => { Since = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_since>(global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_since.CreateFromDiscriminatorValue); } },
                { "sort", n => { Sort = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "until", n => { Until = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_until>(global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_until.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Current>("dimensions", Dimensions);
            writer.WriteStringValue("filters", Filters);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Current>("metrics", Metrics);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_since>("since", Since);
            writer.WriteCollectionOfPrimitiveValues<string>("sort", Sort);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Spectrum_analytics_until>("until", Until);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
