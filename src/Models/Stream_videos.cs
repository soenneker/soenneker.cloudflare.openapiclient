// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Stream_videos : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedOrigins { get; set; }
#nullable restore
#else
        public List<string> AllowedOrigins { get; set; }
#endif
        /// <summary>The date and time the media item was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_created? Created { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_created Created { get; set; }
#endif
        /// <summary>A user-defined identifier for the media creator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_creator? Creator { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_creator Creator { get; set; }
#endif
        /// <summary>The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_duration? Duration { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_duration Duration { get; set; }
#endif
        /// <summary>The input property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_input? Input { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_input Input { get; set; }
#endif
        /// <summary>The live input ID used to upload a video with Stream Live.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_liveInput? LiveInput { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_liveInput LiveInput { get; set; }
#endif
        /// <summary>The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_maxDurationSeconds? MaxDurationSeconds { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_maxDurationSeconds MaxDurationSeconds { get; set; }
#endif
        /// <summary>A user modifiable key-value store used to reference other systems of record for managing videos.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_metadata? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_metadata Meta { get; set; }
#endif
        /// <summary>The date and time the media item was last modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_modified? Modified { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_modified Modified { get; set; }
#endif
        /// <summary>The playback property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_playback? Playback { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_playback Playback { get; set; }
#endif
        /// <summary>The video&apos;s preview page URI. This field is omitted until encoding is complete.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_preview? Preview { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_preview Preview { get; set; }
#endif
        /// <summary>Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStream? ReadyToStream { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStream ReadyToStream { get; set; }
#endif
        /// <summary>Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStreamAt? ReadyToStreamAt { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStreamAt ReadyToStreamAt { get; set; }
#endif
        /// <summary>Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_requireSignedURLs? RequireSignedURLs { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_requireSignedURLs RequireSignedURLs { get; set; }
#endif
        /// <summary>Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_scheduledDeletion? ScheduledDeletion { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_scheduledDeletion ScheduledDeletion { get; set; }
#endif
        /// <summary>The size of the media item in bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_size? Size { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_size Size { get; set; }
#endif
        /// <summary>Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_status? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_status Status { get; set; }
#endif
        /// <summary>The media item&apos;s thumbnail URI. This field is omitted until encoding is complete.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnail_url? Thumbnail { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnail_url Thumbnail { get; set; }
#endif
        /// <summary>The timestamp for a thumbnail image calculated as a percentage value of the video&apos;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnailTimestampPct? ThumbnailTimestampPct { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnailTimestampPct ThumbnailTimestampPct { get; set; }
#endif
        /// <summary>A Cloudflare-generated unique identifier for a media item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_identifier? Uid { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_identifier Uid { get; set; }
#endif
        /// <summary>The date and time the media item was uploaded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_uploaded? Uploaded { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_uploaded Uploaded { get; set; }
#endif
        /// <summary>The date and time when the video upload URL is no longer valid for direct user uploads.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_oneTimeUploadExpiry? UploadExpiry { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_oneTimeUploadExpiry UploadExpiry { get; set; }
#endif
        /// <summary>The watermark property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarks? Watermark { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarks Watermark { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videos"/> and sets the default values.
        /// </summary>
        public Stream_videos()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videos"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videos CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_videos();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowedOrigins", n => { AllowedOrigins = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "created", n => { Created = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_created>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_created.CreateFromDiscriminatorValue); } },
                { "creator", n => { Creator = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_creator>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_creator.CreateFromDiscriminatorValue); } },
                { "duration", n => { Duration = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_duration>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_duration.CreateFromDiscriminatorValue); } },
                { "input", n => { Input = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_input>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_input.CreateFromDiscriminatorValue); } },
                { "liveInput", n => { LiveInput = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_liveInput>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_liveInput.CreateFromDiscriminatorValue); } },
                { "maxDurationSeconds", n => { MaxDurationSeconds = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_maxDurationSeconds>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_maxDurationSeconds.CreateFromDiscriminatorValue); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_metadata>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_metadata.CreateFromDiscriminatorValue); } },
                { "modified", n => { Modified = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_modified>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_modified.CreateFromDiscriminatorValue); } },
                { "playback", n => { Playback = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_playback>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_playback.CreateFromDiscriminatorValue); } },
                { "preview", n => { Preview = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_preview>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_preview.CreateFromDiscriminatorValue); } },
                { "readyToStream", n => { ReadyToStream = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStream>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStream.CreateFromDiscriminatorValue); } },
                { "readyToStreamAt", n => { ReadyToStreamAt = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStreamAt>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStreamAt.CreateFromDiscriminatorValue); } },
                { "requireSignedURLs", n => { RequireSignedURLs = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_requireSignedURLs>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_requireSignedURLs.CreateFromDiscriminatorValue); } },
                { "scheduledDeletion", n => { ScheduledDeletion = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_scheduledDeletion>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_scheduledDeletion.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_size>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_size.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_status>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_status.CreateFromDiscriminatorValue); } },
                { "thumbnail", n => { Thumbnail = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnail_url>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnail_url.CreateFromDiscriminatorValue); } },
                { "thumbnailTimestampPct", n => { ThumbnailTimestampPct = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnailTimestampPct>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnailTimestampPct.CreateFromDiscriminatorValue); } },
                { "uid", n => { Uid = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_identifier>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_identifier.CreateFromDiscriminatorValue); } },
                { "uploadExpiry", n => { UploadExpiry = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_oneTimeUploadExpiry>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_oneTimeUploadExpiry.CreateFromDiscriminatorValue); } },
                { "uploaded", n => { Uploaded = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_uploaded>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_uploaded.CreateFromDiscriminatorValue); } },
                { "watermark", n => { Watermark = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarks>(global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarks.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("allowedOrigins", AllowedOrigins);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_created>("created", Created);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_creator>("creator", Creator);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_duration>("duration", Duration);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_input>("input", Input);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_liveInput>("liveInput", LiveInput);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_maxDurationSeconds>("maxDurationSeconds", MaxDurationSeconds);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_metadata>("meta", Meta);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_modified>("modified", Modified);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_playback>("playback", Playback);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_preview>("preview", Preview);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStream>("readyToStream", ReadyToStream);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_readyToStreamAt>("readyToStreamAt", ReadyToStreamAt);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_requireSignedURLs>("requireSignedURLs", RequireSignedURLs);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_scheduledDeletion>("scheduledDeletion", ScheduledDeletion);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_size>("size", Size);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_media_status>("status", Status);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnail_url>("thumbnail", Thumbnail);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_thumbnailTimestampPct>("thumbnailTimestampPct", ThumbnailTimestampPct);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_identifier>("uid", Uid);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_uploaded>("uploaded", Uploaded);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_oneTimeUploadExpiry>("uploadExpiry", UploadExpiry);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Stream_watermarks>("watermark", Watermark);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
