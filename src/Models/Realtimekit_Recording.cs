// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Realtimekit_Recording : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If the audio_config is passed, the URL for downloading the audio recording is returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioDownloadUrl { get; private set; }
#nullable restore
#else
        public string AudioDownloadUrl { get; private set; }
#endif
        /// <summary>URL where the recording can be downloaded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DownloadUrl { get; private set; }
#nullable restore
#else
        public string DownloadUrl { get; private set; }
#endif
        /// <summary>Timestamp when the download URL expires.</summary>
        public DateTimeOffset? DownloadUrlExpiry { get; private set; }
        /// <summary>File size of the recording, in bytes.</summary>
        public double? FileSize { get; private set; }
        /// <summary>ID of the recording</summary>
        public Guid? Id { get; private set; }
        /// <summary>Timestamp when this recording was invoked.</summary>
        public DateTimeOffset? InvokedTime { get; set; }
        /// <summary>File name of the recording.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OutputFileName { get; set; }
#nullable restore
#else
        public string OutputFileName { get; set; }
#endif
        /// <summary>Total recording time in seconds.</summary>
        public int? RecordingDuration { get; set; }
        /// <summary>ID of the meeting session this recording is for.</summary>
        public Guid? SessionId { get; private set; }
        /// <summary>Timestamp when this recording actually started after being invoked. Usually a few seconds after `invoked_time`.</summary>
        public DateTimeOffset? StartedTime { get; set; }
        /// <summary>Current status of the recording.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording_status? Status { get; set; }
        /// <summary>Timestamp when this recording was stopped. Optional; is present only when the recording has actually been stopped.</summary>
        public DateTimeOffset? StoppedTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording"/> and sets the default values.
        /// </summary>
        public Realtimekit_Recording()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audio_download_url", n => { AudioDownloadUrl = n.GetStringValue(); } },
                { "download_url", n => { DownloadUrl = n.GetStringValue(); } },
                { "download_url_expiry", n => { DownloadUrlExpiry = n.GetDateTimeOffsetValue(); } },
                { "file_size", n => { FileSize = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "invoked_time", n => { InvokedTime = n.GetDateTimeOffsetValue(); } },
                { "output_file_name", n => { OutputFileName = n.GetStringValue(); } },
                { "recording_duration", n => { RecordingDuration = n.GetIntValue(); } },
                { "session_id", n => { SessionId = n.GetGuidValue(); } },
                { "started_time", n => { StartedTime = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording_status>(); } },
                { "stopped_time", n => { StoppedTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("invoked_time", InvokedTime);
            writer.WriteStringValue("output_file_name", OutputFileName);
            writer.WriteIntValue("recording_duration", RecordingDuration);
            writer.WriteDateTimeOffsetValue("started_time", StartedTime);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_Recording_status>("status", Status);
            writer.WriteDateTimeOffsetValue("stopped_time", StoppedTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
