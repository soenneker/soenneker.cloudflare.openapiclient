// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Workers_ai_post_run_cf_deepgram_flux : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>End-of-turn confidence required to fire an eager end-of-turn event. When set, enables EagerEndOfTurn and TurnResumed events. Valid Values 0.3 - 0.9.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EagerEotThreshold { get; set; }
#nullable restore
#else
        public string EagerEotThreshold { get; set; }
#endif
        /// <summary>Encoding of the audio stream. Currently only supports raw signed little-endian 16-bit PCM.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_encoding? Encoding { get; set; }
        /// <summary>End-of-turn confidence required to finish a turn. Valid Values 0.5 - 0.9.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EotThreshold { get; set; }
#nullable restore
#else
        public string EotThreshold { get; set; }
#endif
        /// <summary>A turn will be finished when this much time has passed after speech, regardless of EOT confidence.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EotTimeoutMs { get; set; }
#nullable restore
#else
        public string EotTimeoutMs { get; set; }
#endif
        /// <summary>Keyterm prompting can improve recognition of specialized terminology. Pass multiple keyterm query parameters to boost multiple keyterms.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Keyterm { get; set; }
#nullable restore
#else
        public string Keyterm { get; set; }
#endif
        /// <summary>Opts out requests from the Deepgram Model Improvement Program. Refer to Deepgram Docs for pricing impacts before setting this to true. https://dpgr.am/deepgram-mip</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_mip_opt_out? MipOptOut { get; set; }
        /// <summary>Sample rate of the audio stream in Hz.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SampleRate { get; set; }
#nullable restore
#else
        public string SampleRate { get; set; }
#endif
        /// <summary>Label your requests for the purpose of identification during usage reporting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tag { get; set; }
#nullable restore
#else
        public string Tag { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux"/> and sets the default values.
        /// </summary>
        public Workers_ai_post_run_cf_deepgram_flux()
        {
            AdditionalData = new Dictionary<string, object>();
            EotThreshold = "0.7";
            EotTimeoutMs = "5000";
            MipOptOut = global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_mip_opt_out.False;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "eager_eot_threshold", n => { EagerEotThreshold = n.GetStringValue(); } },
                { "encoding", n => { Encoding = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_encoding>(); } },
                { "eot_threshold", n => { EotThreshold = n.GetStringValue(); } },
                { "eot_timeout_ms", n => { EotTimeoutMs = n.GetStringValue(); } },
                { "keyterm", n => { Keyterm = n.GetStringValue(); } },
                { "mip_opt_out", n => { MipOptOut = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_mip_opt_out>(); } },
                { "sample_rate", n => { SampleRate = n.GetStringValue(); } },
                { "tag", n => { Tag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("eager_eot_threshold", EagerEotThreshold);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_encoding>("encoding", Encoding);
            writer.WriteStringValue("eot_threshold", EotThreshold);
            writer.WriteStringValue("eot_timeout_ms", EotTimeoutMs);
            writer.WriteStringValue("keyterm", Keyterm);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_deepgram_flux_mip_opt_out>("mip_opt_out", MipOptOut);
            writer.WriteStringValue("sample_rate", SampleRate);
            writer.WriteStringValue("tag", Tag);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
