// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Strict Transport Security.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_security_header_value_strict_transport_security : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether or not strict transport security is enabled.</summary>
        public bool? Enabled { get; set; }
        /// <summary>Include all subdomains for strict transport security.</summary>
        public bool? IncludeSubdomains { get; set; }
        /// <summary>Max age in seconds of the strict transport security.</summary>
        public double? MaxAge { get; set; }
        /// <summary>Whether or not to include &apos;X-Content-Type-Options: nosniff&apos; header.</summary>
        public bool? Nosniff { get; set; }
        /// <summary>Enable automatic preload of the HSTS configuration.</summary>
        public bool? Preload { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value_strict_transport_security"/> and sets the default values.
        /// </summary>
        public Zones_security_header_value_strict_transport_security()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value_strict_transport_security"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value_strict_transport_security CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value_strict_transport_security();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "include_subdomains", n => { IncludeSubdomains = n.GetBoolValue(); } },
                { "max_age", n => { MaxAge = n.GetDoubleValue(); } },
                { "nosniff", n => { Nosniff = n.GetBoolValue(); } },
                { "preload", n => { Preload = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteBoolValue("include_subdomains", IncludeSubdomains);
            writer.WriteDoubleValue("max_age", MaxAge);
            writer.WriteBoolValue("nosniff", Nosniff);
            writer.WriteBoolValue("preload", Preload);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
