// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tls_certificates_and_hostnames_custom_certificate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_bundle_method? BundleMethod { get; set; }
        /// <summary>When the certificate from the authority expires.</summary>
        public DateTimeOffset? ExpiresOn { get; set; }
        /// <summary>Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_geo_restrictions? GeoRestrictions { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_geo_restrictions GeoRestrictions { get; set; }
#endif
        /// <summary>The hosts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Hosts { get; set; }
#nullable restore
#else
        public List<string> Hosts { get; set; }
#endif
        /// <summary>Identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The certificate authority that issued the certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The keyless_server property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_keyless_certificate? KeylessServer { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_keyless_certificate KeylessServer { get; set; }
#endif
        /// <summary>When the certificate was last modified.</summary>
        public DateTimeOffset? ModifiedOn { get; set; }
        /// <summary>Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) can be chosen, such as &apos;country: IN&apos;, as well as &apos;region: EU&apos; which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Policy { get; set; }
#nullable restore
#else
        public string Policy { get; set; }
#endif
        /// <summary>The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping &apos;legacy_custom&apos; certificates, but &apos;legacy_custom&apos; certificates will always supercede &apos;sni_custom&apos; certificates.</summary>
        public double? Priority { get; set; }
        /// <summary>The type of hash used for the certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Signature { get; set; }
#nullable restore
#else
        public string Signature { get; set; }
#endif
        /// <summary>Status of the zone&apos;s custom SSL.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_status? Status { get; private set; }
        /// <summary>When the certificate was uploaded to Cloudflare.</summary>
        public DateTimeOffset? UploadedOn { get; set; }
        /// <summary>Identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneId { get; set; }
#nullable restore
#else
        public string ZoneId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_custom_certificate"/> and sets the default values.
        /// </summary>
        public Tls_certificates_and_hostnames_custom_certificate()
        {
            AdditionalData = new Dictionary<string, object>();
            BundleMethod = global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_bundle_method.Ubiquitous;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_custom_certificate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_custom_certificate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_custom_certificate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bundle_method", n => { BundleMethod = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_bundle_method>(); } },
                { "expires_on", n => { ExpiresOn = n.GetDateTimeOffsetValue(); } },
                { "geo_restrictions", n => { GeoRestrictions = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_geo_restrictions>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_geo_restrictions.CreateFromDiscriminatorValue); } },
                { "hosts", n => { Hosts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "keyless_server", n => { KeylessServer = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_keyless_certificate>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_keyless_certificate.CreateFromDiscriminatorValue); } },
                { "modified_on", n => { ModifiedOn = n.GetDateTimeOffsetValue(); } },
                { "policy", n => { Policy = n.GetStringValue(); } },
                { "priority", n => { Priority = n.GetDoubleValue(); } },
                { "signature", n => { Signature = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_status>(); } },
                { "uploaded_on", n => { UploadedOn = n.GetDateTimeOffsetValue(); } },
                { "zone_id", n => { ZoneId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_bundle_method>("bundle_method", BundleMethod);
            writer.WriteDateTimeOffsetValue("expires_on", ExpiresOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_geo_restrictions>("geo_restrictions", GeoRestrictions);
            writer.WriteCollectionOfPrimitiveValues<string>("hosts", Hosts);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_keyless_certificate>("keyless_server", KeylessServer);
            writer.WriteDateTimeOffsetValue("modified_on", ModifiedOn);
            writer.WriteStringValue("policy", Policy);
            writer.WriteDoubleValue("priority", Priority);
            writer.WriteStringValue("signature", Signature);
            writer.WriteDateTimeOffsetValue("uploaded_on", UploadedOn);
            writer.WriteStringValue("zone_id", ZoneId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
