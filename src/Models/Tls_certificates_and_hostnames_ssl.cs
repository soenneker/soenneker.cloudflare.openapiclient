// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// SSL properties for the custom hostname.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tls_certificates_and_hostnames_ssl : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_bundle_method? BundleMethod { get; set; }
        /// <summary>The Certificate Authority that will issue the certificate</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_authority? CertificateAuthority { get; set; }
        /// <summary>If a custom uploaded certificate is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomCertificate { get; set; }
#nullable restore
#else
        public string CustomCertificate { get; set; }
#endif
        /// <summary>The identifier for the Custom CSR that was used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomCsrId { get; set; }
#nullable restore
#else
        public string CustomCsrId { get; set; }
#endif
        /// <summary>The key for a custom uploaded certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomKey { get; set; }
#nullable restore
#else
        public string CustomKey { get; set; }
#endif
        /// <summary>The time the custom certificate expires on.</summary>
        public DateTimeOffset? ExpiresOn { get; set; }
        /// <summary>A list of Hostnames on a custom uploaded certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Hosts { get; set; }
#nullable restore
#else
        public List<string> Hosts { get; set; }
#endif
        /// <summary>Custom hostname SSL identifier tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The issuer on a custom uploaded certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>Domain control validation (DCV) method used for this hostname.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_method? Method { get; set; }
        /// <summary>The serial number on a custom uploaded certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>SSL specific settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_sslsettings? Settings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_sslsettings Settings { get; set; }
#endif
        /// <summary>The signature on a custom uploaded certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Signature { get; set; }
#nullable restore
#else
        public string Signature { get; set; }
#endif
        /// <summary>Status of the hostname&apos;s SSL certificates.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_status? Status { get; private set; }
        /// <summary>Union discriminator</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The time the custom certificate was uploaded.</summary>
        public DateTimeOffset? UploadedOn { get; set; }
        /// <summary>Domain validation errors that have been received by the certificate authority (CA).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_validation_errors>? ValidationErrors { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_validation_errors> ValidationErrors { get; set; }
#endif
        /// <summary>The validation_records property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_validation_record>? ValidationRecords { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_validation_record> ValidationRecords { get; set; }
#endif
        /// <summary>Indicates whether the certificate covers a wildcard.</summary>
        public bool? Wildcard { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl"/> and sets the default values.
        /// </summary>
        public Tls_certificates_and_hostnames_ssl()
        {
            AdditionalData = new Dictionary<string, object>();
            BundleMethod = global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_bundle_method.Ubiquitous;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bundle_method", n => { BundleMethod = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_bundle_method>(); } },
                { "certificate_authority", n => { CertificateAuthority = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_authority>(); } },
                { "custom_certificate", n => { CustomCertificate = n.GetStringValue(); } },
                { "custom_csr_id", n => { CustomCsrId = n.GetStringValue(); } },
                { "custom_key", n => { CustomKey = n.GetStringValue(); } },
                { "expires_on", n => { ExpiresOn = n.GetDateTimeOffsetValue(); } },
                { "hosts", n => { Hosts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "method", n => { Method = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_method>(); } },
                { "serial_number", n => { SerialNumber = n.GetStringValue(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_sslsettings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_sslsettings.CreateFromDiscriminatorValue); } },
                { "signature", n => { Signature = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_status>(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "uploaded_on", n => { UploadedOn = n.GetDateTimeOffsetValue(); } },
                { "validation_errors", n => { ValidationErrors = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_validation_errors>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_validation_errors.CreateFromDiscriminatorValue)?.AsList(); } },
                { "validation_records", n => { ValidationRecords = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_validation_record>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_validation_record.CreateFromDiscriminatorValue)?.AsList(); } },
                { "wildcard", n => { Wildcard = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_bundle_method>("bundle_method", BundleMethod);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_authority>("certificate_authority", CertificateAuthority);
            writer.WriteStringValue("custom_certificate", CustomCertificate);
            writer.WriteStringValue("custom_csr_id", CustomCsrId);
            writer.WriteStringValue("custom_key", CustomKey);
            writer.WriteDateTimeOffsetValue("expires_on", ExpiresOn);
            writer.WriteCollectionOfPrimitiveValues<string>("hosts", Hosts);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_method>("method", Method);
            writer.WriteStringValue("serial_number", SerialNumber);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_sslsettings>("settings", Settings);
            writer.WriteStringValue("signature", Signature);
            writer.WriteStringValue("type", Type);
            writer.WriteDateTimeOffsetValue("uploaded_on", UploadedOn);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_ssl_validation_errors>("validation_errors", ValidationErrors);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_validation_record>("validation_records", ValidationRecords);
            writer.WriteBoolValue("wildcard", Wildcard);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
