// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_setting_value : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper? Zones0rttValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper Zones0rttValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper? ZonesAdvancedDdosValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper ZonesAdvancedDdosValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper? ZonesAlwaysOnlineValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper ZonesAlwaysOnlineValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper? ZonesAlwaysUseHttpsValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper ZonesAlwaysUseHttpsValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper? ZonesAutomaticHttpsRewritesValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper ZonesAutomaticHttpsRewritesValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization? ZonesAutomaticPlatformOptimization { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization ZonesAutomaticPlatformOptimization { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper? ZonesBrotliValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper ZonesBrotliValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper? ZonesBrowserCheckValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper ZonesBrowserCheckValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper? ZonesCacheLevelValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper ZonesCacheLevelValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value? ZonesCacheRulesAegisValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value ZonesCacheRulesAegisValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper? ZonesCacheRulesOriginMaxHttpVersionValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper ZonesCacheRulesOriginMaxHttpVersionValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper? ZonesChallengeTtlValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper ZonesChallengeTtlValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper? ZonesChinaNetworkEnabledValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper ZonesChinaNetworkEnabledValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper? ZonesCiphersValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper ZonesCiphersValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper? ZonesCnameFlatteningValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper ZonesCnameFlatteningValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper? ZonesDevelopmentModeValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper ZonesDevelopmentModeValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper? ZonesEarlyHintsValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper ZonesEarlyHintsValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper? ZonesEdgeCacheTtlValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper ZonesEdgeCacheTtlValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper? ZonesEmailObfuscationValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper ZonesEmailObfuscationValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper? ZonesH2PrioritizationValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper ZonesH2PrioritizationValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper? ZonesHotlinkProtectionValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper ZonesHotlinkProtectionValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper? ZonesHttp2ValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper ZonesHttp2ValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper? ZonesHttp3ValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper ZonesHttp3ValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper? ZonesImageResizingValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper ZonesImageResizingValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper? ZonesIpGeolocationValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper ZonesIpGeolocationValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper? ZonesIpv6ValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper ZonesIpv6ValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper? ZonesMaxUploadValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper ZonesMaxUploadValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper? ZonesMinTlsVersionValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper ZonesMinTlsVersionValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper? ZonesMirageValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper ZonesMirageValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value? ZonesNelValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value ZonesNelValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper? ZonesOpportunisticEncryptionValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper ZonesOpportunisticEncryptionValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper? ZonesOpportunisticOnionValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper ZonesOpportunisticOnionValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper? ZonesOrangeToOrangeValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper ZonesOrangeToOrangeValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper? ZonesOriginErrorPagePassThruValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper ZonesOriginErrorPagePassThruValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper? ZonesPolishValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper ZonesPolishValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper? ZonesPrefetchPreloadValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper ZonesPrefetchPreloadValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper? ZonesPrivacyPassValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper ZonesPrivacyPassValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper? ZonesPseudoIpv4ValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper ZonesPseudoIpv4ValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper? ZonesReplaceInsecureJsValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper ZonesReplaceInsecureJsValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper? ZonesResponseBufferingValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper ZonesResponseBufferingValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper? ZonesRocketLoaderValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper ZonesRocketLoaderValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value? ZonesSecurityHeaderValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value ZonesSecurityHeaderValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper? ZonesSecurityLevelValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper ZonesSecurityLevelValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper? ZonesServerSideExcludeValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper ZonesServerSideExcludeValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34? ZonesSettingValueBranch34 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34 ZonesSettingValueBranch34 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39? ZonesSettingValueBranch39 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39 ZonesSettingValueBranch39 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8? ZonesSettingValueBranch8 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8 ZonesSettingValueBranch8 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper? ZonesSha1SupportValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper ZonesSha1SupportValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper? ZonesSortQueryStringForCacheValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper ZonesSortQueryStringForCacheValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper? ZonesSslValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper ZonesSslValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper? ZonesTls12OnlyValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper ZonesTls12OnlyValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper? ZonesTls13ValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper ZonesTls13ValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper? ZonesTlsClientAuthValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper ZonesTlsClientAuthValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper? ZonesTrueClientIpHeaderValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper ZonesTrueClientIpHeaderValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper? ZonesWafValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper ZonesWafValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper? ZonesWebpValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper ZonesWebpValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper? ZonesWebsocketsValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper ZonesWebsocketsValueWrapper { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
            var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value();
            if("zones_0rtt_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.Zones0rttValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper();
            }
            else if("zones_advanced_ddos_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAdvancedDdosValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper();
            }
            else if("zones_always_online_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAlwaysOnlineValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper();
            }
            else if("zones_always_use_https_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAlwaysUseHttpsValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper();
            }
            else if("zones_automatic_https_rewrites_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAutomaticHttpsRewritesValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper();
            }
            else if("zones_automatic_platform_optimization".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAutomaticPlatformOptimization = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization();
            }
            else if("zones_brotli_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesBrotliValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper();
            }
            else if("zones_browser_check_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesBrowserCheckValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper();
            }
            else if("zones_cache_level_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheLevelValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper();
            }
            else if("zones_cache_rules_aegis_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheRulesAegisValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value();
            }
            else if("zones_cache_rules_origin_max_http_version_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheRulesOriginMaxHttpVersionValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper();
            }
            else if("zones_challenge_ttl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesChallengeTtlValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper();
            }
            else if("zones_china_network_enabled_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesChinaNetworkEnabledValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper();
            }
            else if("zones_ciphers_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCiphersValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper();
            }
            else if("zones_cname_flattening_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCnameFlatteningValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper();
            }
            else if("zones_development_mode_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesDevelopmentModeValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper();
            }
            else if("zones_early_hints_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEarlyHintsValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper();
            }
            else if("zones_edge_cache_ttl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEdgeCacheTtlValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper();
            }
            else if("zones_email_obfuscation_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEmailObfuscationValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper();
            }
            else if("zones_h2_prioritization_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesH2PrioritizationValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper();
            }
            else if("zones_hotlink_protection_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHotlinkProtectionValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper();
            }
            else if("zones_http2_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHttp2ValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper();
            }
            else if("zones_http3_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHttp3ValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper();
            }
            else if("zones_image_resizing_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesImageResizingValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper();
            }
            else if("zones_ip_geolocation_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesIpGeolocationValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper();
            }
            else if("zones_ipv6_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesIpv6ValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper();
            }
            else if("zones_max_upload_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMaxUploadValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper();
            }
            else if("zones_min_tls_version_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMinTlsVersionValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper();
            }
            else if("zones_mirage_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMirageValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper();
            }
            else if("zones_nel_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesNelValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value();
            }
            else if("zones_opportunistic_encryption_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOpportunisticEncryptionValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper();
            }
            else if("zones_opportunistic_onion_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOpportunisticOnionValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper();
            }
            else if("zones_orange_to_orange_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOrangeToOrangeValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper();
            }
            else if("zones_origin_error_page_pass_thru_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOriginErrorPagePassThruValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper();
            }
            else if("zones_polish_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPolishValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper();
            }
            else if("zones_prefetch_preload_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPrefetchPreloadValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper();
            }
            else if("zones_privacy_pass_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPrivacyPassValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper();
            }
            else if("zones_pseudo_ipv4_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPseudoIpv4ValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper();
            }
            else if("zones_replace_insecure_js_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesReplaceInsecureJsValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper();
            }
            else if("zones_response_buffering_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesResponseBufferingValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper();
            }
            else if("zones_rocket_loader_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesRocketLoaderValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper();
            }
            else if("zones_security_header_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSecurityHeaderValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value();
            }
            else if("zones_security_level_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSecurityLevelValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper();
            }
            else if("zones_server_side_exclude_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesServerSideExcludeValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper();
            }
            else if("zones_setting_value_34".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch34 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34();
            }
            else if("zones_setting_value_39".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch39 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39();
            }
            else if("zones_setting_value_8".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch8 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8();
            }
            else if("zones_sha1_support_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSha1SupportValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper();
            }
            else if("zones_sort_query_string_for_cache_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSortQueryStringForCacheValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper();
            }
            else if("zones_ssl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSslValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper();
            }
            else if("zones_tls_1_2_only_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTls12OnlyValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper();
            }
            else if("zones_tls_1_3_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTls13ValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper();
            }
            else if("zones_tls_client_auth_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTlsClientAuthValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper();
            }
            else if("zones_true_client_ip_header_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTrueClientIpHeaderValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper();
            }
            else if("zones_waf_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWafValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper();
            }
            else if("zones_webp_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWebpValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper();
            }
            else if("zones_websockets_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWebsocketsValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(Zones0rttValueWrapper != null)
            {
                return Zones0rttValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesAdvancedDdosValueWrapper != null)
            {
                return ZonesAdvancedDdosValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesAlwaysOnlineValueWrapper != null)
            {
                return ZonesAlwaysOnlineValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesAlwaysUseHttpsValueWrapper != null)
            {
                return ZonesAlwaysUseHttpsValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesAutomaticHttpsRewritesValueWrapper != null)
            {
                return ZonesAutomaticHttpsRewritesValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesAutomaticPlatformOptimization != null)
            {
                return ZonesAutomaticPlatformOptimization.GetFieldDeserializers();
            }
            else if(ZonesBrotliValueWrapper != null)
            {
                return ZonesBrotliValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesBrowserCheckValueWrapper != null)
            {
                return ZonesBrowserCheckValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesCacheLevelValueWrapper != null)
            {
                return ZonesCacheLevelValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                return ZonesCacheRulesAegisValue.GetFieldDeserializers();
            }
            else if(ZonesCacheRulesOriginMaxHttpVersionValueWrapper != null)
            {
                return ZonesCacheRulesOriginMaxHttpVersionValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesChallengeTtlValueWrapper != null)
            {
                return ZonesChallengeTtlValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesChinaNetworkEnabledValueWrapper != null)
            {
                return ZonesChinaNetworkEnabledValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesCiphersValueWrapper != null)
            {
                return ZonesCiphersValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesCnameFlatteningValueWrapper != null)
            {
                return ZonesCnameFlatteningValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesDevelopmentModeValueWrapper != null)
            {
                return ZonesDevelopmentModeValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesEarlyHintsValueWrapper != null)
            {
                return ZonesEarlyHintsValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesEdgeCacheTtlValueWrapper != null)
            {
                return ZonesEdgeCacheTtlValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesEmailObfuscationValueWrapper != null)
            {
                return ZonesEmailObfuscationValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesH2PrioritizationValueWrapper != null)
            {
                return ZonesH2PrioritizationValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesHotlinkProtectionValueWrapper != null)
            {
                return ZonesHotlinkProtectionValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesHttp2ValueWrapper != null)
            {
                return ZonesHttp2ValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesHttp3ValueWrapper != null)
            {
                return ZonesHttp3ValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesImageResizingValueWrapper != null)
            {
                return ZonesImageResizingValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesIpGeolocationValueWrapper != null)
            {
                return ZonesIpGeolocationValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesIpv6ValueWrapper != null)
            {
                return ZonesIpv6ValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesMaxUploadValueWrapper != null)
            {
                return ZonesMaxUploadValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesMinTlsVersionValueWrapper != null)
            {
                return ZonesMinTlsVersionValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesMirageValueWrapper != null)
            {
                return ZonesMirageValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesNelValue != null)
            {
                return ZonesNelValue.GetFieldDeserializers();
            }
            else if(ZonesOpportunisticEncryptionValueWrapper != null)
            {
                return ZonesOpportunisticEncryptionValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesOpportunisticOnionValueWrapper != null)
            {
                return ZonesOpportunisticOnionValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesOrangeToOrangeValueWrapper != null)
            {
                return ZonesOrangeToOrangeValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesOriginErrorPagePassThruValueWrapper != null)
            {
                return ZonesOriginErrorPagePassThruValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesPolishValueWrapper != null)
            {
                return ZonesPolishValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesPrefetchPreloadValueWrapper != null)
            {
                return ZonesPrefetchPreloadValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesPrivacyPassValueWrapper != null)
            {
                return ZonesPrivacyPassValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesPseudoIpv4ValueWrapper != null)
            {
                return ZonesPseudoIpv4ValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesReplaceInsecureJsValueWrapper != null)
            {
                return ZonesReplaceInsecureJsValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesResponseBufferingValueWrapper != null)
            {
                return ZonesResponseBufferingValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesRocketLoaderValueWrapper != null)
            {
                return ZonesRocketLoaderValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                return ZonesSecurityHeaderValue.GetFieldDeserializers();
            }
            else if(ZonesSecurityLevelValueWrapper != null)
            {
                return ZonesSecurityLevelValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesServerSideExcludeValueWrapper != null)
            {
                return ZonesServerSideExcludeValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch34 != null)
            {
                return ZonesSettingValueBranch34.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch39 != null)
            {
                return ZonesSettingValueBranch39.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch8 != null)
            {
                return ZonesSettingValueBranch8.GetFieldDeserializers();
            }
            else if(ZonesSha1SupportValueWrapper != null)
            {
                return ZonesSha1SupportValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesSortQueryStringForCacheValueWrapper != null)
            {
                return ZonesSortQueryStringForCacheValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesSslValueWrapper != null)
            {
                return ZonesSslValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesTls12OnlyValueWrapper != null)
            {
                return ZonesTls12OnlyValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesTls13ValueWrapper != null)
            {
                return ZonesTls13ValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesTlsClientAuthValueWrapper != null)
            {
                return ZonesTlsClientAuthValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesTrueClientIpHeaderValueWrapper != null)
            {
                return ZonesTrueClientIpHeaderValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesWafValueWrapper != null)
            {
                return ZonesWafValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesWebpValueWrapper != null)
            {
                return ZonesWebpValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesWebsocketsValueWrapper != null)
            {
                return ZonesWebsocketsValueWrapper.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            if(Zones0rttValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_Wrapper>(null, Zones0rttValueWrapper);
            }
            else if(ZonesAdvancedDdosValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_Wrapper>(null, ZonesAdvancedDdosValueWrapper);
            }
            else if(ZonesAlwaysOnlineValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_Wrapper>(null, ZonesAlwaysOnlineValueWrapper);
            }
            else if(ZonesAlwaysUseHttpsValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_Wrapper>(null, ZonesAlwaysUseHttpsValueWrapper);
            }
            else if(ZonesAutomaticHttpsRewritesValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_Wrapper>(null, ZonesAutomaticHttpsRewritesValueWrapper);
            }
            else if(ZonesAutomaticPlatformOptimization != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization>(null, ZonesAutomaticPlatformOptimization);
            }
            else if(ZonesBrotliValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_Wrapper>(null, ZonesBrotliValueWrapper);
            }
            else if(ZonesBrowserCheckValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_Wrapper>(null, ZonesBrowserCheckValueWrapper);
            }
            else if(ZonesCacheLevelValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_Wrapper>(null, ZonesCacheLevelValueWrapper);
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis_value>(null, ZonesCacheRulesAegisValue);
            }
            else if(ZonesCacheRulesOriginMaxHttpVersionValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version_value_Wrapper>(null, ZonesCacheRulesOriginMaxHttpVersionValueWrapper);
            }
            else if(ZonesChallengeTtlValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_Wrapper>(null, ZonesChallengeTtlValueWrapper);
            }
            else if(ZonesChinaNetworkEnabledValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_Wrapper>(null, ZonesChinaNetworkEnabledValueWrapper);
            }
            else if(ZonesCiphersValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper>(null, ZonesCiphersValueWrapper);
            }
            else if(ZonesCnameFlatteningValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_Wrapper>(null, ZonesCnameFlatteningValueWrapper);
            }
            else if(ZonesDevelopmentModeValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_Wrapper>(null, ZonesDevelopmentModeValueWrapper);
            }
            else if(ZonesEarlyHintsValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_Wrapper>(null, ZonesEarlyHintsValueWrapper);
            }
            else if(ZonesEdgeCacheTtlValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_Wrapper>(null, ZonesEdgeCacheTtlValueWrapper);
            }
            else if(ZonesEmailObfuscationValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_Wrapper>(null, ZonesEmailObfuscationValueWrapper);
            }
            else if(ZonesH2PrioritizationValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_Wrapper>(null, ZonesH2PrioritizationValueWrapper);
            }
            else if(ZonesHotlinkProtectionValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_Wrapper>(null, ZonesHotlinkProtectionValueWrapper);
            }
            else if(ZonesHttp2ValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_Wrapper>(null, ZonesHttp2ValueWrapper);
            }
            else if(ZonesHttp3ValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_Wrapper>(null, ZonesHttp3ValueWrapper);
            }
            else if(ZonesImageResizingValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_Wrapper>(null, ZonesImageResizingValueWrapper);
            }
            else if(ZonesIpGeolocationValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_Wrapper>(null, ZonesIpGeolocationValueWrapper);
            }
            else if(ZonesIpv6ValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_Wrapper>(null, ZonesIpv6ValueWrapper);
            }
            else if(ZonesMaxUploadValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_Wrapper>(null, ZonesMaxUploadValueWrapper);
            }
            else if(ZonesMinTlsVersionValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_Wrapper>(null, ZonesMinTlsVersionValueWrapper);
            }
            else if(ZonesMirageValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_Wrapper>(null, ZonesMirageValueWrapper);
            }
            else if(ZonesNelValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value>(null, ZonesNelValue);
            }
            else if(ZonesOpportunisticEncryptionValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_Wrapper>(null, ZonesOpportunisticEncryptionValueWrapper);
            }
            else if(ZonesOpportunisticOnionValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_Wrapper>(null, ZonesOpportunisticOnionValueWrapper);
            }
            else if(ZonesOrangeToOrangeValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_Wrapper>(null, ZonesOrangeToOrangeValueWrapper);
            }
            else if(ZonesOriginErrorPagePassThruValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_Wrapper>(null, ZonesOriginErrorPagePassThruValueWrapper);
            }
            else if(ZonesPolishValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_Wrapper>(null, ZonesPolishValueWrapper);
            }
            else if(ZonesPrefetchPreloadValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_Wrapper>(null, ZonesPrefetchPreloadValueWrapper);
            }
            else if(ZonesPrivacyPassValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_Wrapper>(null, ZonesPrivacyPassValueWrapper);
            }
            else if(ZonesPseudoIpv4ValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_Wrapper>(null, ZonesPseudoIpv4ValueWrapper);
            }
            else if(ZonesReplaceInsecureJsValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_Wrapper>(null, ZonesReplaceInsecureJsValueWrapper);
            }
            else if(ZonesResponseBufferingValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_Wrapper>(null, ZonesResponseBufferingValueWrapper);
            }
            else if(ZonesRocketLoaderValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_Wrapper>(null, ZonesRocketLoaderValueWrapper);
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value>(null, ZonesSecurityHeaderValue);
            }
            else if(ZonesSecurityLevelValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_Wrapper>(null, ZonesSecurityLevelValueWrapper);
            }
            else if(ZonesServerSideExcludeValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_Wrapper>(null, ZonesServerSideExcludeValueWrapper);
            }
            else if(ZonesSettingValueBranch34 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34>(null, ZonesSettingValueBranch34);
            }
            else if(ZonesSettingValueBranch39 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39>(null, ZonesSettingValueBranch39);
            }
            else if(ZonesSettingValueBranch8 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8>(null, ZonesSettingValueBranch8);
            }
            else if(ZonesSha1SupportValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_Wrapper>(null, ZonesSha1SupportValueWrapper);
            }
            else if(ZonesSortQueryStringForCacheValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_Wrapper>(null, ZonesSortQueryStringForCacheValueWrapper);
            }
            else if(ZonesSslValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_Wrapper>(null, ZonesSslValueWrapper);
            }
            else if(ZonesTls12OnlyValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_Wrapper>(null, ZonesTls12OnlyValueWrapper);
            }
            else if(ZonesTls13ValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_Wrapper>(null, ZonesTls13ValueWrapper);
            }
            else if(ZonesTlsClientAuthValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_Wrapper>(null, ZonesTlsClientAuthValueWrapper);
            }
            else if(ZonesTrueClientIpHeaderValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_Wrapper>(null, ZonesTrueClientIpHeaderValueWrapper);
            }
            else if(ZonesWafValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_Wrapper>(null, ZonesWafValueWrapper);
            }
            else if(ZonesWebpValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_Wrapper>(null, ZonesWebpValueWrapper);
            }
            else if(ZonesWebsocketsValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_Wrapper>(null, ZonesWebsocketsValueWrapper);
            }
        }
    }
}
#pragma warning restore CS0618
