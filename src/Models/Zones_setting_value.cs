// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_setting_value : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting? Zones0rttValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting Zones0rttValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting? ZonesAdvancedDdosValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting ZonesAdvancedDdosValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting? ZonesAlwaysOnlineValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting ZonesAlwaysOnlineValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting? ZonesAlwaysUseHttpsValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting ZonesAlwaysUseHttpsValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting? ZonesAutomaticHttpsRewritesValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting ZonesAutomaticHttpsRewritesValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization? ZonesAutomaticPlatformOptimization { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization ZonesAutomaticPlatformOptimization { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting? ZonesBrotliValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting ZonesBrotliValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting? ZonesBrowserCheckValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting ZonesBrowserCheckValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting? ZonesCacheLevelValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting ZonesCacheLevelValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value? ZonesCacheRulesAegisValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value ZonesCacheRulesAegisValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting? ZonesCacheRulesOriginMaxHttpVersionValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting ZonesCacheRulesOriginMaxHttpVersionValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting? ZonesChallengeTtlValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting ZonesChallengeTtlValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting? ZonesChinaNetworkEnabledValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting ZonesChinaNetworkEnabledValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper? ZonesCiphersValueWrapper { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper ZonesCiphersValueWrapper { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting? ZonesCnameFlatteningValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting ZonesCnameFlatteningValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting? ZonesDevelopmentModeValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting ZonesDevelopmentModeValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting? ZonesEarlyHintsValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting ZonesEarlyHintsValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting? ZonesEdgeCacheTtlValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting ZonesEdgeCacheTtlValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting? ZonesEmailObfuscationValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting ZonesEmailObfuscationValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting? ZonesH2PrioritizationValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting ZonesH2PrioritizationValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting? ZonesHotlinkProtectionValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting ZonesHotlinkProtectionValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting? ZonesHttp2ValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting ZonesHttp2ValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting? ZonesHttp3ValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting ZonesHttp3ValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting? ZonesImageResizingValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting ZonesImageResizingValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting? ZonesIpGeolocationValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting ZonesIpGeolocationValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting? ZonesIpv6ValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting ZonesIpv6ValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting? ZonesMaxUploadValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting ZonesMaxUploadValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting? ZonesMinTlsVersionValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting ZonesMinTlsVersionValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting? ZonesMirageValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting ZonesMirageValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value? ZonesNelValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value ZonesNelValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting? ZonesOpportunisticEncryptionValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting ZonesOpportunisticEncryptionValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting? ZonesOpportunisticOnionValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting ZonesOpportunisticOnionValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting? ZonesOrangeToOrangeValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting ZonesOrangeToOrangeValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting? ZonesOriginErrorPagePassThruValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting ZonesOriginErrorPagePassThruValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting? ZonesPolishValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting ZonesPolishValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting? ZonesPrefetchPreloadValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting ZonesPrefetchPreloadValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting? ZonesPrivacyPassValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting ZonesPrivacyPassValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting? ZonesPseudoIpv4ValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting ZonesPseudoIpv4ValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting? ZonesReplaceInsecureJsValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting ZonesReplaceInsecureJsValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting? ZonesResponseBufferingValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting ZonesResponseBufferingValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting? ZonesRocketLoaderValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting ZonesRocketLoaderValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value? ZonesSecurityHeaderValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value ZonesSecurityHeaderValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting? ZonesSecurityLevelValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting ZonesSecurityLevelValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting? ZonesServerSideExcludeValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting ZonesServerSideExcludeValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34? ZonesSettingValueBranch34 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34 ZonesSettingValueBranch34 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39? ZonesSettingValueBranch39 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39 ZonesSettingValueBranch39 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8? ZonesSettingValueBranch8 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8 ZonesSettingValueBranch8 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting? ZonesSha1SupportValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting ZonesSha1SupportValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting? ZonesSortQueryStringForCacheValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting ZonesSortQueryStringForCacheValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting? ZonesSslValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting ZonesSslValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting? ZonesTls12OnlyValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting ZonesTls12OnlyValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting? ZonesTls13ValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting ZonesTls13ValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting? ZonesTlsClientAuthValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting ZonesTlsClientAuthValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting? ZonesTrueClientIpHeaderValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting ZonesTrueClientIpHeaderValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting? ZonesWafValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting ZonesWafValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting? ZonesWebpValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting ZonesWebpValueSetting { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting? ZonesWebsocketsValueSetting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting ZonesWebsocketsValueSetting { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
            var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value();
            if("zones_0rtt_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.Zones0rttValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting();
            }
            else if("zones_advanced_ddos_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAdvancedDdosValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting();
            }
            else if("zones_always_online_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAlwaysOnlineValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting();
            }
            else if("zones_always_use_https_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAlwaysUseHttpsValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting();
            }
            else if("zones_automatic_https_rewrites_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAutomaticHttpsRewritesValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting();
            }
            else if("zones_automatic_platform_optimization".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAutomaticPlatformOptimization = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization();
            }
            else if("zones_brotli_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesBrotliValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting();
            }
            else if("zones_browser_check_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesBrowserCheckValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting();
            }
            else if("zones_cache_level_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheLevelValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting();
            }
            else if("zones_cache-rules_aegis_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheRulesAegisValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value();
            }
            else if("zones_cache-rules_origin_max_http_version_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheRulesOriginMaxHttpVersionValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting();
            }
            else if("zones_challenge_ttl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesChallengeTtlValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting();
            }
            else if("zones_china_network_enabled_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesChinaNetworkEnabledValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting();
            }
            else if("zones_ciphers_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCiphersValueWrapper = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper();
            }
            else if("zones_cname_flattening_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCnameFlatteningValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting();
            }
            else if("zones_development_mode_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesDevelopmentModeValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting();
            }
            else if("zones_early_hints_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEarlyHintsValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting();
            }
            else if("zones_edge_cache_ttl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEdgeCacheTtlValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting();
            }
            else if("zones_email_obfuscation_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEmailObfuscationValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting();
            }
            else if("zones_h2_prioritization_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesH2PrioritizationValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting();
            }
            else if("zones_hotlink_protection_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHotlinkProtectionValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting();
            }
            else if("zones_http2_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHttp2ValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting();
            }
            else if("zones_http3_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesHttp3ValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting();
            }
            else if("zones_image_resizing_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesImageResizingValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting();
            }
            else if("zones_ip_geolocation_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesIpGeolocationValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting();
            }
            else if("zones_ipv6_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesIpv6ValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting();
            }
            else if("zones_max_upload_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMaxUploadValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting();
            }
            else if("zones_min_tls_version_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMinTlsVersionValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting();
            }
            else if("zones_mirage_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMirageValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting();
            }
            else if("zones_nel_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesNelValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value();
            }
            else if("zones_opportunistic_encryption_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOpportunisticEncryptionValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting();
            }
            else if("zones_opportunistic_onion_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOpportunisticOnionValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting();
            }
            else if("zones_orange_to_orange_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOrangeToOrangeValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting();
            }
            else if("zones_origin_error_page_pass_thru_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesOriginErrorPagePassThruValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting();
            }
            else if("zones_polish_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPolishValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting();
            }
            else if("zones_prefetch_preload_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPrefetchPreloadValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting();
            }
            else if("zones_privacy_pass_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPrivacyPassValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting();
            }
            else if("zones_pseudo_ipv4_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesPseudoIpv4ValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting();
            }
            else if("zones_replace_insecure_js_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesReplaceInsecureJsValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting();
            }
            else if("zones_response_buffering_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesResponseBufferingValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting();
            }
            else if("zones_rocket_loader_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesRocketLoaderValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting();
            }
            else if("zones_security_header_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSecurityHeaderValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value();
            }
            else if("zones_security_level_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSecurityLevelValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting();
            }
            else if("zones_server_side_exclude_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesServerSideExcludeValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting();
            }
            else if("zones_setting_value_34".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch34 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34();
            }
            else if("zones_setting_value_39".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch39 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39();
            }
            else if("zones_setting_value_8".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSettingValueBranch8 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8();
            }
            else if("zones_sha1_support_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSha1SupportValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting();
            }
            else if("zones_sort_query_string_for_cache_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSortQueryStringForCacheValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting();
            }
            else if("zones_ssl_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSslValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting();
            }
            else if("zones_tls_1_2_only_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTls12OnlyValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting();
            }
            else if("zones_tls_1_3_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTls13ValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting();
            }
            else if("zones_tls_client_auth_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTlsClientAuthValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting();
            }
            else if("zones_true_client_ip_header_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesTrueClientIpHeaderValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting();
            }
            else if("zones_waf_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWafValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting();
            }
            else if("zones_webp_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWebpValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting();
            }
            else if("zones_websockets_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesWebsocketsValueSetting = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(Zones0rttValueSetting != null)
            {
                return Zones0rttValueSetting.GetFieldDeserializers();
            }
            else if(ZonesAdvancedDdosValueSetting != null)
            {
                return ZonesAdvancedDdosValueSetting.GetFieldDeserializers();
            }
            else if(ZonesAlwaysOnlineValueSetting != null)
            {
                return ZonesAlwaysOnlineValueSetting.GetFieldDeserializers();
            }
            else if(ZonesAlwaysUseHttpsValueSetting != null)
            {
                return ZonesAlwaysUseHttpsValueSetting.GetFieldDeserializers();
            }
            else if(ZonesAutomaticHttpsRewritesValueSetting != null)
            {
                return ZonesAutomaticHttpsRewritesValueSetting.GetFieldDeserializers();
            }
            else if(ZonesAutomaticPlatformOptimization != null)
            {
                return ZonesAutomaticPlatformOptimization.GetFieldDeserializers();
            }
            else if(ZonesBrotliValueSetting != null)
            {
                return ZonesBrotliValueSetting.GetFieldDeserializers();
            }
            else if(ZonesBrowserCheckValueSetting != null)
            {
                return ZonesBrowserCheckValueSetting.GetFieldDeserializers();
            }
            else if(ZonesCacheLevelValueSetting != null)
            {
                return ZonesCacheLevelValueSetting.GetFieldDeserializers();
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                return ZonesCacheRulesAegisValue.GetFieldDeserializers();
            }
            else if(ZonesCacheRulesOriginMaxHttpVersionValueSetting != null)
            {
                return ZonesCacheRulesOriginMaxHttpVersionValueSetting.GetFieldDeserializers();
            }
            else if(ZonesChallengeTtlValueSetting != null)
            {
                return ZonesChallengeTtlValueSetting.GetFieldDeserializers();
            }
            else if(ZonesChinaNetworkEnabledValueSetting != null)
            {
                return ZonesChinaNetworkEnabledValueSetting.GetFieldDeserializers();
            }
            else if(ZonesCiphersValueWrapper != null)
            {
                return ZonesCiphersValueWrapper.GetFieldDeserializers();
            }
            else if(ZonesCnameFlatteningValueSetting != null)
            {
                return ZonesCnameFlatteningValueSetting.GetFieldDeserializers();
            }
            else if(ZonesDevelopmentModeValueSetting != null)
            {
                return ZonesDevelopmentModeValueSetting.GetFieldDeserializers();
            }
            else if(ZonesEarlyHintsValueSetting != null)
            {
                return ZonesEarlyHintsValueSetting.GetFieldDeserializers();
            }
            else if(ZonesEdgeCacheTtlValueSetting != null)
            {
                return ZonesEdgeCacheTtlValueSetting.GetFieldDeserializers();
            }
            else if(ZonesEmailObfuscationValueSetting != null)
            {
                return ZonesEmailObfuscationValueSetting.GetFieldDeserializers();
            }
            else if(ZonesH2PrioritizationValueSetting != null)
            {
                return ZonesH2PrioritizationValueSetting.GetFieldDeserializers();
            }
            else if(ZonesHotlinkProtectionValueSetting != null)
            {
                return ZonesHotlinkProtectionValueSetting.GetFieldDeserializers();
            }
            else if(ZonesHttp2ValueSetting != null)
            {
                return ZonesHttp2ValueSetting.GetFieldDeserializers();
            }
            else if(ZonesHttp3ValueSetting != null)
            {
                return ZonesHttp3ValueSetting.GetFieldDeserializers();
            }
            else if(ZonesImageResizingValueSetting != null)
            {
                return ZonesImageResizingValueSetting.GetFieldDeserializers();
            }
            else if(ZonesIpGeolocationValueSetting != null)
            {
                return ZonesIpGeolocationValueSetting.GetFieldDeserializers();
            }
            else if(ZonesIpv6ValueSetting != null)
            {
                return ZonesIpv6ValueSetting.GetFieldDeserializers();
            }
            else if(ZonesMaxUploadValueSetting != null)
            {
                return ZonesMaxUploadValueSetting.GetFieldDeserializers();
            }
            else if(ZonesMinTlsVersionValueSetting != null)
            {
                return ZonesMinTlsVersionValueSetting.GetFieldDeserializers();
            }
            else if(ZonesMirageValueSetting != null)
            {
                return ZonesMirageValueSetting.GetFieldDeserializers();
            }
            else if(ZonesNelValue != null)
            {
                return ZonesNelValue.GetFieldDeserializers();
            }
            else if(ZonesOpportunisticEncryptionValueSetting != null)
            {
                return ZonesOpportunisticEncryptionValueSetting.GetFieldDeserializers();
            }
            else if(ZonesOpportunisticOnionValueSetting != null)
            {
                return ZonesOpportunisticOnionValueSetting.GetFieldDeserializers();
            }
            else if(ZonesOrangeToOrangeValueSetting != null)
            {
                return ZonesOrangeToOrangeValueSetting.GetFieldDeserializers();
            }
            else if(ZonesOriginErrorPagePassThruValueSetting != null)
            {
                return ZonesOriginErrorPagePassThruValueSetting.GetFieldDeserializers();
            }
            else if(ZonesPolishValueSetting != null)
            {
                return ZonesPolishValueSetting.GetFieldDeserializers();
            }
            else if(ZonesPrefetchPreloadValueSetting != null)
            {
                return ZonesPrefetchPreloadValueSetting.GetFieldDeserializers();
            }
            else if(ZonesPrivacyPassValueSetting != null)
            {
                return ZonesPrivacyPassValueSetting.GetFieldDeserializers();
            }
            else if(ZonesPseudoIpv4ValueSetting != null)
            {
                return ZonesPseudoIpv4ValueSetting.GetFieldDeserializers();
            }
            else if(ZonesReplaceInsecureJsValueSetting != null)
            {
                return ZonesReplaceInsecureJsValueSetting.GetFieldDeserializers();
            }
            else if(ZonesResponseBufferingValueSetting != null)
            {
                return ZonesResponseBufferingValueSetting.GetFieldDeserializers();
            }
            else if(ZonesRocketLoaderValueSetting != null)
            {
                return ZonesRocketLoaderValueSetting.GetFieldDeserializers();
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                return ZonesSecurityHeaderValue.GetFieldDeserializers();
            }
            else if(ZonesSecurityLevelValueSetting != null)
            {
                return ZonesSecurityLevelValueSetting.GetFieldDeserializers();
            }
            else if(ZonesServerSideExcludeValueSetting != null)
            {
                return ZonesServerSideExcludeValueSetting.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch34 != null)
            {
                return ZonesSettingValueBranch34.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch39 != null)
            {
                return ZonesSettingValueBranch39.GetFieldDeserializers();
            }
            else if(ZonesSettingValueBranch8 != null)
            {
                return ZonesSettingValueBranch8.GetFieldDeserializers();
            }
            else if(ZonesSha1SupportValueSetting != null)
            {
                return ZonesSha1SupportValueSetting.GetFieldDeserializers();
            }
            else if(ZonesSortQueryStringForCacheValueSetting != null)
            {
                return ZonesSortQueryStringForCacheValueSetting.GetFieldDeserializers();
            }
            else if(ZonesSslValueSetting != null)
            {
                return ZonesSslValueSetting.GetFieldDeserializers();
            }
            else if(ZonesTls12OnlyValueSetting != null)
            {
                return ZonesTls12OnlyValueSetting.GetFieldDeserializers();
            }
            else if(ZonesTls13ValueSetting != null)
            {
                return ZonesTls13ValueSetting.GetFieldDeserializers();
            }
            else if(ZonesTlsClientAuthValueSetting != null)
            {
                return ZonesTlsClientAuthValueSetting.GetFieldDeserializers();
            }
            else if(ZonesTrueClientIpHeaderValueSetting != null)
            {
                return ZonesTrueClientIpHeaderValueSetting.GetFieldDeserializers();
            }
            else if(ZonesWafValueSetting != null)
            {
                return ZonesWafValueSetting.GetFieldDeserializers();
            }
            else if(ZonesWebpValueSetting != null)
            {
                return ZonesWebpValueSetting.GetFieldDeserializers();
            }
            else if(ZonesWebsocketsValueSetting != null)
            {
                return ZonesWebsocketsValueSetting.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(Zones0rttValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value_setting>(null, Zones0rttValueSetting);
            }
            else if(ZonesAdvancedDdosValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value_setting>(null, ZonesAdvancedDdosValueSetting);
            }
            else if(ZonesAlwaysOnlineValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value_setting>(null, ZonesAlwaysOnlineValueSetting);
            }
            else if(ZonesAlwaysUseHttpsValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value_setting>(null, ZonesAlwaysUseHttpsValueSetting);
            }
            else if(ZonesAutomaticHttpsRewritesValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value_setting>(null, ZonesAutomaticHttpsRewritesValueSetting);
            }
            else if(ZonesAutomaticPlatformOptimization != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization>(null, ZonesAutomaticPlatformOptimization);
            }
            else if(ZonesBrotliValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value_setting>(null, ZonesBrotliValueSetting);
            }
            else if(ZonesBrowserCheckValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value_setting>(null, ZonesBrowserCheckValueSetting);
            }
            else if(ZonesCacheLevelValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value_setting>(null, ZonesCacheLevelValueSetting);
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value>(null, ZonesCacheRulesAegisValue);
            }
            else if(ZonesCacheRulesOriginMaxHttpVersionValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value_setting>(null, ZonesCacheRulesOriginMaxHttpVersionValueSetting);
            }
            else if(ZonesChallengeTtlValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value_setting>(null, ZonesChallengeTtlValueSetting);
            }
            else if(ZonesChinaNetworkEnabledValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value_setting>(null, ZonesChinaNetworkEnabledValueSetting);
            }
            else if(ZonesCiphersValueWrapper != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers_value_Wrapper>(null, ZonesCiphersValueWrapper);
            }
            else if(ZonesCnameFlatteningValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value_setting>(null, ZonesCnameFlatteningValueSetting);
            }
            else if(ZonesDevelopmentModeValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value_setting>(null, ZonesDevelopmentModeValueSetting);
            }
            else if(ZonesEarlyHintsValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value_setting>(null, ZonesEarlyHintsValueSetting);
            }
            else if(ZonesEdgeCacheTtlValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value_setting>(null, ZonesEdgeCacheTtlValueSetting);
            }
            else if(ZonesEmailObfuscationValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value_setting>(null, ZonesEmailObfuscationValueSetting);
            }
            else if(ZonesH2PrioritizationValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value_setting>(null, ZonesH2PrioritizationValueSetting);
            }
            else if(ZonesHotlinkProtectionValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value_setting>(null, ZonesHotlinkProtectionValueSetting);
            }
            else if(ZonesHttp2ValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value_setting>(null, ZonesHttp2ValueSetting);
            }
            else if(ZonesHttp3ValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value_setting>(null, ZonesHttp3ValueSetting);
            }
            else if(ZonesImageResizingValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value_setting>(null, ZonesImageResizingValueSetting);
            }
            else if(ZonesIpGeolocationValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value_setting>(null, ZonesIpGeolocationValueSetting);
            }
            else if(ZonesIpv6ValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value_setting>(null, ZonesIpv6ValueSetting);
            }
            else if(ZonesMaxUploadValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value_setting>(null, ZonesMaxUploadValueSetting);
            }
            else if(ZonesMinTlsVersionValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value_setting>(null, ZonesMinTlsVersionValueSetting);
            }
            else if(ZonesMirageValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value_setting>(null, ZonesMirageValueSetting);
            }
            else if(ZonesNelValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value>(null, ZonesNelValue);
            }
            else if(ZonesOpportunisticEncryptionValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value_setting>(null, ZonesOpportunisticEncryptionValueSetting);
            }
            else if(ZonesOpportunisticOnionValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value_setting>(null, ZonesOpportunisticOnionValueSetting);
            }
            else if(ZonesOrangeToOrangeValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value_setting>(null, ZonesOrangeToOrangeValueSetting);
            }
            else if(ZonesOriginErrorPagePassThruValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value_setting>(null, ZonesOriginErrorPagePassThruValueSetting);
            }
            else if(ZonesPolishValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value_setting>(null, ZonesPolishValueSetting);
            }
            else if(ZonesPrefetchPreloadValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value_setting>(null, ZonesPrefetchPreloadValueSetting);
            }
            else if(ZonesPrivacyPassValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value_setting>(null, ZonesPrivacyPassValueSetting);
            }
            else if(ZonesPseudoIpv4ValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value_setting>(null, ZonesPseudoIpv4ValueSetting);
            }
            else if(ZonesReplaceInsecureJsValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value_setting>(null, ZonesReplaceInsecureJsValueSetting);
            }
            else if(ZonesResponseBufferingValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value_setting>(null, ZonesResponseBufferingValueSetting);
            }
            else if(ZonesRocketLoaderValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value_setting>(null, ZonesRocketLoaderValueSetting);
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value>(null, ZonesSecurityHeaderValue);
            }
            else if(ZonesSecurityLevelValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value_setting>(null, ZonesSecurityLevelValueSetting);
            }
            else if(ZonesServerSideExcludeValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value_setting>(null, ZonesServerSideExcludeValueSetting);
            }
            else if(ZonesSettingValueBranch34 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch34>(null, ZonesSettingValueBranch34);
            }
            else if(ZonesSettingValueBranch39 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch39>(null, ZonesSettingValueBranch39);
            }
            else if(ZonesSettingValueBranch8 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value_Branch8>(null, ZonesSettingValueBranch8);
            }
            else if(ZonesSha1SupportValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value_setting>(null, ZonesSha1SupportValueSetting);
            }
            else if(ZonesSortQueryStringForCacheValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value_setting>(null, ZonesSortQueryStringForCacheValueSetting);
            }
            else if(ZonesSslValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value_setting>(null, ZonesSslValueSetting);
            }
            else if(ZonesTls12OnlyValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value_setting>(null, ZonesTls12OnlyValueSetting);
            }
            else if(ZonesTls13ValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value_setting>(null, ZonesTls13ValueSetting);
            }
            else if(ZonesTlsClientAuthValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value_setting>(null, ZonesTlsClientAuthValueSetting);
            }
            else if(ZonesTrueClientIpHeaderValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value_setting>(null, ZonesTrueClientIpHeaderValueSetting);
            }
            else if(ZonesWafValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value_setting>(null, ZonesWafValueSetting);
            }
            else if(ZonesWebpValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value_setting>(null, ZonesWebpValueSetting);
            }
            else if(ZonesWebsocketsValueSetting != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value_setting>(null, ZonesWebsocketsValueSetting);
            }
        }
    }
}
#pragma warning restore CS0618
