// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value"/>, <see cref="int"/>, List&lt;string&gt;
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_setting_value : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="double"/></summary>
        public double? Double { get; set; }
        /// <summary>Composed type representation for type <see cref="int"/></summary>
        public int? Integer { get; set; }
        /// <summary>Composed type representation for type List&lt;string&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? String { get; set; }
#nullable restore
#else
        public List<string> String { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value? Zones0rttValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value? ZonesAdvancedDdosValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value? ZonesAlwaysOnlineValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value? ZonesAlwaysUseHttpsValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value? ZonesAutomaticHttpsRewritesValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization? ZonesAutomaticPlatformOptimization { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization ZonesAutomaticPlatformOptimization { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value? ZonesBrotliValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value? ZonesBrowserCacheTtlValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value ZonesBrowserCacheTtlValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value? ZonesBrowserCheckValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value? ZonesCacheLevelValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value? ZonesCacheRulesAegisValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value ZonesCacheRulesAegisValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value? ZonesCacheRulesOriginMaxHttpVersionValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value? ZonesChallengeTtlValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value ZonesChallengeTtlValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value? ZonesChinaNetworkEnabledValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value? ZonesCnameFlatteningValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value? ZonesDevelopmentModeValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value? ZonesEarlyHintsValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value? ZonesEdgeCacheTtlValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value ZonesEdgeCacheTtlValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value? ZonesEmailObfuscationValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value? ZonesH2PrioritizationValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value? ZonesHotlinkProtectionValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value? ZonesHttp2Value { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value? ZonesHttp3Value { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value? ZonesImageResizingValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value? ZonesIpGeolocationValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value? ZonesIpv6Value { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value? ZonesMaxUploadValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value ZonesMaxUploadValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value? ZonesMinTlsVersionValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value? ZonesMirageValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value? ZonesNelValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value ZonesNelValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value? ZonesOpportunisticEncryptionValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value? ZonesOpportunisticOnionValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value? ZonesOrangeToOrangeValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value? ZonesOriginErrorPagePassThruValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value? ZonesPolishValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value? ZonesPrefetchPreloadValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value? ZonesPrivacyPassValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value? ZonesPseudoIpv4Value { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value? ZonesReplaceInsecureJsValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value? ZonesResponseBufferingValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value? ZonesRocketLoaderValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value? ZonesSecurityHeaderValue { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value ZonesSecurityHeaderValue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value? ZonesSecurityLevelValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value? ZonesServerSideExcludeValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value? ZonesSha1SupportValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value? ZonesSortQueryStringForCacheValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value? ZonesSslValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value? ZonesTls12OnlyValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value? ZonesTls13Value { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value? ZonesTlsClientAuthValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value? ZonesTrueClientIpHeaderValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value? ZonesWafValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value? ZonesWebpValue { get; set; }
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value"/></summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value? ZonesWebsocketsValue { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
            var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_setting_value();
            if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value zones0rttValueValue)
            {
                result.Zones0rttValue = zones0rttValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value zonesAdvancedDdosValueValue)
            {
                result.ZonesAdvancedDdosValue = zonesAdvancedDdosValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value zonesAlwaysOnlineValueValue)
            {
                result.ZonesAlwaysOnlineValue = zonesAlwaysOnlineValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value zonesAlwaysUseHttpsValueValue)
            {
                result.ZonesAlwaysUseHttpsValue = zonesAlwaysUseHttpsValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value zonesAutomaticHttpsRewritesValueValue)
            {
                result.ZonesAutomaticHttpsRewritesValue = zonesAutomaticHttpsRewritesValueValue;
            }
            else if("zones_automatic_platform_optimization".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesAutomaticPlatformOptimization = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value zonesBrotliValueValue)
            {
                result.ZonesBrotliValue = zonesBrotliValueValue;
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesBrowserCacheTtlValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value zonesBrowserCheckValueValue)
            {
                result.ZonesBrowserCheckValue = zonesBrowserCheckValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value zonesCacheLevelValueValue)
            {
                result.ZonesCacheLevelValue = zonesCacheLevelValueValue;
            }
            else if("zones_cache-rules_aegis_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesCacheRulesAegisValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value zonesCacheRulesOriginMaxHttpVersionValueValue)
            {
                result.ZonesCacheRulesOriginMaxHttpVersionValue = zonesCacheRulesOriginMaxHttpVersionValueValue;
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesChallengeTtlValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value zonesChinaNetworkEnabledValueValue)
            {
                result.ZonesChinaNetworkEnabledValue = zonesChinaNetworkEnabledValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value zonesCnameFlatteningValueValue)
            {
                result.ZonesCnameFlatteningValue = zonesCnameFlatteningValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value zonesDevelopmentModeValueValue)
            {
                result.ZonesDevelopmentModeValue = zonesDevelopmentModeValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value zonesEarlyHintsValueValue)
            {
                result.ZonesEarlyHintsValue = zonesEarlyHintsValueValue;
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesEdgeCacheTtlValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value zonesEmailObfuscationValueValue)
            {
                result.ZonesEmailObfuscationValue = zonesEmailObfuscationValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value zonesH2PrioritizationValueValue)
            {
                result.ZonesH2PrioritizationValue = zonesH2PrioritizationValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value zonesHotlinkProtectionValueValue)
            {
                result.ZonesHotlinkProtectionValue = zonesHotlinkProtectionValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value zonesHttp2ValueValue)
            {
                result.ZonesHttp2Value = zonesHttp2ValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value zonesHttp3ValueValue)
            {
                result.ZonesHttp3Value = zonesHttp3ValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value zonesImageResizingValueValue)
            {
                result.ZonesImageResizingValue = zonesImageResizingValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value zonesIpGeolocationValueValue)
            {
                result.ZonesIpGeolocationValue = zonesIpGeolocationValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value zonesIpv6ValueValue)
            {
                result.ZonesIpv6Value = zonesIpv6ValueValue;
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesMaxUploadValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value zonesMinTlsVersionValueValue)
            {
                result.ZonesMinTlsVersionValue = zonesMinTlsVersionValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value zonesMirageValueValue)
            {
                result.ZonesMirageValue = zonesMirageValueValue;
            }
            else if("zones_nel_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesNelValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value zonesOpportunisticEncryptionValueValue)
            {
                result.ZonesOpportunisticEncryptionValue = zonesOpportunisticEncryptionValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value zonesOpportunisticOnionValueValue)
            {
                result.ZonesOpportunisticOnionValue = zonesOpportunisticOnionValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value zonesOrangeToOrangeValueValue)
            {
                result.ZonesOrangeToOrangeValue = zonesOrangeToOrangeValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value zonesOriginErrorPagePassThruValueValue)
            {
                result.ZonesOriginErrorPagePassThruValue = zonesOriginErrorPagePassThruValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value zonesPolishValueValue)
            {
                result.ZonesPolishValue = zonesPolishValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value zonesPrefetchPreloadValueValue)
            {
                result.ZonesPrefetchPreloadValue = zonesPrefetchPreloadValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value zonesPrivacyPassValueValue)
            {
                result.ZonesPrivacyPassValue = zonesPrivacyPassValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value zonesPseudoIpv4ValueValue)
            {
                result.ZonesPseudoIpv4Value = zonesPseudoIpv4ValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value zonesReplaceInsecureJsValueValue)
            {
                result.ZonesReplaceInsecureJsValue = zonesReplaceInsecureJsValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value zonesResponseBufferingValueValue)
            {
                result.ZonesResponseBufferingValue = zonesResponseBufferingValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value zonesRocketLoaderValueValue)
            {
                result.ZonesRocketLoaderValue = zonesRocketLoaderValueValue;
            }
            else if("zones_security_header_value".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.ZonesSecurityHeaderValue = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value();
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value zonesSecurityLevelValueValue)
            {
                result.ZonesSecurityLevelValue = zonesSecurityLevelValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value zonesServerSideExcludeValueValue)
            {
                result.ZonesServerSideExcludeValue = zonesServerSideExcludeValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value zonesSha1SupportValueValue)
            {
                result.ZonesSha1SupportValue = zonesSha1SupportValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value zonesSortQueryStringForCacheValueValue)
            {
                result.ZonesSortQueryStringForCacheValue = zonesSortQueryStringForCacheValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value zonesSslValueValue)
            {
                result.ZonesSslValue = zonesSslValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value zonesTls12OnlyValueValue)
            {
                result.ZonesTls12OnlyValue = zonesTls12OnlyValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value zonesTls13ValueValue)
            {
                result.ZonesTls13Value = zonesTls13ValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value zonesTlsClientAuthValueValue)
            {
                result.ZonesTlsClientAuthValue = zonesTlsClientAuthValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value zonesTrueClientIpHeaderValueValue)
            {
                result.ZonesTrueClientIpHeaderValue = zonesTrueClientIpHeaderValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value zonesWafValueValue)
            {
                result.ZonesWafValue = zonesWafValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value zonesWebpValueValue)
            {
                result.ZonesWebpValue = zonesWebpValueValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value>() is global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value zonesWebsocketsValueValue)
            {
                result.ZonesWebsocketsValue = zonesWebsocketsValueValue;
            }
            else if(parseNode.GetDoubleValue() is double doubleValue)
            {
                result.Double = doubleValue;
            }
            else if(parseNode.GetIntValue() is int integerValue)
            {
                result.Integer = integerValue;
            }
            else if(parseNode.GetCollectionOfPrimitiveValues<string>()?.AsList() is List<string> stringValue)
            {
                result.String = stringValue;
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(ZonesAutomaticPlatformOptimization != null)
            {
                return ZonesAutomaticPlatformOptimization.GetFieldDeserializers();
            }
            else if(ZonesBrowserCacheTtlValue != null)
            {
                return ZonesBrowserCacheTtlValue.GetFieldDeserializers();
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                return ZonesCacheRulesAegisValue.GetFieldDeserializers();
            }
            else if(ZonesChallengeTtlValue != null)
            {
                return ZonesChallengeTtlValue.GetFieldDeserializers();
            }
            else if(ZonesEdgeCacheTtlValue != null)
            {
                return ZonesEdgeCacheTtlValue.GetFieldDeserializers();
            }
            else if(ZonesMaxUploadValue != null)
            {
                return ZonesMaxUploadValue.GetFieldDeserializers();
            }
            else if(ZonesNelValue != null)
            {
                return ZonesNelValue.GetFieldDeserializers();
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                return ZonesSecurityHeaderValue.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(Zones0rttValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt_value>(null, Zones0rttValue);
            }
            else if(ZonesAdvancedDdosValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos_value>(null, ZonesAdvancedDdosValue);
            }
            else if(ZonesAlwaysOnlineValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online_value>(null, ZonesAlwaysOnlineValue);
            }
            else if(ZonesAlwaysUseHttpsValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https_value>(null, ZonesAlwaysUseHttpsValue);
            }
            else if(ZonesAutomaticHttpsRewritesValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites_value>(null, ZonesAutomaticHttpsRewritesValue);
            }
            else if(ZonesAutomaticPlatformOptimization != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_platform_optimization>(null, ZonesAutomaticPlatformOptimization);
            }
            else if(ZonesBrotliValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli_value>(null, ZonesBrotliValue);
            }
            else if(ZonesBrowserCacheTtlValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl_value>(null, ZonesBrowserCacheTtlValue);
            }
            else if(ZonesBrowserCheckValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check_value>(null, ZonesBrowserCheckValue);
            }
            else if(ZonesCacheLevelValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level_value>(null, ZonesCacheLevelValue);
            }
            else if(ZonesCacheRulesAegisValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_aegis_value>(null, ZonesCacheRulesAegisValue);
            }
            else if(ZonesCacheRulesOriginMaxHttpVersionValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cacheRules_origin_max_http_version_value>(null, ZonesCacheRulesOriginMaxHttpVersionValue);
            }
            else if(ZonesChallengeTtlValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl_value>(null, ZonesChallengeTtlValue);
            }
            else if(ZonesChinaNetworkEnabledValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled_value>(null, ZonesChinaNetworkEnabledValue);
            }
            else if(ZonesCnameFlatteningValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening_value>(null, ZonesCnameFlatteningValue);
            }
            else if(ZonesDevelopmentModeValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode_value>(null, ZonesDevelopmentModeValue);
            }
            else if(ZonesEarlyHintsValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints_value>(null, ZonesEarlyHintsValue);
            }
            else if(ZonesEdgeCacheTtlValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl_value>(null, ZonesEdgeCacheTtlValue);
            }
            else if(ZonesEmailObfuscationValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation_value>(null, ZonesEmailObfuscationValue);
            }
            else if(ZonesH2PrioritizationValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization_value>(null, ZonesH2PrioritizationValue);
            }
            else if(ZonesHotlinkProtectionValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection_value>(null, ZonesHotlinkProtectionValue);
            }
            else if(ZonesHttp2Value != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2_value>(null, ZonesHttp2Value);
            }
            else if(ZonesHttp3Value != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3_value>(null, ZonesHttp3Value);
            }
            else if(ZonesImageResizingValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_image_resizing_value>(null, ZonesImageResizingValue);
            }
            else if(ZonesIpGeolocationValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation_value>(null, ZonesIpGeolocationValue);
            }
            else if(ZonesIpv6Value != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6_value>(null, ZonesIpv6Value);
            }
            else if(ZonesMaxUploadValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload_value>(null, ZonesMaxUploadValue);
            }
            else if(ZonesMinTlsVersionValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version_value>(null, ZonesMinTlsVersionValue);
            }
            else if(ZonesMirageValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage_value>(null, ZonesMirageValue);
            }
            else if(ZonesNelValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel_value>(null, ZonesNelValue);
            }
            else if(ZonesOpportunisticEncryptionValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption_value>(null, ZonesOpportunisticEncryptionValue);
            }
            else if(ZonesOpportunisticOnionValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion_value>(null, ZonesOpportunisticOnionValue);
            }
            else if(ZonesOrangeToOrangeValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange_value>(null, ZonesOrangeToOrangeValue);
            }
            else if(ZonesOriginErrorPagePassThruValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru_value>(null, ZonesOriginErrorPagePassThruValue);
            }
            else if(ZonesPolishValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish_value>(null, ZonesPolishValue);
            }
            else if(ZonesPrefetchPreloadValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload_value>(null, ZonesPrefetchPreloadValue);
            }
            else if(ZonesPrivacyPassValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass_value>(null, ZonesPrivacyPassValue);
            }
            else if(ZonesPseudoIpv4Value != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4_value>(null, ZonesPseudoIpv4Value);
            }
            else if(ZonesReplaceInsecureJsValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js_value>(null, ZonesReplaceInsecureJsValue);
            }
            else if(ZonesResponseBufferingValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering_value>(null, ZonesResponseBufferingValue);
            }
            else if(ZonesRocketLoaderValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader_value>(null, ZonesRocketLoaderValue);
            }
            else if(ZonesSecurityHeaderValue != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header_value>(null, ZonesSecurityHeaderValue);
            }
            else if(ZonesSecurityLevelValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level_value>(null, ZonesSecurityLevelValue);
            }
            else if(ZonesServerSideExcludeValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude_value>(null, ZonesServerSideExcludeValue);
            }
            else if(ZonesSha1SupportValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support_value>(null, ZonesSha1SupportValue);
            }
            else if(ZonesSortQueryStringForCacheValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache_value>(null, ZonesSortQueryStringForCacheValue);
            }
            else if(ZonesSslValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_value>(null, ZonesSslValue);
            }
            else if(ZonesTls12OnlyValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only_value>(null, ZonesTls12OnlyValue);
            }
            else if(ZonesTls13Value != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3_value>(null, ZonesTls13Value);
            }
            else if(ZonesTlsClientAuthValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth_value>(null, ZonesTlsClientAuthValue);
            }
            else if(ZonesTrueClientIpHeaderValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header_value>(null, ZonesTrueClientIpHeaderValue);
            }
            else if(ZonesWafValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf_value>(null, ZonesWafValue);
            }
            else if(ZonesWebpValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp_value>(null, ZonesWebpValue);
            }
            else if(ZonesWebsocketsValue != null)
            {
                writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets_value>(null, ZonesWebsocketsValue);
            }
            else if(Double != null)
            {
                writer.WriteDoubleValue(null, Double);
            }
            else if(Integer != null)
            {
                writer.WriteIntValue(null, Integer);
            }
            else if(String != null)
            {
                writer.WriteCollectionOfPrimitiveValues<string>(null, String);
            }
        }
    }
}
#pragma warning restore CS0618
