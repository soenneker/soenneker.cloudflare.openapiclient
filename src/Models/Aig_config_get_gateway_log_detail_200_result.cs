// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Aig_config_get_gateway_log_detail_200_result : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cached property</summary>
        public bool? Cached { get; set; }
        /// <summary>The cost property</summary>
        public double? Cost { get; set; }
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The custom_cost property</summary>
        public bool? CustomCost { get; set; }
        /// <summary>The duration property</summary>
        public int? Duration { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>The model property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The model_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelType { get; set; }
#nullable restore
#else
        public string ModelType { get; set; }
#endif
        /// <summary>The path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The provider property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>The request_content_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestContentType { get; set; }
#nullable restore
#else
        public string RequestContentType { get; set; }
#endif
        /// <summary>The request_head property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestHead { get; set; }
#nullable restore
#else
        public string RequestHead { get; set; }
#endif
        /// <summary>The request_head_complete property</summary>
        public bool? RequestHeadComplete { get; set; }
        /// <summary>The request_size property</summary>
        public int? RequestSize { get; set; }
        /// <summary>The request_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestType { get; set; }
#nullable restore
#else
        public string RequestType { get; set; }
#endif
        /// <summary>The response_content_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseContentType { get; set; }
#nullable restore
#else
        public string ResponseContentType { get; set; }
#endif
        /// <summary>The response_head property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseHead { get; set; }
#nullable restore
#else
        public string ResponseHead { get; set; }
#endif
        /// <summary>The response_head_complete property</summary>
        public bool? ResponseHeadComplete { get; set; }
        /// <summary>The response_size property</summary>
        public int? ResponseSize { get; set; }
        /// <summary>The status_code property</summary>
        public int? StatusCode { get; set; }
        /// <summary>The step property</summary>
        public int? Step { get; set; }
        /// <summary>The success property</summary>
        public bool? Success { get; set; }
        /// <summary>The tokens_in property</summary>
        public int? TokensIn { get; set; }
        /// <summary>The tokens_out property</summary>
        public int? TokensOut { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Aig_config_get_gateway_log_detail_200_result"/> and sets the default values.
        /// </summary>
        public Aig_config_get_gateway_log_detail_200_result()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Aig_config_get_gateway_log_detail_200_result"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Aig_config_get_gateway_log_detail_200_result CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Aig_config_get_gateway_log_detail_200_result();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cached", n => { Cached = n.GetBoolValue(); } },
                { "cost", n => { Cost = n.GetDoubleValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "custom_cost", n => { CustomCost = n.GetBoolValue(); } },
                { "duration", n => { Duration = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "model_type", n => { ModelType = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "request_content_type", n => { RequestContentType = n.GetStringValue(); } },
                { "request_head", n => { RequestHead = n.GetStringValue(); } },
                { "request_head_complete", n => { RequestHeadComplete = n.GetBoolValue(); } },
                { "request_size", n => { RequestSize = n.GetIntValue(); } },
                { "request_type", n => { RequestType = n.GetStringValue(); } },
                { "response_content_type", n => { ResponseContentType = n.GetStringValue(); } },
                { "response_head", n => { ResponseHead = n.GetStringValue(); } },
                { "response_head_complete", n => { ResponseHeadComplete = n.GetBoolValue(); } },
                { "response_size", n => { ResponseSize = n.GetIntValue(); } },
                { "status_code", n => { StatusCode = n.GetIntValue(); } },
                { "step", n => { Step = n.GetIntValue(); } },
                { "success", n => { Success = n.GetBoolValue(); } },
                { "tokens_in", n => { TokensIn = n.GetIntValue(); } },
                { "tokens_out", n => { TokensOut = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cached", Cached);
            writer.WriteDoubleValue("cost", Cost);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteBoolValue("custom_cost", CustomCost);
            writer.WriteIntValue("duration", Duration);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("model", Model);
            writer.WriteStringValue("model_type", ModelType);
            writer.WriteStringValue("path", Path);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("request_content_type", RequestContentType);
            writer.WriteStringValue("request_head", RequestHead);
            writer.WriteBoolValue("request_head_complete", RequestHeadComplete);
            writer.WriteIntValue("request_size", RequestSize);
            writer.WriteStringValue("request_type", RequestType);
            writer.WriteStringValue("response_content_type", ResponseContentType);
            writer.WriteStringValue("response_head", ResponseHead);
            writer.WriteBoolValue("response_head_complete", ResponseHeadComplete);
            writer.WriteIntValue("response_size", ResponseSize);
            writer.WriteIntValue("status_code", StatusCode);
            writer.WriteIntValue("step", Step);
            writer.WriteBoolValue("success", Success);
            writer.WriteIntValue("tokens_in", TokensIn);
            writer.WriteIntValue("tokens_out", TokensOut);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
