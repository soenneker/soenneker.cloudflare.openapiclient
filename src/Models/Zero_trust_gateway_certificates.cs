// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Zero_trust_gateway_certificates : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicate the read-only deployment status of the certificate on Cloudflare&apos;s edge. Gateway TLS interception can use certificates in the &apos;available&apos; (previously called &apos;active&apos;) state.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_binding_status? BindingStatus { get; private set; }
        /// <summary>Provide the CA certificate (read-only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certificate { get; private set; }
#nullable restore
#else
        public string Certificate { get; private set; }
#endif
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The expires_on property</summary>
        public DateTimeOffset? ExpiresOn { get; set; }
        /// <summary>Provide the SHA256 fingerprint of the certificate (read-only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; private set; }
#nullable restore
#else
        public string Fingerprint { get; private set; }
#endif
        /// <summary>Identify the certificate with a UUID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).</summary>
        public bool? InUse { get; private set; }
        /// <summary>Indicate the organization that issued the certificate (read-only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerOrg { get; private set; }
#nullable restore
#else
        public string IssuerOrg { get; private set; }
#endif
        /// <summary>Provide the entire issuer field of the certificate (read-only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerRaw { get; private set; }
#nullable restore
#else
        public string IssuerRaw { get; private set; }
#endif
        /// <summary>Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_type? Type { get; private set; }
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The uploaded_on property</summary>
        public DateTimeOffset? UploadedOn { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificates"/> and sets the default values.
        /// </summary>
        public Zero_trust_gateway_certificates()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificates"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificates CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificates();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "binding_status", n => { BindingStatus = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_binding_status>(); } },
                { "certificate", n => { Certificate = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "expires_on", n => { ExpiresOn = n.GetDateTimeOffsetValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "in_use", n => { InUse = n.GetBoolValue(); } },
                { "issuer_org", n => { IssuerOrg = n.GetStringValue(); } },
                { "issuer_raw", n => { IssuerRaw = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_type>(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "uploaded_on", n => { UploadedOn = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteDateTimeOffsetValue("expires_on", ExpiresOn);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteDateTimeOffsetValue("uploaded_on", UploadedOn);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
