// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A Zones subscription information.
    /// </summary>
    [Obsolete("")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_zone_plan : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>States if the subscription can be activated.</summary>
        public bool? CanSubscribe { get; set; }
        /// <summary>The denomination of the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>If this Zone is managed by another company.</summary>
        public bool? ExternallyManaged { get; set; }
        /// <summary>How often the customer is billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Frequency { get; set; }
#nullable restore
#else
        public string Frequency { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>States if the subscription active.</summary>
        public bool? IsSubscribed { get; set; }
        /// <summary>If the legacy discount applies to this Zone.</summary>
        public bool? LegacyDiscount { get; set; }
        /// <summary>The legacy name of the plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyId { get; set; }
#nullable restore
#else
        public string LegacyId { get; set; }
#endif
        /// <summary>Name of the owner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>How much the customer is paying.</summary>
        public double? Price { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan"/> and sets the default values.
        /// </summary>
        public Zones_zone_plan()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "can_subscribe", n => { CanSubscribe = n.GetBoolValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "externally_managed", n => { ExternallyManaged = n.GetBoolValue(); } },
                { "frequency", n => { Frequency = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_subscribed", n => { IsSubscribed = n.GetBoolValue(); } },
                { "legacy_discount", n => { LegacyDiscount = n.GetBoolValue(); } },
                { "legacy_id", n => { LegacyId = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "price", n => { Price = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("can_subscribe", CanSubscribe);
            writer.WriteStringValue("currency", Currency);
            writer.WriteBoolValue("externally_managed", ExternallyManaged);
            writer.WriteStringValue("frequency", Frequency);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_subscribed", IsSubscribed);
            writer.WriteBoolValue("legacy_discount", LegacyDiscount);
            writer.WriteStringValue("legacy_id", LegacyId);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("price", Price);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
