// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Realtimekit_RecordingConfig : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Object containing configuration regarding the audio that is being recorded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig? AudioConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig AudioConfig { get; set; }
#endif
        /// <summary>Adds a prefix to the beginning of the file name of the recording.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileNamePrefix { get; set; }
#nullable restore
#else
        public string FileNamePrefix { get; set; }
#endif
        /// <summary>The live_streaming_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig? LiveStreamingConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig LiveStreamingConfig { get; set; }
#endif
        /// <summary>Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.</summary>
        public double? MaxSeconds { get; set; }
        /// <summary>The realtimekit_bucket_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig? RealtimekitBucketConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig RealtimekitBucketConfig { get; set; }
#endif
        /// <summary>The storage_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig? StorageConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig StorageConfig { get; set; }
#endif
        /// <summary>The video_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig? VideoConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig VideoConfig { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_RecordingConfig"/> and sets the default values.
        /// </summary>
        public Realtimekit_RecordingConfig()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_RecordingConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_RecordingConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_RecordingConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audio_config", n => { AudioConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig.CreateFromDiscriminatorValue); } },
                { "file_name_prefix", n => { FileNamePrefix = n.GetStringValue(); } },
                { "live_streaming_config", n => { LiveStreamingConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig.CreateFromDiscriminatorValue); } },
                { "max_seconds", n => { MaxSeconds = n.GetDoubleValue(); } },
                { "realtimekit_bucket_config", n => { RealtimekitBucketConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig.CreateFromDiscriminatorValue); } },
                { "storage_config", n => { StorageConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig.CreateFromDiscriminatorValue); } },
                { "video_config", n => { VideoConfig = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig>("audio_config", AudioConfig);
            writer.WriteStringValue("file_name_prefix", FileNamePrefix);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_LivestreamingConfig>("live_streaming_config", LiveStreamingConfig);
            writer.WriteDoubleValue("max_seconds", MaxSeconds);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_realtimekitBucketConfig>("realtimekit_bucket_config", RealtimekitBucketConfig);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_StorageConfig>("storage_config", StorageConfig);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_VideoConfig>("video_config", VideoConfig);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
