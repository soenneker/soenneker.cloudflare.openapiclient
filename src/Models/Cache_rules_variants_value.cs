// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Value of the zone setting.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Cache_rules_variants_value : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of strings with the MIME types of all the variants that should be served for avif.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Avif { get; set; }
#nullable restore
#else
        public List<string> Avif { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for bmp.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Bmp { get; set; }
#nullable restore
#else
        public List<string> Bmp { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for gif.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Gif { get; set; }
#nullable restore
#else
        public List<string> Gif { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for jp2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Jp2 { get; set; }
#nullable restore
#else
        public List<string> Jp2 { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for jpeg.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Jpeg { get; set; }
#nullable restore
#else
        public List<string> Jpeg { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for jpg.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Jpg { get; set; }
#nullable restore
#else
        public List<string> Jpg { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for jpg2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Jpg2 { get; set; }
#nullable restore
#else
        public List<string> Jpg2 { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for png.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Png { get; set; }
#nullable restore
#else
        public List<string> Png { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for tif.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tif { get; set; }
#nullable restore
#else
        public List<string> Tif { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for tiff.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tiff { get; set; }
#nullable restore
#else
        public List<string> Tiff { get; set; }
#endif
        /// <summary>List of strings with the MIME types of all the variants that should be served for webp.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Webp { get; set; }
#nullable restore
#else
        public List<string> Webp { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Cache_rules_variants_value"/> and sets the default values.
        /// </summary>
        public Cache_rules_variants_value()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Cache_rules_variants_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Cache_rules_variants_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Cache_rules_variants_value();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avif", n => { Avif = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "bmp", n => { Bmp = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "gif", n => { Gif = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jp2", n => { Jp2 = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jpeg", n => { Jpeg = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jpg", n => { Jpg = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jpg2", n => { Jpg2 = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "png", n => { Png = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tif", n => { Tif = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tiff", n => { Tiff = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "webp", n => { Webp = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("avif", Avif);
            writer.WriteCollectionOfPrimitiveValues<string>("bmp", Bmp);
            writer.WriteCollectionOfPrimitiveValues<string>("gif", Gif);
            writer.WriteCollectionOfPrimitiveValues<string>("jp2", Jp2);
            writer.WriteCollectionOfPrimitiveValues<string>("jpeg", Jpeg);
            writer.WriteCollectionOfPrimitiveValues<string>("jpg", Jpg);
            writer.WriteCollectionOfPrimitiveValues<string>("jpg2", Jpg2);
            writer.WriteCollectionOfPrimitiveValues<string>("png", Png);
            writer.WriteCollectionOfPrimitiveValues<string>("tif", Tif);
            writer.WriteCollectionOfPrimitiveValues<string>("tiff", Tiff);
            writer.WriteCollectionOfPrimitiveValues<string>("webp", Webp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
