// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Radar_get_certificate_log_details_200_result_certificateLog : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The API standard that the certificate log follows.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_api? Api { get; set; }
        /// <summary>The average throughput of the CT log, measured in certificates per hour (certs/hour).</summary>
        public double? AvgThroughput { get; set; }
        /// <summary>A brief description of the certificate log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The end date and time for when the log will stop accepting certificates.</summary>
        public DateTimeOffset? EndExclusive { get; set; }
        /// <summary>Timestamp of the most recent update to the CT log.</summary>
        public DateTimeOffset? LastUpdate { get; set; }
        /// <summary>The organization responsible for operating the certificate log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operator { get; set; }
#nullable restore
#else
        public string Operator { get; set; }
#endif
        /// <summary>Log performance metrics, including averages and per-endpoint details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_performance? Performance { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_performance Performance { get; set; }
#endif
        /// <summary>Logs from the same operator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_related>? Related { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_related> Related { get; set; }
#endif
        /// <summary>A URL-friendly, kebab-case identifier for the certificate log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The start date and time for when the log starts accepting certificates.</summary>
        public DateTimeOffset? StartInclusive { get; set; }
        /// <summary>The current state of the certificate log. More details about log states can be found here: https://googlechrome.github.io/CertificateTransparency/log_states.html</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_state? State { get; set; }
        /// <summary>Timestamp of when the log state was last updated.</summary>
        public DateTimeOffset? StateTimestamp { get; set; }
        /// <summary>Number of certificates that are eligible for inclusion to this log but have not been included yet. Based on certificates signed by trusted root CAs within the log&apos;s accepted date range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittableCertCount { get; set; }
#nullable restore
#else
        public string SubmittableCertCount { get; set; }
#endif
        /// <summary>Number of certificates already included in this CT log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedCertCount { get; set; }
#nullable restore
#else
        public string SubmittedCertCount { get; set; }
#endif
        /// <summary>The URL for the certificate log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog"/> and sets the default values.
        /// </summary>
        public Radar_get_certificate_log_details_200_result_certificateLog()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "api", n => { Api = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_api>(); } },
                { "avgThroughput", n => { AvgThroughput = n.GetDoubleValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "endExclusive", n => { EndExclusive = n.GetDateTimeOffsetValue(); } },
                { "lastUpdate", n => { LastUpdate = n.GetDateTimeOffsetValue(); } },
                { "operator", n => { Operator = n.GetStringValue(); } },
                { "performance", n => { Performance = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_performance>(global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_performance.CreateFromDiscriminatorValue); } },
                { "related", n => { Related = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_related>(global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_related.CreateFromDiscriminatorValue)?.AsList(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "startInclusive", n => { StartInclusive = n.GetDateTimeOffsetValue(); } },
                { "state", n => { State = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_state>(); } },
                { "stateTimestamp", n => { StateTimestamp = n.GetDateTimeOffsetValue(); } },
                { "submittableCertCount", n => { SubmittableCertCount = n.GetStringValue(); } },
                { "submittedCertCount", n => { SubmittedCertCount = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_api>("api", Api);
            writer.WriteDoubleValue("avgThroughput", AvgThroughput);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("endExclusive", EndExclusive);
            writer.WriteDateTimeOffsetValue("lastUpdate", LastUpdate);
            writer.WriteStringValue("operator", Operator);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_performance>("performance", Performance);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_related>("related", Related);
            writer.WriteStringValue("slug", Slug);
            writer.WriteDateTimeOffsetValue("startInclusive", StartInclusive);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_certificate_log_details_200_result_certificateLog_state>("state", State);
            writer.WriteDateTimeOffsetValue("stateTimestamp", StateTimestamp);
            writer.WriteStringValue("submittableCertCount", SubmittableCertCount);
            writer.WriteStringValue("submittedCertCount", SubmittedCertCount);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
