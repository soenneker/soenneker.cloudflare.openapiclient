// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Urlscanner_get_scan_v2_200_stats_domainStats : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The count property</summary>
        public double? Count { get; set; }
        /// <summary>The countries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Countries { get; set; }
#nullable restore
#else
        public List<string> Countries { get; set; }
#endif
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The encodedSize property</summary>
        public double? EncodedSize { get; set; }
        /// <summary>The index property</summary>
        public double? Index { get; set; }
        /// <summary>The initiators property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Initiators { get; set; }
#nullable restore
#else
        public List<string> Initiators { get; set; }
#endif
        /// <summary>The ips property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ips { get; set; }
#nullable restore
#else
        public List<string> Ips { get; set; }
#endif
        /// <summary>The redirects property</summary>
        public double? Redirects { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_stats_domainStats"/> and sets the default values.
        /// </summary>
        public Urlscanner_get_scan_v2_200_stats_domainStats()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_stats_domainStats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_stats_domainStats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_stats_domainStats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "count", n => { Count = n.GetDoubleValue(); } },
                { "countries", n => { Countries = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "encodedSize", n => { EncodedSize = n.GetDoubleValue(); } },
                { "index", n => { Index = n.GetDoubleValue(); } },
                { "initiators", n => { Initiators = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ips", n => { Ips = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "redirects", n => { Redirects = n.GetDoubleValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("count", Count);
            writer.WriteCollectionOfPrimitiveValues<string>("countries", Countries);
            writer.WriteStringValue("domain", Domain);
            writer.WriteDoubleValue("encodedSize", EncodedSize);
            writer.WriteDoubleValue("index", Index);
            writer.WriteCollectionOfPrimitiveValues<string>("initiators", Initiators);
            writer.WriteCollectionOfPrimitiveValues<string>("ips", Ips);
            writer.WriteDoubleValue("redirects", Redirects);
            writer.WriteDoubleValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
