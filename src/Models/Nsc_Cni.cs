// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Nsc_Cni : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Customer account tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_AccountTag? Account { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_AccountTag Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bgp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_BgpControl? Bgp { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_BgpControl Bgp { get; set; }
#endif
        /// <summary>Customer end of the point-to-point linkThis should always be inside the same prefix as `p2p_ip`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustIp { get; set; }
#nullable restore
#else
        public string CustIp { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>Interconnect identifier hosting this CNI</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Interconnect { get; set; }
#nullable restore
#else
        public string Interconnect { get; set; }
#endif
        /// <summary>The magic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_MagicSettings? Magic { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_MagicSettings Magic { get; set; }
#endif
        /// <summary>Cloudflare end of the point-to-point link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P2pIp { get; set; }
#nullable restore
#else
        public string P2pIp { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_Cni"/> and sets the default values.
        /// </summary>
        public Nsc_Cni()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_Cni"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_Cni CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_Cni();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_AccountTag>(global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_AccountTag.CreateFromDiscriminatorValue); } },
                { "bgp", n => { Bgp = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_BgpControl>(global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_BgpControl.CreateFromDiscriminatorValue); } },
                { "cust_ip", n => { CustIp = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "interconnect", n => { Interconnect = n.GetStringValue(); } },
                { "magic", n => { Magic = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_MagicSettings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_MagicSettings.CreateFromDiscriminatorValue); } },
                { "p2p_ip", n => { P2pIp = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_AccountTag>("account", Account);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_BgpControl>("bgp", Bgp);
            writer.WriteStringValue("cust_ip", CustIp);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("interconnect", Interconnect);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Nsc_MagicSettings>("magic", Magic);
            writer.WriteStringValue("p2p_ip", P2pIp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
