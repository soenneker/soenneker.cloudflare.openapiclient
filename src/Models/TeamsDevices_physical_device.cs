// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A WARP Device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TeamsDevices_physical_device : IAdditionalDataHolder, IParsable
    {
        /// <summary>The number of active registrations for the device. Active registrations are those which haven&apos;t been revoked or deleted.</summary>
        public int? ActiveRegistrations { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Version of the WARP client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientVersion { get; set; }
#nullable restore
#else
        public string ClientVersion { get; set; }
#endif
        /// <summary>The RFC3339 timestamp when the device was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The RFC3339 timestamp when the device was deleted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeletedAt { get; set; }
#nullable restore
#else
        public string DeletedAt { get; set; }
#endif
        /// <summary>The device operating system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceType { get; set; }
#nullable restore
#else
        public string DeviceType { get; set; }
#endif
        /// <summary>A string that uniquely identifies the hardware or virtual machine (VM).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HardwareId { get; set; }
#nullable restore
#else
        public string HardwareId { get; set; }
#endif
        /// <summary>The unique ID of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The RFC3339 timestamp when the device was last seen.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastSeenAt { get; set; }
#nullable restore
#else
        public string LastSeenAt { get; set; }
#endif
        /// <summary>The last Access user to use the WARP device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device_last_seen_user? LastSeenUser { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device_last_seen_user LastSeenUser { get; set; }
#endif
        /// <summary>The device MAC address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MacAddress { get; set; }
#nullable restore
#else
        public string MacAddress { get; set; }
#endif
        /// <summary>The device manufacturer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer { get; set; }
#nullable restore
#else
        public string Manufacturer { get; set; }
#endif
        /// <summary>The model name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The device operating system version number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsVersion { get; set; }
#nullable restore
#else
        public string OsVersion { get; set; }
#endif
        /// <summary>Additional operating system version data. For macOS or iOS, the Product Version Extra. For Linux, the kernel release version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsVersionExtra { get; set; }
#nullable restore
#else
        public string OsVersionExtra { get; set; }
#endif
        /// <summary>The public IP address of the WARP client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicIp { get; set; }
#nullable restore
#else
        public string PublicIp { get; set; }
#endif
        /// <summary>The device serial number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The RFC3339 timestamp when the device was last updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device"/> and sets the default values.
        /// </summary>
        public TeamsDevices_physical_device()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active_registrations", n => { ActiveRegistrations = n.GetIntValue(); } },
                { "client_version", n => { ClientVersion = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "deleted_at", n => { DeletedAt = n.GetStringValue(); } },
                { "device_type", n => { DeviceType = n.GetStringValue(); } },
                { "hardware_id", n => { HardwareId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "last_seen_at", n => { LastSeenAt = n.GetStringValue(); } },
                { "last_seen_user", n => { LastSeenUser = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device_last_seen_user>(global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device_last_seen_user.CreateFromDiscriminatorValue); } },
                { "mac_address", n => { MacAddress = n.GetStringValue(); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "os_version", n => { OsVersion = n.GetStringValue(); } },
                { "os_version_extra", n => { OsVersionExtra = n.GetStringValue(); } },
                { "public_ip", n => { PublicIp = n.GetStringValue(); } },
                { "serial_number", n => { SerialNumber = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("active_registrations", ActiveRegistrations);
            writer.WriteStringValue("client_version", ClientVersion);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("deleted_at", DeletedAt);
            writer.WriteStringValue("device_type", DeviceType);
            writer.WriteStringValue("hardware_id", HardwareId);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("last_seen_at", LastSeenAt);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.TeamsDevices_physical_device_last_seen_user>("last_seen_user", LastSeenUser);
            writer.WriteStringValue("mac_address", MacAddress);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteStringValue("model", Model);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("os_version", OsVersion);
            writer.WriteStringValue("os_version_extra", OsVersionExtra);
            writer.WriteStringValue("public_ip", PublicIp);
            writer.WriteStringValue("serial_number", SerialNumber);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
