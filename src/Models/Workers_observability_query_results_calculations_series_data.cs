// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Workers_observability_query_results_calculations_series_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The count property</summary>
        public double? Count { get; set; }
        /// <summary>The firstSeen property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstSeen { get; set; }
#nullable restore
#else
        public string FirstSeen { get; set; }
#endif
        /// <summary>The groups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data_groups>? Groups { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data_groups> Groups { get; set; }
#endif
        /// <summary>The interval property</summary>
        public double? Interval { get; set; }
        /// <summary>The lastSeen property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastSeen { get; set; }
#nullable restore
#else
        public string LastSeen { get; set; }
#endif
        /// <summary>The sampleInterval property</summary>
        public double? SampleInterval { get; set; }
        /// <summary>The value property</summary>
        public double? Value { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data"/> and sets the default values.
        /// </summary>
        public Workers_observability_query_results_calculations_series_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "count", n => { Count = n.GetDoubleValue(); } },
                { "firstSeen", n => { FirstSeen = n.GetStringValue(); } },
                { "groups", n => { Groups = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data_groups>(global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data_groups.CreateFromDiscriminatorValue)?.AsList(); } },
                { "interval", n => { Interval = n.GetDoubleValue(); } },
                { "lastSeen", n => { LastSeen = n.GetStringValue(); } },
                { "sampleInterval", n => { SampleInterval = n.GetDoubleValue(); } },
                { "value", n => { Value = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("count", Count);
            writer.WriteStringValue("firstSeen", FirstSeen);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_observability_query_results_calculations_series_data_groups>("groups", Groups);
            writer.WriteDoubleValue("interval", Interval);
            writer.WriteStringValue("lastSeen", LastSeen);
            writer.WriteDoubleValue("sampleInterval", SampleInterval);
            writer.WriteDoubleValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
