// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dns_analytics_query : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of dimension names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Dimensions { get; set; }
#nullable restore
#else
        public List<string> Dimensions { get; set; }
#endif
        /// <summary>Segmentation filter in &apos;attribute operator value&apos; format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Filters { get; set; }
#nullable restore
#else
        public string Filters { get; set; }
#endif
        /// <summary>Limit number of returned metrics.</summary>
        public int? Limit { get; set; }
        /// <summary>Array of metric names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Metrics { get; set; }
#nullable restore
#else
        public List<string> Metrics { get; set; }
#endif
        /// <summary>Start date and time of requesting data period in ISO 8601 format.</summary>
        public DateTimeOffset? Since { get; set; }
        /// <summary>Array of dimensions to sort by, where each dimension may be prefixed by - (descending) or + (ascending).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Sort { get; set; }
#nullable restore
#else
        public List<string> Sort { get; set; }
#endif
        /// <summary>End date and time of requesting data period in ISO 8601 format.</summary>
        public DateTimeOffset? Until { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_analytics_query"/> and sets the default values.
        /// </summary>
        public Dns_analytics_query()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_analytics_query"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_analytics_query CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_analytics_query();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dimensions", n => { Dimensions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "filters", n => { Filters = n.GetStringValue(); } },
                { "limit", n => { Limit = n.GetIntValue(); } },
                { "metrics", n => { Metrics = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "since", n => { Since = n.GetDateTimeOffsetValue(); } },
                { "sort", n => { Sort = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "until", n => { Until = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("dimensions", Dimensions);
            writer.WriteStringValue("filters", Filters);
            writer.WriteIntValue("limit", Limit);
            writer.WriteCollectionOfPrimitiveValues<string>("metrics", Metrics);
            writer.WriteDateTimeOffsetValue("since", Since);
            writer.WriteCollectionOfPrimitiveValues<string>("sort", Sort);
            writer.WriteDateTimeOffsetValue("until", Until);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
