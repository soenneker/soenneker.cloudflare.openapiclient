// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Teams_devices_zero_trust_account_device_settings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Sets the time limit, in seconds, that a user can use an override code to bypass WARP.</summary>
        public double? DisableForTime { get; set; }
        /// <summary>Enable gateway proxy filtering on TCP.</summary>
        public bool? GatewayProxyEnabled { get; set; }
        /// <summary>Enable gateway proxy filtering on UDP.</summary>
        public bool? GatewayUdpProxyEnabled { get; set; }
        /// <summary>Enable installation of cloudflare managed root certificate.</summary>
        public bool? RootCertificateInstallationEnabled { get; set; }
        /// <summary>Enable using CGNAT virtual IPv4.</summary>
        public bool? UseZtVirtualIp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_zero_trust_account_device_settings"/> and sets the default values.
        /// </summary>
        public Teams_devices_zero_trust_account_device_settings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_zero_trust_account_device_settings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_zero_trust_account_device_settings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_zero_trust_account_device_settings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "disable_for_time", n => { DisableForTime = n.GetDoubleValue(); } },
                { "gateway_proxy_enabled", n => { GatewayProxyEnabled = n.GetBoolValue(); } },
                { "gateway_udp_proxy_enabled", n => { GatewayUdpProxyEnabled = n.GetBoolValue(); } },
                { "root_certificate_installation_enabled", n => { RootCertificateInstallationEnabled = n.GetBoolValue(); } },
                { "use_zt_virtual_ip", n => { UseZtVirtualIp = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("disable_for_time", DisableForTime);
            writer.WriteBoolValue("gateway_proxy_enabled", GatewayProxyEnabled);
            writer.WriteBoolValue("gateway_udp_proxy_enabled", GatewayUdpProxyEnabled);
            writer.WriteBoolValue("root_certificate_installation_enabled", RootCertificateInstallationEnabled);
            writer.WriteBoolValue("use_zt_virtual_ip", UseZtVirtualIp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
