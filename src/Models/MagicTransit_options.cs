// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MagicTransit_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The max_ttl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? MaxTtl { get; set; }
#nullable restore
#else
        public UntypedNode MaxTtl { get; set; }
#endif
        /// <summary>The packets_per_ttl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? PacketsPerTtl { get; set; }
#nullable restore
#else
        public UntypedNode PacketsPerTtl { get; set; }
#endif
        /// <summary>Type of packet sent.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_packet_type? PacketType { get; set; }
        /// <summary>The port property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Port { get; set; }
#nullable restore
#else
        public UntypedNode Port { get; set; }
#endif
        /// <summary>The wait_time property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? WaitTime { get; set; }
#nullable restore
#else
        public UntypedNode WaitTime { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_options"/> and sets the default values.
        /// </summary>
        public MagicTransit_options()
        {
            AdditionalData = new Dictionary<string, object>();
            PacketType = global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_packet_type.Icmp;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "max_ttl", n => { MaxTtl = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "packet_type", n => { PacketType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_packet_type>(); } },
                { "packets_per_ttl", n => { PacketsPerTtl = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "port", n => { Port = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "wait_time", n => { WaitTime = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("max_ttl", MaxTtl);
            writer.WriteObjectValue<UntypedNode>("packets_per_ttl", PacketsPerTtl);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.MagicTransit_packet_type>("packet_type", PacketType);
            writer.WriteObjectValue<UntypedNode>("port", Port);
            writer.WriteObjectValue<UntypedNode>("wait_time", WaitTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
