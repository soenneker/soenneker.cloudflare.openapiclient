// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Cloudflare_ips_cloudflare_ip_details_200 : global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_api_response_single, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The result property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result? Result { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result Result { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "result", n => { Result = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result>(global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result>("result", Result);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Cloudflare_ips_cloudflare_ip_details_200_result : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips? PublicIpIps { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips PublicIpIps { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud? PublicIpIpsJdcloud { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud PublicIpIpsJdcloud { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Cloudflare_ips_cloudflare_ip_details_200.Cloudflare_ips_cloudflare_ip_details_200_result();
                if("public_ip_ips".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicIpIps = new global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips();
                }
                else if("public_ip_ips_jdcloud".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicIpIpsJdcloud = new global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PublicIpIps != null)
                {
                    return PublicIpIps.GetFieldDeserializers();
                }
                else if(PublicIpIpsJdcloud != null)
                {
                    return PublicIpIpsJdcloud.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
                if(PublicIpIps != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips>(null, PublicIpIps);
                }
                else if(PublicIpIpsJdcloud != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Public_ip_ips_jdcloud>(null, PublicIpIpsJdcloud);
                }
            }
        }
    }
}
#pragma warning restore CS0618
