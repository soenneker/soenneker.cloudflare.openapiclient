// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dns_firewall_dns_firewall_cluster : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Attack mitigation settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_attack_mitigation? AttackMitigation { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_attack_mitigation AttackMitigation { get; set; }
#endif
        /// <summary>Whether to refuse to answer queries for the ANY type</summary>
        public bool? DeprecateAnyRequests { get; set; }
        /// <summary>Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent</summary>
        public bool? EcsFallback { get; set; }
        /// <summary>By default, Cloudflare attempts to cache responses for as long asindicated by the TTL received from upstream nameservers. This settingsets an upper bound on this duration. For caching purposes, higher TTLswill be decreased to the maximum value defined by this setting.This setting does not affect the TTL value in the DNS responseCloudflare returns to clients. Cloudflare will always forward the TTLvalue received from upstream nameservers.</summary>
        public double? MaximumCacheTtl { get; set; }
        /// <summary>By default, Cloudflare attempts to cache responses for as long asindicated by the TTL received from upstream nameservers. This settingsets a lower bound on this duration. For caching purposes, lower TTLswill be increased to the minimum value defined by this setting.This setting does not affect the TTL value in the DNS responseCloudflare returns to clients. Cloudflare will always forward the TTLvalue received from upstream nameservers.Note that, even with this setting, there is no guarantee that aresponse will be cached for at least the specified duration. Cachedresponses may be removed earlier for capacity or other operationalreasons.</summary>
        public double? MinimumCacheTtl { get; set; }
        /// <summary>DNS Firewall cluster name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>This setting controls how long DNS Firewall should cache negativeresponses (e.g., NXDOMAIN) from the upstream servers.This setting does not affect the TTL value in the DNS responseCloudflare returns to clients. Cloudflare will always forward the TTLvalue received from upstream nameservers.</summary>
        public double? NegativeCacheTtl { get; set; }
        /// <summary>Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)</summary>
        public double? Ratelimit { get; set; }
        /// <summary>Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)</summary>
        public double? Retries { get; set; }
        /// <summary>The upstream_ips property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UpstreamIps { get; set; }
#nullable restore
#else
        public List<string> UpstreamIps { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_dns_firewall_cluster"/> and sets the default values.
        /// </summary>
        public Dns_firewall_dns_firewall_cluster()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_dns_firewall_cluster"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_dns_firewall_cluster CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_dns_firewall_cluster();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attack_mitigation", n => { AttackMitigation = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_attack_mitigation>(global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_attack_mitigation.CreateFromDiscriminatorValue); } },
                { "deprecate_any_requests", n => { DeprecateAnyRequests = n.GetBoolValue(); } },
                { "ecs_fallback", n => { EcsFallback = n.GetBoolValue(); } },
                { "maximum_cache_ttl", n => { MaximumCacheTtl = n.GetDoubleValue(); } },
                { "minimum_cache_ttl", n => { MinimumCacheTtl = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "negative_cache_ttl", n => { NegativeCacheTtl = n.GetDoubleValue(); } },
                { "ratelimit", n => { Ratelimit = n.GetDoubleValue(); } },
                { "retries", n => { Retries = n.GetDoubleValue(); } },
                { "upstream_ips", n => { UpstreamIps = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dns_firewall_attack_mitigation>("attack_mitigation", AttackMitigation);
            writer.WriteBoolValue("deprecate_any_requests", DeprecateAnyRequests);
            writer.WriteBoolValue("ecs_fallback", EcsFallback);
            writer.WriteDoubleValue("maximum_cache_ttl", MaximumCacheTtl);
            writer.WriteDoubleValue("minimum_cache_ttl", MinimumCacheTtl);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("negative_cache_ttl", NegativeCacheTtl);
            writer.WriteDoubleValue("ratelimit", Ratelimit);
            writer.WriteDoubleValue("retries", Retries);
            writer.WriteCollectionOfPrimitiveValues<string>("upstream_ips", UpstreamIps);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
