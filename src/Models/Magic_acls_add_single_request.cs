// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Bidirectional ACL policy for local network traffic within a site.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Magic_acls_add_single_request : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Description for the ACL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The desired forwarding action for this ACL policy. If set to &quot;false&quot;, the policy will forward traffic to Cloudflare. If set to &quot;true&quot;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_forward_locally? ForwardLocally { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_forward_locally ForwardLocally { get; set; }
#endif
        /// <summary>The lan_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration? Lan1 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration Lan1 { get; set; }
#endif
        /// <summary>The lan_2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration? Lan2 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration Lan2 { get; set; }
#endif
        /// <summary>The name of the ACL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The protocols property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request_protocols?>? Protocols { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request_protocols?> Protocols { get; set; }
#endif
        /// <summary>The desired traffic direction for this ACL policy. If set to &quot;false&quot;, the policy will allow bidirectional traffic. If set to &quot;true&quot;, the policy will only allow traffic in one direction. If not included in request, will default to false.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_unidirectional? Unidirectional { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_unidirectional Unidirectional { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request"/> and sets the default values.
        /// </summary>
        public Magic_acls_add_single_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "forward_locally", n => { ForwardLocally = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_forward_locally>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_forward_locally.CreateFromDiscriminatorValue); } },
                { "lan_1", n => { Lan1 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration.CreateFromDiscriminatorValue); } },
                { "lan_2", n => { Lan2 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "protocols", n => { Protocols = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request_protocols>()?.AsList(); } },
                { "unidirectional", n => { Unidirectional = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_unidirectional>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_unidirectional.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_forward_locally>("forward_locally", ForwardLocally);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration>("lan_1", Lan1);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lanAclConfiguration>("lan_2", Lan2);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_acls_add_single_request_protocols>("protocols", Protocols);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_unidirectional>("unidirectional", Unidirectional);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
