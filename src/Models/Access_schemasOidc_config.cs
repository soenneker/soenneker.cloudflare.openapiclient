// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Access_schemasOidc_config : global::Soenneker.Cloudflare.OpenApiClient.Models.Access_schemasGenericOauthConfig, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The authorization_endpoint URL of your IdP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthUrl { get; set; }
#nullable restore
#else
        public string AuthUrl { get; set; }
#endif
        /// <summary>The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertsUrl { get; set; }
#nullable restore
#else
        public string CertsUrl { get; set; }
#endif
        /// <summary>List of custom claims that will be pulled from your id_token and added to your signed Access JWT token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Claims { get; set; }
#nullable restore
#else
        public List<string> Claims { get; set; }
#endif
        /// <summary>OAuth scopes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Scopes { get; set; }
#nullable restore
#else
        public List<string> Scopes { get; set; }
#endif
        /// <summary>The token_endpoint URL of your IdP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenUrl { get; set; }
#nullable restore
#else
        public string TokenUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_schemasOidc_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Soenneker.Cloudflare.OpenApiClient.Models.Access_schemasOidc_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Access_schemasOidc_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "auth_url", n => { AuthUrl = n.GetStringValue(); } },
                { "certs_url", n => { CertsUrl = n.GetStringValue(); } },
                { "claims", n => { Claims = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "scopes", n => { Scopes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "token_url", n => { TokenUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("auth_url", AuthUrl);
            writer.WriteStringValue("certs_url", CertsUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("claims", Claims);
            writer.WriteCollectionOfPrimitiveValues<string>("scopes", Scopes);
            writer.WriteStringValue("token_url", TokenUrl);
        }
    }
}
#pragma warning restore CS0618
