// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tunnel_schemasConnection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>UUID of the Cloudflare Tunnel connector.</summary>
        public Guid? ClientId { get; private set; }
        /// <summary>The cloudflared version used to establish this connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientVersion { get; set; }
#nullable restore
#else
        public string ClientVersion { get; set; }
#endif
        /// <summary>The Cloudflare data center used for this connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColoName { get; set; }
#nullable restore
#else
        public string ColoName { get; set; }
#endif
        /// <summary>UUID of the Cloudflare Tunnel connection.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.</summary>
        public bool? IsPendingReconnect { get; set; }
        /// <summary>Timestamp of when the connection was established.</summary>
        public DateTimeOffset? OpenedAt { get; set; }
        /// <summary>The public IP address of the host running cloudflared.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginIp { get; set; }
#nullable restore
#else
        public string OriginIp { get; set; }
#endif
        /// <summary>UUID of the Cloudflare Tunnel connection.</summary>
        public Guid? Uuid { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection"/> and sets the default values.
        /// </summary>
        public Tunnel_schemasConnection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_schemasConnection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "client_id", n => { ClientId = n.GetGuidValue(); } },
                { "client_version", n => { ClientVersion = n.GetStringValue(); } },
                { "colo_name", n => { ColoName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "is_pending_reconnect", n => { IsPendingReconnect = n.GetBoolValue(); } },
                { "opened_at", n => { OpenedAt = n.GetDateTimeOffsetValue(); } },
                { "origin_ip", n => { OriginIp = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("client_version", ClientVersion);
            writer.WriteStringValue("colo_name", ColoName);
            writer.WriteBoolValue("is_pending_reconnect", IsPendingReconnect);
            writer.WriteDateTimeOffsetValue("opened_at", OpenedAt);
            writer.WriteStringValue("origin_ip", OriginIp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
