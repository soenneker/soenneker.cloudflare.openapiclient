// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Teams_devices_default_device_settings_policy : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to allow devices to leave the organization.</summary>
        public bool? AllowedToLeave { get; set; }
        /// <summary>Whether to allow the user to switch WARP between modes.</summary>
        public bool? AllowModeSwitch { get; set; }
        /// <summary>Whether to receive update notifications when a new version of the client is available.</summary>
        public bool? AllowUpdates { get; set; }
        /// <summary>The amount of time in seconds to reconnect after having been disabled.</summary>
        public double? AutoConnect { get; set; }
        /// <summary>Turn on the captive portal after the specified amount of time.</summary>
        public double? CaptivePortal { get; set; }
        /// <summary>Whether the policy will be applied to matching devices.</summary>
        public bool? Default { get; set; }
        /// <summary>If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.</summary>
        public bool? DisableAutoFallback { get; set; }
        /// <summary>Whether the policy will be applied to matching devices.</summary>
        public bool? Enabled { get; set; }
        /// <summary>List of routes excluded in the WARP client&apos;s tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel>? Exclude { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel> Exclude { get; set; }
#endif
        /// <summary>Whether to add Microsoft IPs to Split Tunnel exclusions.</summary>
        public bool? ExcludeOfficeIps { get; set; }
        /// <summary>The fallback_domains property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_fallback_domain>? FallbackDomains { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_fallback_domain> FallbackDomains { get; set; }
#endif
        /// <summary>The gateway_unique_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GatewayUniqueId { get; set; }
#nullable restore
#else
        public string GatewayUniqueId { get; set; }
#endif
        /// <summary>List of routes included in the WARP client&apos;s tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel_include>? Include { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel_include> Include { get; set; }
#endif
        /// <summary>Determines if the operating system will register WARP&apos;s local interface IP with your on-premises DNS server.</summary>
        public bool? RegisterInterfaceIpWithDns { get; set; }
        /// <summary>Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).</summary>
        public bool? SccmVpnBoundarySupport { get; set; }
        /// <summary>The service_mode_v2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_service_mode_v2? ServiceModeV2 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_service_mode_v2 ServiceModeV2 { get; set; }
#endif
        /// <summary>The URL to launch when the Send Feedback button is clicked.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportUrl { get; set; }
#nullable restore
#else
        public string SupportUrl { get; set; }
#endif
        /// <summary>Whether to allow the user to turn off the WARP switch and disconnect the client.</summary>
        public bool? SwitchLocked { get; set; }
        /// <summary>Determines which tunnel protocol to use.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TunnelProtocol { get; set; }
#nullable restore
#else
        public string TunnelProtocol { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_default_device_settings_policy"/> and sets the default values.
        /// </summary>
        public Teams_devices_default_device_settings_policy()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_default_device_settings_policy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_default_device_settings_policy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_default_device_settings_policy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_mode_switch", n => { AllowModeSwitch = n.GetBoolValue(); } },
                { "allow_updates", n => { AllowUpdates = n.GetBoolValue(); } },
                { "allowed_to_leave", n => { AllowedToLeave = n.GetBoolValue(); } },
                { "auto_connect", n => { AutoConnect = n.GetDoubleValue(); } },
                { "captive_portal", n => { CaptivePortal = n.GetDoubleValue(); } },
                { "default", n => { Default = n.GetBoolValue(); } },
                { "disable_auto_fallback", n => { DisableAutoFallback = n.GetBoolValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "exclude", n => { Exclude = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel>(global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "exclude_office_ips", n => { ExcludeOfficeIps = n.GetBoolValue(); } },
                { "fallback_domains", n => { FallbackDomains = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_fallback_domain>(global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_fallback_domain.CreateFromDiscriminatorValue)?.AsList(); } },
                { "gateway_unique_id", n => { GatewayUniqueId = n.GetStringValue(); } },
                { "include", n => { Include = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel_include>(global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel_include.CreateFromDiscriminatorValue)?.AsList(); } },
                { "register_interface_ip_with_dns", n => { RegisterInterfaceIpWithDns = n.GetBoolValue(); } },
                { "sccm_vpn_boundary_support", n => { SccmVpnBoundarySupport = n.GetBoolValue(); } },
                { "service_mode_v2", n => { ServiceModeV2 = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_service_mode_v2>(global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_service_mode_v2.CreateFromDiscriminatorValue); } },
                { "support_url", n => { SupportUrl = n.GetStringValue(); } },
                { "switch_locked", n => { SwitchLocked = n.GetBoolValue(); } },
                { "tunnel_protocol", n => { TunnelProtocol = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowed_to_leave", AllowedToLeave);
            writer.WriteBoolValue("allow_mode_switch", AllowModeSwitch);
            writer.WriteBoolValue("allow_updates", AllowUpdates);
            writer.WriteDoubleValue("auto_connect", AutoConnect);
            writer.WriteDoubleValue("captive_portal", CaptivePortal);
            writer.WriteBoolValue("default", Default);
            writer.WriteBoolValue("disable_auto_fallback", DisableAutoFallback);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel>("exclude", Exclude);
            writer.WriteBoolValue("exclude_office_ips", ExcludeOfficeIps);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_fallback_domain>("fallback_domains", FallbackDomains);
            writer.WriteStringValue("gateway_unique_id", GatewayUniqueId);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_split_tunnel_include>("include", Include);
            writer.WriteBoolValue("register_interface_ip_with_dns", RegisterInterfaceIpWithDns);
            writer.WriteBoolValue("sccm_vpn_boundary_support", SccmVpnBoundarySupport);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_service_mode_v2>("service_mode_v2", ServiceModeV2);
            writer.WriteStringValue("support_url", SupportUrl);
            writer.WriteBoolValue("switch_locked", SwitchLocked);
            writer.WriteStringValue("tunnel_protocol", TunnelProtocol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
