// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A single account custom nameserver.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DnsCustomNameservers_CustomNS : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A and AAAA records associated with the nameserver.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_dns_records>? DnsRecords { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_dns_records> DnsRecords { get; set; }
#endif
        /// <summary>The FQDN of the name server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NsName { get; set; }
#nullable restore
#else
        public string NsName { get; set; }
#endif
        /// <summary>The number of the set that this name server belongs to.</summary>
        public double? NsSet { get; set; }
        /// <summary>Verification status of the nameserver.</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_status? Status { get; set; }
        /// <summary>Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneTag { get; set; }
#nullable restore
#else
        public string ZoneTag { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS"/> and sets the default values.
        /// </summary>
        public DnsCustomNameservers_CustomNS()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dns_records", n => { DnsRecords = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_dns_records>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_dns_records.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ns_name", n => { NsName = n.GetStringValue(); } },
                { "ns_set", n => { NsSet = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_status>(); } },
                { "zone_tag", n => { ZoneTag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_dns_records>("dns_records", DnsRecords);
            writer.WriteStringValue("ns_name", NsName);
            writer.WriteDoubleValue("ns_set", NsSet);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsCustomNameservers_CustomNS_status>("status", Status);
            writer.WriteStringValue("zone_tag", ZoneTag);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
