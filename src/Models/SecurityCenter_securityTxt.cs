// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SecurityCenter_securityTxt : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The acknowledgments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Acknowledgments { get; set; }
#nullable restore
#else
        public List<string> Acknowledgments { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The canonical property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Canonical { get; set; }
#nullable restore
#else
        public List<string> Canonical { get; set; }
#endif
        /// <summary>The contact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Contact { get; set; }
#nullable restore
#else
        public List<string> Contact { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The encryption property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Encryption { get; set; }
#nullable restore
#else
        public List<string> Encryption { get; set; }
#endif
        /// <summary>The expires property</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>The hiring property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Hiring { get; set; }
#nullable restore
#else
        public List<string> Hiring { get; set; }
#endif
        /// <summary>The policy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Policy { get; set; }
#nullable restore
#else
        public List<string> Policy { get; set; }
#endif
        /// <summary>The preferredLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredLanguages { get; set; }
#nullable restore
#else
        public string PreferredLanguages { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.SecurityCenter_securityTxt"/> and sets the default values.
        /// </summary>
        public SecurityCenter_securityTxt()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.SecurityCenter_securityTxt"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.SecurityCenter_securityTxt CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.SecurityCenter_securityTxt();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acknowledgments", n => { Acknowledgments = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "canonical", n => { Canonical = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contact", n => { Contact = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "encryption", n => { Encryption = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                { "hiring", n => { Hiring = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "policy", n => { Policy = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "preferredLanguages", n => { PreferredLanguages = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("acknowledgments", Acknowledgments);
            writer.WriteCollectionOfPrimitiveValues<string>("canonical", Canonical);
            writer.WriteCollectionOfPrimitiveValues<string>("contact", Contact);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteCollectionOfPrimitiveValues<string>("encryption", Encryption);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteCollectionOfPrimitiveValues<string>("hiring", Hiring);
            writer.WriteCollectionOfPrimitiveValues<string>("policy", Policy);
            writer.WriteStringValue("preferredLanguages", PreferredLanguages);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
