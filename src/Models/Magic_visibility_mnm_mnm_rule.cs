// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_visibility_mnm_mnm_rule : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.</summary>
        public bool? AutomaticAdvertisement { get; set; }
        /// <summary>The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.</summary>
        public double? BandwidthThreshold { get; set; }
        /// <summary>The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&quot;1m&quot;,&quot;5m&quot;,&quot;10m&quot;,&quot;15m&quot;,&quot;20m&quot;,&quot;30m&quot;,&quot;45m&quot;,&quot;60m&quot;].</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_duration? Duration { get; set; }
        /// <summary>The id of the rule. Must be unique.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You canâ€™t have a space in the rule name. Max 256 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.</summary>
        public double? PacketThreshold { get; set; }
        /// <summary>The prefixes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Prefixes { get; set; }
#nullable restore
#else
        public List<string> Prefixes { get; set; }
#endif
        /// <summary>Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_prefix_match? PrefixMatch { get; set; }
        /// <summary>MNM rule type.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_type? Type { get; set; }
        /// <summary>Level of sensitivity set for zscore rules.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_sensitivity? ZscoreSensitivity { get; set; }
        /// <summary>Target of the zscore rule analysis.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_target? ZscoreTarget { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule"/> and sets the default values.
        /// </summary>
        public Magic_visibility_mnm_mnm_rule()
        {
            AdditionalData = new Dictionary<string, object>();
            Duration = global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_duration.Onem;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "automatic_advertisement", n => { AutomaticAdvertisement = n.GetBoolValue(); } },
                { "bandwidth_threshold", n => { BandwidthThreshold = n.GetDoubleValue(); } },
                { "duration", n => { Duration = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_duration>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "packet_threshold", n => { PacketThreshold = n.GetDoubleValue(); } },
                { "prefix_match", n => { PrefixMatch = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_prefix_match>(); } },
                { "prefixes", n => { Prefixes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_type>(); } },
                { "zscore_sensitivity", n => { ZscoreSensitivity = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_sensitivity>(); } },
                { "zscore_target", n => { ZscoreTarget = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_target>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("automatic_advertisement", AutomaticAdvertisement);
            writer.WriteDoubleValue("bandwidth_threshold", BandwidthThreshold);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_duration>("duration", Duration);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("packet_threshold", PacketThreshold);
            writer.WriteCollectionOfPrimitiveValues<string>("prefixes", Prefixes);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_prefix_match>("prefix_match", PrefixMatch);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_type>("type", Type);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_sensitivity>("zscore_sensitivity", ZscoreSensitivity);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_visibility_mnm_mnm_rule_zscore_target>("zscore_target", ZscoreTarget);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
