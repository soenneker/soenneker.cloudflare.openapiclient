// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Waf_managed_rules_schemas_group : global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_group, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Defines the available states for the rule group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode?>? AllowedModes { get; private set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode?> AllowedModes { get; private set; }
#endif
        /// <summary>Defines the state of the rules contained in the rule group. When `on`, the rules in the group are configurable/usable.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode? Mode { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_schemas_group"/> and sets the default values.
        /// </summary>
        public Waf_managed_rules_schemas_group() : base()
        {
            Mode = global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode.On;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_schemas_group"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_schemas_group CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_schemas_group();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowed_modes", n => { AllowedModes = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode>()?.AsList(); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Waf_managed_rules_mode>("mode", Mode);
        }
    }
}
#pragma warning restore CS0618
