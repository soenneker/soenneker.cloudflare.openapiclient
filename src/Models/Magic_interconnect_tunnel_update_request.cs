// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_interconnect_tunnel_update_request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An optional description of the interconnect.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_componentsSchemasDescription? Description { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_componentsSchemasDescription Description { get; set; }
#endif
        /// <summary>The configuration specific to GRE interconnects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_gre? Gre { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_gre Gre { get; set; }
#endif
        /// <summary>The health_check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_health_check_base? HealthCheck { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_health_check_base HealthCheck { get; set; }
#endif
        /// <summary>A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address? InterfaceAddress { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address InterfaceAddress { get; set; }
#endif
        /// <summary>The Maximum Transmission Unit (MTU) in bytes for the interconnect. The minimum value is 576.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasMtu? Mtu { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasMtu Mtu { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_tunnel_update_request"/> and sets the default values.
        /// </summary>
        public Magic_interconnect_tunnel_update_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_tunnel_update_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_tunnel_update_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_tunnel_update_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_componentsSchemasDescription>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_componentsSchemasDescription.CreateFromDiscriminatorValue); } },
                { "gre", n => { Gre = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_gre>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_gre.CreateFromDiscriminatorValue); } },
                { "health_check", n => { HealthCheck = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_health_check_base>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_health_check_base.CreateFromDiscriminatorValue); } },
                { "interface_address", n => { InterfaceAddress = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address.CreateFromDiscriminatorValue); } },
                { "mtu", n => { Mtu = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasMtu>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasMtu.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interconnect_componentsSchemasDescription>("description", Description);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_gre>("gre", Gre);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_health_check_base>("health_check", HealthCheck);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address>("interface_address", InterfaceAddress);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasMtu>("mtu", Mtu);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
