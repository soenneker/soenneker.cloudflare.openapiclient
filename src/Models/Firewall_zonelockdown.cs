// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Firewall_zonelockdown : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules>? Configurations { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules> Configurations { get; set; }
#endif
        /// <summary>The timestamp of when the rule was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_created_on? CreatedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_created_on CreatedOn { get; set; }
#endif
        /// <summary>An informative summary of the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasDescription? Description { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasDescription Description { get; set; }
#endif
        /// <summary>The unique identifier of the Zone Lockdown rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasId? Id { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasId Id { get; set; }
#endif
        /// <summary>The timestamp of when the rule was last modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_modified_on? ModifiedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_modified_on ModifiedOn { get; set; }
#endif
        /// <summary>When true, indicates that the rule is currently paused.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasPaused? Paused { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasPaused Paused { get; set; }
#endif
        /// <summary>The URLs to include in the rule definition. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Urls { get; set; }
#nullable restore
#else
        public List<string> Urls { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "configurations", n => { Configurations = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules.CreateFromDiscriminatorValue)?.AsList(); } },
                { "created_on", n => { CreatedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_created_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_created_on.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasDescription>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasDescription.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasId>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasId.CreateFromDiscriminatorValue); } },
                { "modified_on", n => { ModifiedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_modified_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_modified_on.CreateFromDiscriminatorValue); } },
                { "paused", n => { Paused = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasPaused>(global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasPaused.CreateFromDiscriminatorValue); } },
                { "urls", n => { Urls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules>("configurations", Configurations);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_created_on>("created_on", CreatedOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasDescription>("description", Description);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_lockdowns_componentsSchemasId>("id", Id);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_modified_on>("modified_on", ModifiedOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasPaused>("paused", Paused);
            writer.WriteCollectionOfPrimitiveValues<string>("urls", Urls);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasIp_configuration"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Rules : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration? FirewallSchemasCidrConfiguration { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration FirewallSchemasCidrConfiguration { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasIp_configuration"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasIp_configuration? FirewallSchemasIpConfiguration { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasIp_configuration FirewallSchemasIpConfiguration { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_zonelockdown.Rules();
                result.FirewallSchemasCidrConfiguration = new global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration();
                result.FirewallSchemasIpConfiguration = new global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasIp_configuration();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(FirewallSchemasCidrConfiguration != null || FirewallSchemasIpConfiguration != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(FirewallSchemasCidrConfiguration, FirewallSchemasIpConfiguration);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Firewall_schemasCidr_configuration>(null, FirewallSchemasCidrConfiguration, FirewallSchemasIpConfiguration);
            }
        }
    }
}
#pragma warning restore CS0618
