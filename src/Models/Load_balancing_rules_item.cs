// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A rule object containing conditions and overrides for this load balancer to evaluate.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Load_balancing_rules_item : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Condition { get; set; }
#nullable restore
#else
        public string Condition { get; set; }
#endif
        /// <summary>Disable this specific rule. It will no longer be evaluated by this load balancer.</summary>
        public bool? Disabled { get; set; }
        /// <summary>A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_fixed_response? FixedResponse { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_fixed_response FixedResponse { get; set; }
#endif
        /// <summary>Name of this rule. Only used for human readability.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A collection of overrides to apply to the load balancer when this rule&apos;s condition is true. All fields are optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_overrides? Overrides { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_overrides Overrides { get; set; }
#endif
        /// <summary>The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.</summary>
        public int? Priority { get; set; }
        /// <summary>If this rule&apos;s condition is true, this causes rule evaluation to stop after processing this rule.</summary>
        public bool? Terminates { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item"/> and sets the default values.
        /// </summary>
        public Load_balancing_rules_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "condition", n => { Condition = n.GetStringValue(); } },
                { "disabled", n => { Disabled = n.GetBoolValue(); } },
                { "fixed_response", n => { FixedResponse = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_fixed_response>(global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_fixed_response.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "overrides", n => { Overrides = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_overrides>(global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_overrides.CreateFromDiscriminatorValue); } },
                { "priority", n => { Priority = n.GetIntValue(); } },
                { "terminates", n => { Terminates = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("condition", Condition);
            writer.WriteBoolValue("disabled", Disabled);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_fixed_response>("fixed_response", FixedResponse);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_rules_item_overrides>("overrides", Overrides);
            writer.WriteIntValue("priority", Priority);
            writer.WriteBoolValue("terminates", Terminates);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
