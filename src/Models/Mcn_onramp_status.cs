// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Mcn_onramp_status : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apply_progress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_apply_progress? ApplyProgress { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_apply_progress ApplyProgress { get; set; }
#endif
        /// <summary>The lifecycle_errors property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status_lifecycle_errors? LifecycleErrors { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status_lifecycle_errors LifecycleErrors { get; set; }
#endif
        /// <summary>The lifecycle_state property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_lifecycle_state? LifecycleState { get; set; }
        /// <summary>The plan_progress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_plan_progress? PlanProgress { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_plan_progress PlanProgress { get; set; }
#endif
        /// <summary>The routes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Routes { get; set; }
#nullable restore
#else
        public List<Guid?> Routes { get; set; }
#endif
        /// <summary>The tunnels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Tunnels { get; set; }
#nullable restore
#else
        public List<Guid?> Tunnels { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status"/> and sets the default values.
        /// </summary>
        public Mcn_onramp_status()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apply_progress", n => { ApplyProgress = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_apply_progress>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_apply_progress.CreateFromDiscriminatorValue); } },
                { "lifecycle_errors", n => { LifecycleErrors = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status_lifecycle_errors>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status_lifecycle_errors.CreateFromDiscriminatorValue); } },
                { "lifecycle_state", n => { LifecycleState = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_lifecycle_state>(); } },
                { "plan_progress", n => { PlanProgress = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_plan_progress>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_plan_progress.CreateFromDiscriminatorValue); } },
                { "routes", n => { Routes = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "tunnels", n => { Tunnels = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_apply_progress>("apply_progress", ApplyProgress);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_status_lifecycle_errors>("lifecycle_errors", LifecycleErrors);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_onramp_lifecycle_state>("lifecycle_state", LifecycleState);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mcn_plan_progress>("plan_progress", PlanProgress);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("routes", Routes);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("tunnels", Tunnels);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
