// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Logpush_logpush_job : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the dataset. A list of supported datasets can be found on the [Developer Docs](https://developers.cloudflare.com/logs/reference/log-fields/).</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_dataset? Dataset { get; set; }
        /// <summary>Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationConf { get; set; }
#nullable restore
#else
        public string DestinationConf { get; set; }
#endif
        /// <summary>Flag that indicates if the job is enabled.</summary>
        public bool? Enabled { get; set; }
        /// <summary>If not null, the job is currently failing. Failures are usually repetitive (example: no permissions to write to destination bucket). Only the last failure is recorded. On successful execution of a job the error_message and last_error are set to null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage { get; set; }
#nullable restore
#else
        public string ErrorMessage { get; set; }
#endif
        /// <summary>This field is deprecated. Please use `max_upload_*` parameters instead. The frequency at which Cloudflare sends batches of logs to your destination. Setting frequency to high sends your logs in larger quantities of smaller files. Setting frequency to low sends logs in smaller quantities of larger files.</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_frequency? Frequency { get; set; }
        /// <summary>Unique id of the job.</summary>
        public int? Id { get; set; }
        /// <summary>The kind parameter (optional) is used to differentiate between Logpush and Edge Log Delivery jobs (when supported by the dataset).</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_kind? Kind { get; set; }
        /// <summary>Records the last time for which logs have been successfully pushed. If the last successful push was for logs range 2018-07-23T10:00:00Z to 2018-07-23T10:01:00Z then the value of this field will be 2018-07-23T10:01:00Z. If the job has never run or has just been enabled and hasn&apos;t run yet then the field will be empty.</summary>
        public DateTimeOffset? LastComplete { get; set; }
        /// <summary>Records the last time the job failed. If not null, the job is currently failing. If null, the job has either never failed or has run successfully at least once since last failure. See also the error_message field.</summary>
        public DateTimeOffset? LastError { get; set; }
        /// <summary>This field is deprecated. Use `output_options` instead. Configuration string. It specifies things like requested fields and timestamp formats. If migrating from the logpull api, copy the url (full url or just the query string) of your call here, and logpush will keep on making this call for you, setting start and end times appropriately.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogpullOptions { get; set; }
#nullable restore
#else
        public string LogpullOptions { get; set; }
#endif
        /// <summary>The maximum uncompressed file size of a batch of logs. This setting value must be between `5 MB` and `1 GB`, or `0` to disable it. Note that you cannot set a minimum file size; this means that log files may be much smaller than this batch size. This parameter is not available for jobs with `edge` as its kind.</summary>
        public int? MaxUploadBytes { get; set; }
        /// <summary>The maximum interval in seconds for log batches. This setting must be between 30 and 300 seconds (5 minutes), or `0` to disable it. Note that you cannot specify a minimum interval for log batches; this means that log files may be sent in shorter intervals than this. This parameter is only used for jobs with `edge` as its kind.</summary>
        public int? MaxUploadIntervalSeconds { get; set; }
        /// <summary>The maximum number of log lines per batch. This setting must be between 1000 and 1,000,000 lines, or `0` to disable it. Note that you cannot specify a minimum number of log lines per batch; this means that log files may contain many fewer lines than this. This parameter is not available for jobs with `edge` as its kind.</summary>
        public int? MaxUploadRecords { get; set; }
        /// <summary>Optional human readable job name. Not unique. Cloudflare suggests that you set this to a meaningful string, like the domain name, to make it easier to identify your job.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The structured replacement for `logpull_options`. When including this field, the `logpull_option` field will be ignored.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options? OutputOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options OutputOptions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_logpush_job"/> and sets the default values.
        /// </summary>
        public Logpush_logpush_job()
        {
            AdditionalData = new Dictionary<string, object>();
            Dataset = global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_dataset.Http_requests;
            Frequency = global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_frequency.High;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_logpush_job"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_logpush_job CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_logpush_job();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dataset", n => { Dataset = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_dataset>(); } },
                { "destination_conf", n => { DestinationConf = n.GetStringValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "error_message", n => { ErrorMessage = n.GetStringValue(); } },
                { "frequency", n => { Frequency = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_frequency>(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "kind", n => { Kind = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_kind>(); } },
                { "last_complete", n => { LastComplete = n.GetDateTimeOffsetValue(); } },
                { "last_error", n => { LastError = n.GetDateTimeOffsetValue(); } },
                { "logpull_options", n => { LogpullOptions = n.GetStringValue(); } },
                { "max_upload_bytes", n => { MaxUploadBytes = n.GetIntValue(); } },
                { "max_upload_interval_seconds", n => { MaxUploadIntervalSeconds = n.GetIntValue(); } },
                { "max_upload_records", n => { MaxUploadRecords = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "output_options", n => { OutputOptions = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options>(global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_dataset>("dataset", Dataset);
            writer.WriteStringValue("destination_conf", DestinationConf);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("error_message", ErrorMessage);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_frequency>("frequency", Frequency);
            writer.WriteIntValue("id", Id);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_kind>("kind", Kind);
            writer.WriteDateTimeOffsetValue("last_complete", LastComplete);
            writer.WriteDateTimeOffsetValue("last_error", LastError);
            writer.WriteStringValue("logpull_options", LogpullOptions);
            writer.WriteIntValue("max_upload_bytes", MaxUploadBytes);
            writer.WriteIntValue("max_upload_interval_seconds", MaxUploadIntervalSeconds);
            writer.WriteIntValue("max_upload_records", MaxUploadRecords);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options>("output_options", OutputOptions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
