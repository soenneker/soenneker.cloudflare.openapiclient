// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot Netdev
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Mconn_snapshot_netdev : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Connector identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectorId { get; set; }
#nullable restore
#else
        public string ConnectorId { get; set; }
#endif
        /// <summary>Name of the network device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Total bytes received</summary>
        public double? RecvBytes { get; set; }
        /// <summary>Compressed packets received</summary>
        public double? RecvCompressed { get; set; }
        /// <summary>Packets dropped</summary>
        public double? RecvDrop { get; set; }
        /// <summary>Bad packets received</summary>
        public double? RecvErrs { get; set; }
        /// <summary>FIFO overruns</summary>
        public double? RecvFifo { get; set; }
        /// <summary>Frame alignment errors</summary>
        public double? RecvFrame { get; set; }
        /// <summary>Multicast packets received</summary>
        public double? RecvMulticast { get; set; }
        /// <summary>Total packets received</summary>
        public double? RecvPackets { get; set; }
        /// <summary>Total bytes transmitted</summary>
        public double? SentBytes { get; set; }
        /// <summary>Number of packets not sent due to carrier errors</summary>
        public double? SentCarrier { get; set; }
        /// <summary>Number of collisions</summary>
        public double? SentColls { get; set; }
        /// <summary>Number of compressed packets transmitted</summary>
        public double? SentCompressed { get; set; }
        /// <summary>Number of packets dropped during transmission</summary>
        public double? SentDrop { get; set; }
        /// <summary>Number of transmission errors</summary>
        public double? SentErrs { get; set; }
        /// <summary>FIFO overruns</summary>
        public double? SentFifo { get; set; }
        /// <summary>Total packets transmitted</summary>
        public double? SentPackets { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev"/> and sets the default values.
        /// </summary>
        public Mconn_snapshot_netdev()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "connector_id", n => { ConnectorId = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "recv_bytes", n => { RecvBytes = n.GetDoubleValue(); } },
                { "recv_compressed", n => { RecvCompressed = n.GetDoubleValue(); } },
                { "recv_drop", n => { RecvDrop = n.GetDoubleValue(); } },
                { "recv_errs", n => { RecvErrs = n.GetDoubleValue(); } },
                { "recv_fifo", n => { RecvFifo = n.GetDoubleValue(); } },
                { "recv_frame", n => { RecvFrame = n.GetDoubleValue(); } },
                { "recv_multicast", n => { RecvMulticast = n.GetDoubleValue(); } },
                { "recv_packets", n => { RecvPackets = n.GetDoubleValue(); } },
                { "sent_bytes", n => { SentBytes = n.GetDoubleValue(); } },
                { "sent_carrier", n => { SentCarrier = n.GetDoubleValue(); } },
                { "sent_colls", n => { SentColls = n.GetDoubleValue(); } },
                { "sent_compressed", n => { SentCompressed = n.GetDoubleValue(); } },
                { "sent_drop", n => { SentDrop = n.GetDoubleValue(); } },
                { "sent_errs", n => { SentErrs = n.GetDoubleValue(); } },
                { "sent_fifo", n => { SentFifo = n.GetDoubleValue(); } },
                { "sent_packets", n => { SentPackets = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("connector_id", ConnectorId);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("recv_bytes", RecvBytes);
            writer.WriteDoubleValue("recv_compressed", RecvCompressed);
            writer.WriteDoubleValue("recv_drop", RecvDrop);
            writer.WriteDoubleValue("recv_errs", RecvErrs);
            writer.WriteDoubleValue("recv_fifo", RecvFifo);
            writer.WriteDoubleValue("recv_frame", RecvFrame);
            writer.WriteDoubleValue("recv_multicast", RecvMulticast);
            writer.WriteDoubleValue("recv_packets", RecvPackets);
            writer.WriteDoubleValue("sent_bytes", SentBytes);
            writer.WriteDoubleValue("sent_carrier", SentCarrier);
            writer.WriteDoubleValue("sent_colls", SentColls);
            writer.WriteDoubleValue("sent_compressed", SentCompressed);
            writer.WriteDoubleValue("sent_drop", SentDrop);
            writer.WriteDoubleValue("sent_errs", SentErrs);
            writer.WriteDoubleValue("sent_fifo", SentFifo);
            writer.WriteDoubleValue("sent_packets", SentPackets);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
