// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Parameters specific to an HTTP or HTTPS health check.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Healthchecks_http_config : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Do not validate the certificate when the health check uses HTTPS.</summary>
        public bool? AllowInsecure { get; set; }
        /// <summary>A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpectedBody { get; set; }
#nullable restore
#else
        public string ExpectedBody { get; set; }
#endif
        /// <summary>The expected HTTP response codes (e.g. &quot;200&quot;) or code ranges (e.g. &quot;2xx&quot; for all codes starting with 2) of the health check.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ExpectedCodes { get; set; }
#nullable restore
#else
        public List<string> ExpectedCodes { get; set; }
#endif
        /// <summary>Follow redirects if the origin returns a 3xx status code.</summary>
        public bool? FollowRedirects { get; set; }
        /// <summary>The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_header? Header { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_header Header { get; set; }
#endif
        /// <summary>The HTTP method to use for the health check.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_method? Method { get; set; }
        /// <summary>The endpoint path to health check against.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.</summary>
        public int? Port { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config"/> and sets the default values.
        /// </summary>
        public Healthchecks_http_config()
        {
            AdditionalData = new Dictionary<string, object>();
            Method = global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_method.GET;
            Path = "/";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_insecure", n => { AllowInsecure = n.GetBoolValue(); } },
                { "expected_body", n => { ExpectedBody = n.GetStringValue(); } },
                { "expected_codes", n => { ExpectedCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "follow_redirects", n => { FollowRedirects = n.GetBoolValue(); } },
                { "header", n => { Header = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_header>(global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_header.CreateFromDiscriminatorValue); } },
                { "method", n => { Method = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_method>(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_insecure", AllowInsecure);
            writer.WriteStringValue("expected_body", ExpectedBody);
            writer.WriteCollectionOfPrimitiveValues<string>("expected_codes", ExpectedCodes);
            writer.WriteBoolValue("follow_redirects", FollowRedirects);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_header>("header", Header);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Healthchecks_http_config_method>("method", Method);
            writer.WriteStringValue("path", Path);
            writer.WriteIntValue("port", Port);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
