// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Get_EventListGet_200 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountId property</summary>
        public double? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attacker property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Attacker { get; set; }
#nullable restore
#else
        public string Attacker { get; set; }
#endif
        /// <summary>The attackerCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttackerCountry { get; set; }
#nullable restore
#else
        public string AttackerCountry { get; set; }
#endif
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The categoryId property</summary>
        public double? CategoryId { get; set; }
        /// <summary>The date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>The event property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Event { get; set; }
#nullable restore
#else
        public string Event { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The indicator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Indicator { get; set; }
#nullable restore
#else
        public string Indicator { get; set; }
#endif
        /// <summary>The indicatorType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IndicatorType { get; set; }
#nullable restore
#else
        public string IndicatorType { get; set; }
#endif
        /// <summary>The indicatorTypeId property</summary>
        public double? IndicatorTypeId { get; set; }
        /// <summary>The insight property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Insight { get; set; }
#nullable restore
#else
        public string Insight { get; set; }
#endif
        /// <summary>The killChain property</summary>
        public double? KillChain { get; set; }
        /// <summary>The mitreAttack property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MitreAttack { get; set; }
#nullable restore
#else
        public List<string> MitreAttack { get; set; }
#endif
        /// <summary>The numReferenced property</summary>
        public double? NumReferenced { get; set; }
        /// <summary>The numReferences property</summary>
        public double? NumReferences { get; set; }
        /// <summary>The rawId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawId { get; set; }
#nullable restore
#else
        public string RawId { get; set; }
#endif
        /// <summary>The referenced property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Referenced { get; set; }
#nullable restore
#else
        public List<string> Referenced { get; set; }
#endif
        /// <summary>The referencedIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? ReferencedIds { get; set; }
#nullable restore
#else
        public List<double?> ReferencedIds { get; set; }
#endif
        /// <summary>The references property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? References { get; set; }
#nullable restore
#else
        public List<string> References { get; set; }
#endif
        /// <summary>The referencesIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? ReferencesIds { get; set; }
#nullable restore
#else
        public List<double?> ReferencesIds { get; set; }
#endif
        /// <summary>The releasabilityId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleasabilityId { get; set; }
#nullable restore
#else
        public string ReleasabilityId { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The targetCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetCountry { get; set; }
#nullable restore
#else
        public string TargetCountry { get; set; }
#endif
        /// <summary>The targetIndustry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetIndustry { get; set; }
#nullable restore
#else
        public string TargetIndustry { get; set; }
#endif
        /// <summary>The tlp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tlp { get; set; }
#nullable restore
#else
        public string Tlp { get; set; }
#endif
        /// <summary>The uuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Get_EventListGet_200"/> and sets the default values.
        /// </summary>
        public Get_EventListGet_200()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Get_EventListGet_200"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Get_EventListGet_200 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Get_EventListGet_200();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetDoubleValue(); } },
                { "attacker", n => { Attacker = n.GetStringValue(); } },
                { "attackerCountry", n => { AttackerCountry = n.GetStringValue(); } },
                { "category", n => { Category = n.GetStringValue(); } },
                { "categoryId", n => { CategoryId = n.GetDoubleValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "event", n => { Event = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "indicator", n => { Indicator = n.GetStringValue(); } },
                { "indicatorType", n => { IndicatorType = n.GetStringValue(); } },
                { "indicatorTypeId", n => { IndicatorTypeId = n.GetDoubleValue(); } },
                { "insight", n => { Insight = n.GetStringValue(); } },
                { "killChain", n => { KillChain = n.GetDoubleValue(); } },
                { "mitreAttack", n => { MitreAttack = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "numReferenced", n => { NumReferenced = n.GetDoubleValue(); } },
                { "numReferences", n => { NumReferences = n.GetDoubleValue(); } },
                { "rawId", n => { RawId = n.GetStringValue(); } },
                { "referenced", n => { Referenced = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "referencedIds", n => { ReferencedIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "references", n => { References = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "referencesIds", n => { ReferencesIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "releasabilityId", n => { ReleasabilityId = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "targetCountry", n => { TargetCountry = n.GetStringValue(); } },
                { "targetIndustry", n => { TargetIndustry = n.GetStringValue(); } },
                { "tlp", n => { Tlp = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("accountId", AccountId);
            writer.WriteStringValue("attacker", Attacker);
            writer.WriteStringValue("attackerCountry", AttackerCountry);
            writer.WriteStringValue("category", Category);
            writer.WriteDoubleValue("categoryId", CategoryId);
            writer.WriteStringValue("date", Date);
            writer.WriteStringValue("event", Event);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("indicator", Indicator);
            writer.WriteStringValue("indicatorType", IndicatorType);
            writer.WriteDoubleValue("indicatorTypeId", IndicatorTypeId);
            writer.WriteStringValue("insight", Insight);
            writer.WriteDoubleValue("killChain", KillChain);
            writer.WriteCollectionOfPrimitiveValues<string>("mitreAttack", MitreAttack);
            writer.WriteDoubleValue("numReferenced", NumReferenced);
            writer.WriteDoubleValue("numReferences", NumReferences);
            writer.WriteStringValue("rawId", RawId);
            writer.WriteCollectionOfPrimitiveValues<string>("referenced", Referenced);
            writer.WriteCollectionOfPrimitiveValues<double?>("referencedIds", ReferencedIds);
            writer.WriteCollectionOfPrimitiveValues<string>("references", References);
            writer.WriteCollectionOfPrimitiveValues<double?>("referencesIds", ReferencesIds);
            writer.WriteStringValue("releasabilityId", ReleasabilityId);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("targetCountry", TargetCountry);
            writer.WriteStringValue("targetIndustry", TargetIndustry);
            writer.WriteStringValue("tlp", Tlp);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
