// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Components of the zone&apos;s SOA record.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DnsSettings_soa : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.</summary>
        public double? Expire { get; set; }
        /// <summary>The time to live (TTL) for negative caching of records within the zone.</summary>
        public double? MinTtl { get; set; }
        /// <summary>The primary nameserver, which may be used for outbound zone transfers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mname { get; set; }
#nullable restore
#else
        public string Mname { get; set; }
#endif
        /// <summary>Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.</summary>
        public double? Refresh { get; set; }
        /// <summary>Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.</summary>
        public double? Retry { get; set; }
        /// <summary>The email address of the zone administrator, with the first label representing the local part of the email address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rname { get; set; }
#nullable restore
#else
        public string Rname { get; set; }
#endif
        /// <summary>The time to live (TTL) of the SOA record itself.</summary>
        public double? Ttl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa"/> and sets the default values.
        /// </summary>
        public DnsSettings_soa()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DnsSettings_soa();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "expire", n => { Expire = n.GetDoubleValue(); } },
                { "min_ttl", n => { MinTtl = n.GetDoubleValue(); } },
                { "mname", n => { Mname = n.GetStringValue(); } },
                { "refresh", n => { Refresh = n.GetDoubleValue(); } },
                { "retry", n => { Retry = n.GetDoubleValue(); } },
                { "rname", n => { Rname = n.GetStringValue(); } },
                { "ttl", n => { Ttl = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("expire", Expire);
            writer.WriteDoubleValue("min_ttl", MinTtl);
            writer.WriteStringValue("mname", Mname);
            writer.WriteDoubleValue("refresh", Refresh);
            writer.WriteDoubleValue("retry", Retry);
            writer.WriteStringValue("rname", Rname);
            writer.WriteDoubleValue("ttl", Ttl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
