// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Intel_miscategorization : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Content category IDs to add.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ContentAdds { get; set; }
#nullable restore
#else
        public List<int?> ContentAdds { get; set; }
#endif
        /// <summary>Content category IDs to remove.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ContentRemoves { get; set; }
#nullable restore
#else
        public List<int?> ContentRemoves { get; set; }
#endif
        /// <summary>The indicator_type property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization_indicator_type? IndicatorType { get; set; }
        /// <summary>Provide only if indicator_type is `ipv4` or `ipv6`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip { get; set; }
#nullable restore
#else
        public string Ip { get; set; }
#endif
        /// <summary>Security category IDs to add.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SecurityAdds { get; set; }
#nullable restore
#else
        public List<int?> SecurityAdds { get; set; }
#endif
        /// <summary>Security category IDs to remove.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SecurityRemoves { get; set; }
#nullable restore
#else
        public List<int?> SecurityRemoves { get; set; }
#endif
        /// <summary>Provide only if indicator_type is `domain` or `url`. Example if indicator_type is `domain`: `example.com`. Example if indicator_type is `url`: `https://example.com/news/`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization"/> and sets the default values.
        /// </summary>
        public Intel_miscategorization()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "content_adds", n => { ContentAdds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "content_removes", n => { ContentRemoves = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "indicator_type", n => { IndicatorType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization_indicator_type>(); } },
                { "ip", n => { Ip = n.GetStringValue(); } },
                { "security_adds", n => { SecurityAdds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "security_removes", n => { SecurityRemoves = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("content_adds", ContentAdds);
            writer.WriteCollectionOfPrimitiveValues<int?>("content_removes", ContentRemoves);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Intel_miscategorization_indicator_type>("indicator_type", IndicatorType);
            writer.WriteStringValue("ip", Ip);
            writer.WriteCollectionOfPrimitiveValues<int?>("security_adds", SecurityAdds);
            writer.WriteCollectionOfPrimitiveValues<int?>("security_removes", SecurityRemoves);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
