// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Zones_zone : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account the zone belongs to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_account? Account { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_account Account { get; set; }
#endif
        /// <summary>The last time proof of ownership was detected and the zone was madeactive.</summary>
        public DateTimeOffset? ActivatedOn { get; private set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Allows the customer to use a custom apex.*Tenants Only Configuration*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CnameSuffix { get; set; }
#nullable restore
#else
        public string CnameSuffix { get; set; }
#endif
        /// <summary>When the zone was created.</summary>
        public DateTimeOffset? CreatedOn { get; private set; }
        /// <summary>The interval (in seconds) from when development mode expires(positive integer) or last expired (negative integer) for thedomain. If development mode has never been enabled, this value is 0.</summary>
        public double? DevelopmentMode { get; private set; }
        /// <summary>Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Metadata about the zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta Meta { get; set; }
#endif
        /// <summary>When the zone was last modified.</summary>
        public DateTimeOffset? ModifiedOn { get; private set; }
        /// <summary>The domain name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The name servers Cloudflare assigns to a zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NameServers { get; private set; }
#nullable restore
#else
        public List<string> NameServers { get; private set; }
#endif
        /// <summary>DNS host at the time of switching to Cloudflare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalDnshost { get; private set; }
#nullable restore
#else
        public string OriginalDnshost { get; private set; }
#endif
        /// <summary>Original name servers before moving to Cloudflare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginalNameServers { get; private set; }
#nullable restore
#else
        public List<string> OriginalNameServers { get; private set; }
#endif
        /// <summary>Registrar for the domain at the time of switching to Cloudflare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalRegistrar { get; private set; }
#nullable restore
#else
        public string OriginalRegistrar { get; private set; }
#endif
        /// <summary>The owner of the zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_owner? Owner { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_owner Owner { get; set; }
#endif
        /// <summary>Indicates whether the zone is only using Cloudflare DNS services. Atrue value means the zone will not receive security or performancebenefits.</summary>
        public bool? Paused { get; set; }
        /// <summary>Legacy permissions based on legacy user membership information.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Permissions { get; set; }
#nullable restore
#else
        public List<string> Permissions { get; set; }
#endif
        /// <summary>A Zones subscription information.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan? Plan { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan Plan { get; set; }
#endif
        /// <summary>The zone status on Cloudflare.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_status? Status { get; private set; }
        /// <summary>The root organizational unit that this zone belongs to (such as a tenant or organization).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant? Tenant { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant Tenant { get; set; }
#endif
        /// <summary>The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant_unit? TenantUnit { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant_unit TenantUnit { get; set; }
#endif
        /// <summary>A full zone implies that DNS is hosted with Cloudflare. A partial zone istypically a partner-hosted zone or a CNAME setup.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_type? Type { get; set; }
        /// <summary>An array of domains used for custom name servers. This is only available for Business and Enterprise plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VanityNameServers { get; set; }
#nullable restore
#else
        public List<string> VanityNameServers { get; set; }
#endif
        /// <summary>Verification key for partial zone setup.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationKey { get; private set; }
#nullable restore
#else
        public string VerificationKey { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone"/> and sets the default values.
        /// </summary>
        public Zones_zone()
        {
            AdditionalData = new Dictionary<string, object>();
            Type = global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_type.Full;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_account>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_account.CreateFromDiscriminatorValue); } },
                { "activated_on", n => { ActivatedOn = n.GetDateTimeOffsetValue(); } },
                { "cname_suffix", n => { CnameSuffix = n.GetStringValue(); } },
                { "created_on", n => { CreatedOn = n.GetDateTimeOffsetValue(); } },
                { "development_mode", n => { DevelopmentMode = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta.CreateFromDiscriminatorValue); } },
                { "modified_on", n => { ModifiedOn = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "name_servers", n => { NameServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "original_dnshost", n => { OriginalDnshost = n.GetStringValue(); } },
                { "original_name_servers", n => { OriginalNameServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "original_registrar", n => { OriginalRegistrar = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_owner>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_owner.CreateFromDiscriminatorValue); } },
                { "paused", n => { Paused = n.GetBoolValue(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "plan", n => { Plan = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_status>(); } },
                { "tenant", n => { Tenant = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant.CreateFromDiscriminatorValue); } },
                { "tenant_unit", n => { TenantUnit = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant_unit>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant_unit.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_type>(); } },
                { "vanity_name_servers", n => { VanityNameServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "verification_key", n => { VerificationKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_account>("account", Account);
            writer.WriteStringValue("cname_suffix", CnameSuffix);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta>("meta", Meta);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_owner>("owner", Owner);
            writer.WriteBoolValue("paused", Paused);
            writer.WriteCollectionOfPrimitiveValues<string>("permissions", Permissions);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_plan>("plan", Plan);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant>("tenant", Tenant);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_tenant_unit>("tenant_unit", TenantUnit);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_type>("type", Type);
            writer.WriteCollectionOfPrimitiveValues<string>("vanity_name_servers", VanityNameServers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
