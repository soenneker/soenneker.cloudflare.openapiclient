// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Realtimekit_UpdatePreset_permissions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether this participant can accept waiting requests</summary>
        public bool? AcceptWaitingRequests { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The can_accept_production_requests property</summary>
        public bool? CanAcceptProductionRequests { get; set; }
        /// <summary>The can_change_participant_permissions property</summary>
        public bool? CanChangeParticipantPermissions { get; set; }
        /// <summary>The can_edit_display_name property</summary>
        public bool? CanEditDisplayName { get; set; }
        /// <summary>The can_livestream property</summary>
        public bool? CanLivestream { get; set; }
        /// <summary>The can_record property</summary>
        public bool? CanRecord { get; set; }
        /// <summary>The can_spotlight property</summary>
        public bool? CanSpotlight { get; set; }
        /// <summary>Chat permissions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_chat? Chat { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_chat Chat { get; set; }
#endif
        /// <summary>The connected_meetings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_connected_meetings? ConnectedMeetings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_connected_meetings ConnectedMeetings { get; set; }
#endif
        /// <summary>The disable_participant_audio property</summary>
        public bool? DisableParticipantAudio { get; set; }
        /// <summary>The disable_participant_screensharing property</summary>
        public bool? DisableParticipantScreensharing { get; set; }
        /// <summary>The disable_participant_video property</summary>
        public bool? DisableParticipantVideo { get; set; }
        /// <summary>Whether this participant is visible to others or not</summary>
        public bool? HiddenParticipant { get; set; }
        /// <summary>The is_recorder property</summary>
        public bool? IsRecorder { get; set; }
        /// <summary>The kick_participant property</summary>
        public bool? KickParticipant { get; set; }
        /// <summary>Media permissions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_media? Media { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_media Media { get; set; }
#endif
        /// <summary>The pin_participant property</summary>
        public bool? PinParticipant { get; set; }
        /// <summary>Plugin permissions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_plugins? Plugins { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_plugins Plugins { get; set; }
#endif
        /// <summary>Poll permissions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_polls? Polls { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_polls Polls { get; set; }
#endif
        /// <summary>Type of the recording peer</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_recorder_type? RecorderType { get; set; }
        /// <summary>The show_participant_list property</summary>
        public bool? ShowParticipantList { get; set; }
        /// <summary>Waiting room type</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_waiting_room_type? WaitingRoomType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions"/> and sets the default values.
        /// </summary>
        public Realtimekit_UpdatePreset_permissions()
        {
            AdditionalData = new Dictionary<string, object>();
            RecorderType = global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_recorder_type.NONE;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accept_waiting_requests", n => { AcceptWaitingRequests = n.GetBoolValue(); } },
                { "can_accept_production_requests", n => { CanAcceptProductionRequests = n.GetBoolValue(); } },
                { "can_change_participant_permissions", n => { CanChangeParticipantPermissions = n.GetBoolValue(); } },
                { "can_edit_display_name", n => { CanEditDisplayName = n.GetBoolValue(); } },
                { "can_livestream", n => { CanLivestream = n.GetBoolValue(); } },
                { "can_record", n => { CanRecord = n.GetBoolValue(); } },
                { "can_spotlight", n => { CanSpotlight = n.GetBoolValue(); } },
                { "chat", n => { Chat = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_chat>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_chat.CreateFromDiscriminatorValue); } },
                { "connected_meetings", n => { ConnectedMeetings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_connected_meetings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_connected_meetings.CreateFromDiscriminatorValue); } },
                { "disable_participant_audio", n => { DisableParticipantAudio = n.GetBoolValue(); } },
                { "disable_participant_screensharing", n => { DisableParticipantScreensharing = n.GetBoolValue(); } },
                { "disable_participant_video", n => { DisableParticipantVideo = n.GetBoolValue(); } },
                { "hidden_participant", n => { HiddenParticipant = n.GetBoolValue(); } },
                { "is_recorder", n => { IsRecorder = n.GetBoolValue(); } },
                { "kick_participant", n => { KickParticipant = n.GetBoolValue(); } },
                { "media", n => { Media = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_media>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_media.CreateFromDiscriminatorValue); } },
                { "pin_participant", n => { PinParticipant = n.GetBoolValue(); } },
                { "plugins", n => { Plugins = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_plugins>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_plugins.CreateFromDiscriminatorValue); } },
                { "polls", n => { Polls = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_polls>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_polls.CreateFromDiscriminatorValue); } },
                { "recorder_type", n => { RecorderType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_recorder_type>(); } },
                { "show_participant_list", n => { ShowParticipantList = n.GetBoolValue(); } },
                { "waiting_room_type", n => { WaitingRoomType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_waiting_room_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accept_waiting_requests", AcceptWaitingRequests);
            writer.WriteBoolValue("can_accept_production_requests", CanAcceptProductionRequests);
            writer.WriteBoolValue("can_change_participant_permissions", CanChangeParticipantPermissions);
            writer.WriteBoolValue("can_edit_display_name", CanEditDisplayName);
            writer.WriteBoolValue("can_livestream", CanLivestream);
            writer.WriteBoolValue("can_record", CanRecord);
            writer.WriteBoolValue("can_spotlight", CanSpotlight);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_chat>("chat", Chat);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_connected_meetings>("connected_meetings", ConnectedMeetings);
            writer.WriteBoolValue("disable_participant_audio", DisableParticipantAudio);
            writer.WriteBoolValue("disable_participant_screensharing", DisableParticipantScreensharing);
            writer.WriteBoolValue("disable_participant_video", DisableParticipantVideo);
            writer.WriteBoolValue("hidden_participant", HiddenParticipant);
            writer.WriteBoolValue("is_recorder", IsRecorder);
            writer.WriteBoolValue("kick_participant", KickParticipant);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_media>("media", Media);
            writer.WriteBoolValue("pin_participant", PinParticipant);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_plugins>("plugins", Plugins);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_polls>("polls", Polls);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_recorder_type>("recorder_type", RecorderType);
            writer.WriteBoolValue("show_participant_list", ShowParticipantList);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_UpdatePreset_permissions_waiting_room_type>("waiting_room_type", WaitingRoomType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
