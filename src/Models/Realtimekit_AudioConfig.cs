// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Object containing configuration regarding the audio that is being recorded.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Realtimekit_AudioConfig : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Audio signal pathway within an audio file that carries a specific sound source.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_channel? Channel { get; set; }
        /// <summary>Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_codec? Codec { get; set; }
        /// <summary>Controls whether to export audio file seperately</summary>
        public bool? ExportFile { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig"/> and sets the default values.
        /// </summary>
        public Realtimekit_AudioConfig()
        {
            AdditionalData = new Dictionary<string, object>();
            Channel = global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_channel.Stereo;
            Codec = global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_codec.AAC;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channel", n => { Channel = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_channel>(); } },
                { "codec", n => { Codec = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_codec>(); } },
                { "export_file", n => { ExportFile = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_channel>("channel", Channel);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_AudioConfig_codec>("codec", Codec);
            writer.WriteBoolValue("export_file", ExportFile);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
