// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Zones_0_patch : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether the zone is only using Cloudflare DNS services. Atrue value means the zone will not receive security or performancebenefits.</summary>
        public bool? Paused { get; set; }
        /// <summary>(Deprecated) Please use the `/zones/{zone_id}/subscription` APIto update a zone&apos;s plan. Changing this value will create/cancelassociated subscriptions. To view available plans for this zone,see Zone Plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_plan? Plan { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_plan Plan { get; set; }
#endif
        /// <summary>A full zone implies that DNS is hosted with Cloudflare. A partialzone is typically a partner-hosted zone or a CNAME setup. Thisparameter is only available to Enterprise customers or if it hasbeen explicitly enabled on a zone.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_type? Type { get; set; }
        /// <summary>An array of domains used for custom name servers. This is onlyavailable for Business and Enterprise plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VanityNameServers { get; set; }
#nullable restore
#else
        public List<string> VanityNameServers { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch"/> and sets the default values.
        /// </summary>
        public Zones_0_patch()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "paused", n => { Paused = n.GetBoolValue(); } },
                { "plan", n => { Plan = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_plan>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_plan.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_type>(); } },
                { "vanity_name_servers", n => { VanityNameServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("paused", Paused);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_plan>("plan", Plan);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_type>("type", Type);
            writer.WriteCollectionOfPrimitiveValues<string>("vanity_name_servers", VanityNameServers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
