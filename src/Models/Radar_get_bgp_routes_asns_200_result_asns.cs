// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Radar_get_bgp_routes_asns_200_result_asns : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The asn property</summary>
        public int? Asn { get; set; }
        /// <summary>AS&apos;s customer cone size.</summary>
        public int? ConeSize { get; set; }
        /// <summary>Alpha-2 code for the AS&apos;s registration country.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Number of IPv4 addresses originated by the AS.</summary>
        public int? Ipv4Count { get; set; }
        /// <summary>Number of IPv6 addresses originated by the AS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ipv6Count { get; set; }
#nullable restore
#else
        public string Ipv6Count { get; set; }
#endif
        /// <summary>Name of the AS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Number of total IP prefixes originated by the AS.</summary>
        public int? PfxsCount { get; set; }
        /// <summary>Number of RPKI invalid prefixes originated by the AS.</summary>
        public int? RpkiInvalid { get; set; }
        /// <summary>Number of RPKI unknown prefixes originated by the AS.</summary>
        public int? RpkiUnknown { get; set; }
        /// <summary>Number of RPKI valid prefixes originated by the AS.</summary>
        public int? RpkiValid { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_routes_asns_200_result_asns"/> and sets the default values.
        /// </summary>
        public Radar_get_bgp_routes_asns_200_result_asns()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_routes_asns_200_result_asns"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_routes_asns_200_result_asns CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_routes_asns_200_result_asns();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "asn", n => { Asn = n.GetIntValue(); } },
                { "coneSize", n => { ConeSize = n.GetIntValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "ipv4Count", n => { Ipv4Count = n.GetIntValue(); } },
                { "ipv6Count", n => { Ipv6Count = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "pfxsCount", n => { PfxsCount = n.GetIntValue(); } },
                { "rpkiInvalid", n => { RpkiInvalid = n.GetIntValue(); } },
                { "rpkiUnknown", n => { RpkiUnknown = n.GetIntValue(); } },
                { "rpkiValid", n => { RpkiValid = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("asn", Asn);
            writer.WriteIntValue("coneSize", ConeSize);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("ipv4Count", Ipv4Count);
            writer.WriteStringValue("ipv6Count", Ipv6Count);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("pfxsCount", PfxsCount);
            writer.WriteIntValue("rpkiInvalid", RpkiInvalid);
            writer.WriteIntValue("rpkiUnknown", RpkiUnknown);
            writer.WriteIntValue("rpkiValid", RpkiValid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
