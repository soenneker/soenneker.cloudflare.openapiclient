// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// A Turnstile widget&apos;s detailed configuration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Turnstile_widget_detail : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If bot_fight_mode is set to `true`, Cloudflare issues computationallyexpensive challenges in response to malicious bots (ENT only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_bot_fight_mode? BotFightMode { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_bot_fight_mode BotFightMode { get; set; }
#endif
        /// <summary>If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,this setting can determine the clearance level to be set</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_clearance_level? ClearanceLevel { get; set; }
        /// <summary>When the widget was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_created_on? CreatedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_created_on CreatedOn { get; set; }
#endif
        /// <summary>The domains property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Domains { get; set; }
#nullable restore
#else
        public List<string> Domains { get; set; }
#endif
        /// <summary>Return the Ephemeral ID in /siteverify (ENT only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_ephemeral_id? EphemeralId { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_ephemeral_id EphemeralId { get; set; }
#endif
        /// <summary>Widget Mode</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_mode? Mode { get; set; }
        /// <summary>When the widget was modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_modified_on? ModifiedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_modified_on ModifiedOn { get; set; }
#endif
        /// <summary>Human readable widget name. Not unique. Cloudflare suggests that youset this to a meaningful string to make it easier to identify yourwidget, and where it is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_name? Name { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_name Name { get; set; }
#endif
        /// <summary>Do not show any Cloudflare branding on the widget (ENT only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_offlabel? Offlabel { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_offlabel Offlabel { get; set; }
#endif
        /// <summary>Region where this widget can be used. This cannot be changed after creation.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_region? Region { get; set; }
        /// <summary>Secret key for this widget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_secret? Secret { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_secret Secret { get; set; }
#endif
        /// <summary>Widget item identifier tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_sitekey? Sitekey { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_sitekey Sitekey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_detail"/> and sets the default values.
        /// </summary>
        public Turnstile_widget_detail()
        {
            AdditionalData = new Dictionary<string, object>();
            Region = global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_region.World;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_detail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_detail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_detail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bot_fight_mode", n => { BotFightMode = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_bot_fight_mode>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_bot_fight_mode.CreateFromDiscriminatorValue); } },
                { "clearance_level", n => { ClearanceLevel = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_clearance_level>(); } },
                { "created_on", n => { CreatedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_created_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_created_on.CreateFromDiscriminatorValue); } },
                { "domains", n => { Domains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ephemeral_id", n => { EphemeralId = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_ephemeral_id>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_ephemeral_id.CreateFromDiscriminatorValue); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_mode>(); } },
                { "modified_on", n => { ModifiedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_modified_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_modified_on.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_name>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_name.CreateFromDiscriminatorValue); } },
                { "offlabel", n => { Offlabel = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_offlabel>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_offlabel.CreateFromDiscriminatorValue); } },
                { "region", n => { Region = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_region>(); } },
                { "secret", n => { Secret = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_secret>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_secret.CreateFromDiscriminatorValue); } },
                { "sitekey", n => { Sitekey = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_sitekey>(global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_sitekey.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_bot_fight_mode>("bot_fight_mode", BotFightMode);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_clearance_level>("clearance_level", ClearanceLevel);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_created_on>("created_on", CreatedOn);
            writer.WriteCollectionOfPrimitiveValues<string>("domains", Domains);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_ephemeral_id>("ephemeral_id", EphemeralId);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_widget_mode>("mode", Mode);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_modified_on>("modified_on", ModifiedOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_name>("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_offlabel>("offlabel", Offlabel);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_region>("region", Region);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_secret>("secret", Secret);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Turnstile_sitekey>("sitekey", Sitekey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
