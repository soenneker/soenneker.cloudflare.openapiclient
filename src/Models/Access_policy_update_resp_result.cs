// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Access_policy_update_resp_result : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The percent_approved property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentApproved { get; set; }
#nullable restore
#else
        public string PercentApproved { get; set; }
#endif
        /// <summary>The percent_blocked property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentBlocked { get; set; }
#nullable restore
#else
        public string PercentBlocked { get; set; }
#endif
        /// <summary>The percent_errored property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentErrored { get; set; }
#nullable restore
#else
        public string PercentErrored { get; set; }
#endif
        /// <summary>The percent_users_processed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentUsersProcessed { get; set; }
#nullable restore
#else
        public string PercentUsersProcessed { get; set; }
#endif
        /// <summary>The status of the policy test.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The total_users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalUsers { get; set; }
#nullable restore
#else
        public string TotalUsers { get; set; }
#endif
        /// <summary>The users_approved property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsersApproved { get; set; }
#nullable restore
#else
        public string UsersApproved { get; set; }
#endif
        /// <summary>The users_blocked property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsersBlocked { get; set; }
#nullable restore
#else
        public string UsersBlocked { get; set; }
#endif
        /// <summary>The users_errored property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsersErrored { get; set; }
#nullable restore
#else
        public string UsersErrored { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_policy_update_resp_result"/> and sets the default values.
        /// </summary>
        public Access_policy_update_resp_result()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_policy_update_resp_result"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Access_policy_update_resp_result CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Access_policy_update_resp_result();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "percent_approved", n => { PercentApproved = n.GetStringValue(); } },
                { "percent_blocked", n => { PercentBlocked = n.GetStringValue(); } },
                { "percent_errored", n => { PercentErrored = n.GetStringValue(); } },
                { "percent_users_processed", n => { PercentUsersProcessed = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "total_users", n => { TotalUsers = n.GetStringValue(); } },
                { "users_approved", n => { UsersApproved = n.GetStringValue(); } },
                { "users_blocked", n => { UsersBlocked = n.GetStringValue(); } },
                { "users_errored", n => { UsersErrored = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("percent_approved", PercentApproved);
            writer.WriteStringValue("percent_blocked", PercentBlocked);
            writer.WriteStringValue("percent_errored", PercentErrored);
            writer.WriteStringValue("percent_users_processed", PercentUsersProcessed);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("total_users", TotalUsers);
            writer.WriteStringValue("users_approved", UsersApproved);
            writer.WriteStringValue("users_blocked", UsersBlocked);
            writer.WriteStringValue("users_errored", UsersErrored);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
