// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Telemetry_query : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The chart property</summary>
        public bool? Chart { get; set; }
        /// <summary>The compare property</summary>
        public bool? Compare { get; set; }
        /// <summary>The dry property</summary>
        public bool? Dry { get; set; }
        /// <summary>The granularity property</summary>
        public double? Granularity { get; set; }
        /// <summary>The ignoreSeries property</summary>
        public bool? IgnoreSeries { get; set; }
        /// <summary>The limit property</summary>
        public double? Limit { get; set; }
        /// <summary>The offset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Offset { get; set; }
#nullable restore
#else
        public string Offset { get; set; }
#endif
        /// <summary>The offsetBy property</summary>
        public double? OffsetBy { get; set; }
        /// <summary>The offsetDirection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetDirection { get; set; }
#nullable restore
#else
        public string OffsetDirection { get; set; }
#endif
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_parameters? Parameters { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_parameters Parameters { get; set; }
#endif
        /// <summary>The patternType property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_patternType? PatternType { get; set; }
        /// <summary>The queryId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QueryId { get; set; }
#nullable restore
#else
        public string QueryId { get; set; }
#endif
        /// <summary>The timeframe property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_timeframe? Timeframe { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_timeframe Timeframe { get; set; }
#endif
        /// <summary>The view property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_view? View { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query"/> and sets the default values.
        /// </summary>
        public Telemetry_query()
        {
            AdditionalData = new Dictionary<string, object>();
            View = global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_view.Calculations;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "chart", n => { Chart = n.GetBoolValue(); } },
                { "compare", n => { Compare = n.GetBoolValue(); } },
                { "dry", n => { Dry = n.GetBoolValue(); } },
                { "granularity", n => { Granularity = n.GetDoubleValue(); } },
                { "ignoreSeries", n => { IgnoreSeries = n.GetBoolValue(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "offset", n => { Offset = n.GetStringValue(); } },
                { "offsetBy", n => { OffsetBy = n.GetDoubleValue(); } },
                { "offsetDirection", n => { OffsetDirection = n.GetStringValue(); } },
                { "parameters", n => { Parameters = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_parameters>(global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_parameters.CreateFromDiscriminatorValue); } },
                { "patternType", n => { PatternType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_patternType>(); } },
                { "queryId", n => { QueryId = n.GetStringValue(); } },
                { "timeframe", n => { Timeframe = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_timeframe>(global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_timeframe.CreateFromDiscriminatorValue); } },
                { "view", n => { View = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_view>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("chart", Chart);
            writer.WriteBoolValue("compare", Compare);
            writer.WriteBoolValue("dry", Dry);
            writer.WriteDoubleValue("granularity", Granularity);
            writer.WriteBoolValue("ignoreSeries", IgnoreSeries);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteStringValue("offset", Offset);
            writer.WriteDoubleValue("offsetBy", OffsetBy);
            writer.WriteStringValue("offsetDirection", OffsetDirection);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_parameters>("parameters", Parameters);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_patternType>("patternType", PatternType);
            writer.WriteStringValue("queryId", QueryId);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_timeframe>("timeframe", Timeframe);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Telemetry_query_view>("view", View);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
