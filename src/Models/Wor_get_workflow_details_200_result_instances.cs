// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Wor_get_workflow_details_200_result_instances : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The complete property</summary>
        public double? Complete { get; set; }
        /// <summary>The errored property</summary>
        public double? Errored { get; set; }
        /// <summary>The paused property</summary>
        public double? Paused { get; set; }
        /// <summary>The queued property</summary>
        public double? Queued { get; set; }
        /// <summary>The running property</summary>
        public double? Running { get; set; }
        /// <summary>The terminated property</summary>
        public double? Terminated { get; set; }
        /// <summary>The waiting property</summary>
        public double? Waiting { get; set; }
        /// <summary>The waitingForPause property</summary>
        public double? WaitingForPause { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Wor_get_workflow_details_200_result_instances"/> and sets the default values.
        /// </summary>
        public Wor_get_workflow_details_200_result_instances()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Wor_get_workflow_details_200_result_instances"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Wor_get_workflow_details_200_result_instances CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Wor_get_workflow_details_200_result_instances();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "complete", n => { Complete = n.GetDoubleValue(); } },
                { "errored", n => { Errored = n.GetDoubleValue(); } },
                { "paused", n => { Paused = n.GetDoubleValue(); } },
                { "queued", n => { Queued = n.GetDoubleValue(); } },
                { "running", n => { Running = n.GetDoubleValue(); } },
                { "terminated", n => { Terminated = n.GetDoubleValue(); } },
                { "waiting", n => { Waiting = n.GetDoubleValue(); } },
                { "waitingForPause", n => { WaitingForPause = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("complete", Complete);
            writer.WriteDoubleValue("errored", Errored);
            writer.WriteDoubleValue("paused", Paused);
            writer.WriteDoubleValue("queued", Queued);
            writer.WriteDoubleValue("running", Running);
            writer.WriteDoubleValue("terminated", Terminated);
            writer.WriteDoubleValue("waiting", Waiting);
            writer.WriteDoubleValue("waitingForPause", WaitingForPause);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
