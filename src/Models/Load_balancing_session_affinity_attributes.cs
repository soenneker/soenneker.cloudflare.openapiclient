// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Configures attributes for session affinity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Load_balancing_session_affinity_attributes : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.</summary>
        public double? DrainDuration { get; set; }
        /// <summary>Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `&quot;cookie:&lt;cookie-name-1&gt;,&lt;cookie-name-2&gt;&quot;` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `&quot;cookie&quot;` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Headers { get; set; }
#nullable restore
#else
        public List<string> Headers { get; set; }
#endif
        /// <summary>When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are: - `&quot;true&quot;`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&apos;t created. - `&quot;false&quot;`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&apos;t created.</summary>
        public bool? RequireAllHeaders { get; set; }
        /// <summary>Configures the SameSite attribute on session affinity cookie. Value &quot;Auto&quot; will be translated to &quot;Lax&quot; or &quot;None&quot; depending if Always Use HTTPS is enabled. Note: when using value &quot;None&quot;, the secure attribute can not be set to &quot;Never&quot;.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_samesite? Samesite { get; set; }
        /// <summary>Configures the Secure attribute on session affinity cookie. Value &quot;Always&quot; indicates the Secure attribute will be set in the Set-Cookie header, &quot;Never&quot; indicates the Secure attribute will not be set, and &quot;Auto&quot; will set the Secure attribute depending if Always Use HTTPS is enabled.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_secure? Secure { get; set; }
        /// <summary>Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are: - `&quot;none&quot;`: No failover takes place for sessions pinned to the origin (default). - `&quot;temporary&quot;`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. - `&quot;sticky&quot;`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_zero_downtime_failover? ZeroDowntimeFailover { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes"/> and sets the default values.
        /// </summary>
        public Load_balancing_session_affinity_attributes()
        {
            AdditionalData = new Dictionary<string, object>();
            Samesite = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_samesite.Auto;
            Secure = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_secure.Auto;
            ZeroDowntimeFailover = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_zero_downtime_failover.None;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "drain_duration", n => { DrainDuration = n.GetDoubleValue(); } },
                { "headers", n => { Headers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "require_all_headers", n => { RequireAllHeaders = n.GetBoolValue(); } },
                { "samesite", n => { Samesite = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_samesite>(); } },
                { "secure", n => { Secure = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_secure>(); } },
                { "zero_downtime_failover", n => { ZeroDowntimeFailover = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_zero_downtime_failover>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("drain_duration", DrainDuration);
            writer.WriteCollectionOfPrimitiveValues<string>("headers", Headers);
            writer.WriteBoolValue("require_all_headers", RequireAllHeaders);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_samesite>("samesite", Samesite);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_secure>("secure", Secure);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_session_affinity_attributes_zero_downtime_failover>("zero_downtime_failover", ZeroDowntimeFailover);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
