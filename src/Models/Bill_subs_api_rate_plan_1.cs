// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// The rate plan applied to the subscription.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Bill_subs_api_rate_plan_1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currency applied to the rate plan subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Whether this rate plan is managed externally from Cloudflare.</summary>
        public bool? ExternallyManaged { get; set; }
        /// <summary>The ID of the rate plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether a rate plan is enterprise-based (or newly adopted term contract).</summary>
        public bool? IsContract { get; set; }
        /// <summary>The full name of the rate plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicName { get; set; }
#nullable restore
#else
        public string PublicName { get; set; }
#endif
        /// <summary>The scope that this rate plan applies to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scope { get; set; }
#nullable restore
#else
        public string Scope { get; set; }
#endif
        /// <summary>The list of sets this rate plan applies to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Sets { get; set; }
#nullable restore
#else
        public List<string> Sets { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Bill_subs_api_rate_plan_1"/> and sets the default values.
        /// </summary>
        public Bill_subs_api_rate_plan_1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Bill_subs_api_rate_plan_1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Bill_subs_api_rate_plan_1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Bill_subs_api_rate_plan_1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "externally_managed", n => { ExternallyManaged = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_contract", n => { IsContract = n.GetBoolValue(); } },
                { "public_name", n => { PublicName = n.GetStringValue(); } },
                { "scope", n => { Scope = n.GetStringValue(); } },
                { "sets", n => { Sets = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currency", Currency);
            writer.WriteBoolValue("externally_managed", ExternallyManaged);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_contract", IsContract);
            writer.WriteStringValue("public_name", PublicName);
            writer.WriteStringValue("scope", Scope);
            writer.WriteCollectionOfPrimitiveValues<string>("sets", Sets);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
