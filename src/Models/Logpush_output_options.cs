// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// The structured replacement for `logpull_options`. When including this field, the `logpull_option` field will be ignored.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Logpush_output_options : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>String to be prepended before each batch.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatchPrefix { get; set; }
#nullable restore
#else
        public string BatchPrefix { get; set; }
#endif
        /// <summary>String to be appended after each batch.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatchSuffix { get; set; }
#nullable restore
#else
        public string BatchSuffix { get; set; }
#endif
        /// <summary>If set to true, will cause all occurrences of `${` in the generated files to be replaced with `x{`.</summary>
        public bool? CVE202144228 { get; set; }
        /// <summary>String to join fields. This field be ignored when `record_template` is set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldDelimiter { get; set; }
#nullable restore
#else
        public string FieldDelimiter { get; set; }
#endif
        /// <summary>List of field names to be included in the Logpush output. For the moment, there is no option to add all fields at once, so you must specify all the fields names you are interested in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FieldNames { get; set; }
#nullable restore
#else
        public List<string> FieldNames { get; set; }
#endif
        /// <summary>Specifies the output type, such as `ndjson` or `csv`. This sets default values for the rest of the settings, depending on the chosen output type. Some formatting rules, like string quoting, are different between output types.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_output_type? OutputType { get; set; }
        /// <summary>String to be inserted in-between the records as separator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordDelimiter { get; set; }
#nullable restore
#else
        public string RecordDelimiter { get; set; }
#endif
        /// <summary>String to be prepended before each record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordPrefix { get; set; }
#nullable restore
#else
        public string RecordPrefix { get; set; }
#endif
        /// <summary>String to be appended after each record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordSuffix { get; set; }
#nullable restore
#else
        public string RecordSuffix { get; set; }
#endif
        /// <summary>String to use as template for each record instead of the default json key value mapping. All fields used in the template must be present in `field_names` as well, otherwise they will end up as null. Format as a Go `text/template` without any standard functions, like conditionals, loops, sub-templates, etc.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordTemplate { get; set; }
#nullable restore
#else
        public string RecordTemplate { get; set; }
#endif
        /// <summary>Floating number to specify sampling rate. Sampling is applied on top of filtering, and regardless of the current `sample_interval` of the data.</summary>
        public float? SampleRate { get; set; }
        /// <summary>String to specify the format for timestamps, such as `unixnano`, `unix`, or `rfc3339`.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_timestamp_format? TimestampFormat { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options"/> and sets the default values.
        /// </summary>
        public Logpush_output_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "batch_prefix", n => { BatchPrefix = n.GetStringValue(); } },
                { "batch_suffix", n => { BatchSuffix = n.GetStringValue(); } },
                { "CVE-2021-44228", n => { CVE202144228 = n.GetBoolValue(); } },
                { "field_delimiter", n => { FieldDelimiter = n.GetStringValue(); } },
                { "field_names", n => { FieldNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "output_type", n => { OutputType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_output_type>(); } },
                { "record_delimiter", n => { RecordDelimiter = n.GetStringValue(); } },
                { "record_prefix", n => { RecordPrefix = n.GetStringValue(); } },
                { "record_suffix", n => { RecordSuffix = n.GetStringValue(); } },
                { "record_template", n => { RecordTemplate = n.GetStringValue(); } },
                { "sample_rate", n => { SampleRate = n.GetFloatValue(); } },
                { "timestamp_format", n => { TimestampFormat = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_timestamp_format>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("batch_prefix", BatchPrefix);
            writer.WriteStringValue("batch_suffix", BatchSuffix);
            writer.WriteBoolValue("CVE-2021-44228", CVE202144228);
            writer.WriteStringValue("field_delimiter", FieldDelimiter);
            writer.WriteCollectionOfPrimitiveValues<string>("field_names", FieldNames);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_output_type>("output_type", OutputType);
            writer.WriteStringValue("record_delimiter", RecordDelimiter);
            writer.WriteStringValue("record_prefix", RecordPrefix);
            writer.WriteStringValue("record_suffix", RecordSuffix);
            writer.WriteStringValue("record_template", RecordTemplate);
            writer.WriteFloatValue("sample_rate", SampleRate);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Logpush_output_options_timestamp_format>("timestamp_format", TimestampFormat);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
