// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DnsFirewall_dnsFirewallCluster : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Attack mitigation settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_attack_mitigation? AttackMitigation { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_attack_mitigation AttackMitigation { get; set; }
#endif
        /// <summary>Whether to refuse to answer queries for the ANY type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_deprecate_any_requests? DeprecateAnyRequests { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_deprecate_any_requests DeprecateAnyRequests { get; set; }
#endif
        /// <summary>Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ecs_fallback? EcsFallback { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ecs_fallback EcsFallback { get; set; }
#endif
        /// <summary>Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_maximum_cache_ttl? MaximumCacheTtl { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_maximum_cache_ttl MaximumCacheTtl { get; set; }
#endif
        /// <summary>Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_minimum_cache_ttl? MinimumCacheTtl { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_minimum_cache_ttl MinimumCacheTtl { get; set; }
#endif
        /// <summary>DNS Firewall cluster name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_name? Name { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_name Name { get; set; }
#endif
        /// <summary>Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_negative_cache_ttl? NegativeCacheTtl { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_negative_cache_ttl NegativeCacheTtl { get; set; }
#endif
        /// <summary>Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ratelimit? Ratelimit { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ratelimit Ratelimit { get; set; }
#endif
        /// <summary>Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_retries? Retries { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_retries Retries { get; set; }
#endif
        /// <summary>The upstream_ips property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UpstreamIps { get; set; }
#nullable restore
#else
        public List<string> UpstreamIps { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_dnsFirewallCluster"/> and sets the default values.
        /// </summary>
        public DnsFirewall_dnsFirewallCluster()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_dnsFirewallCluster"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_dnsFirewallCluster CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_dnsFirewallCluster();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attack_mitigation", n => { AttackMitigation = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_attack_mitigation>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_attack_mitigation.CreateFromDiscriminatorValue); } },
                { "deprecate_any_requests", n => { DeprecateAnyRequests = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_deprecate_any_requests>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_deprecate_any_requests.CreateFromDiscriminatorValue); } },
                { "ecs_fallback", n => { EcsFallback = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ecs_fallback>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ecs_fallback.CreateFromDiscriminatorValue); } },
                { "maximum_cache_ttl", n => { MaximumCacheTtl = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_maximum_cache_ttl>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_maximum_cache_ttl.CreateFromDiscriminatorValue); } },
                { "minimum_cache_ttl", n => { MinimumCacheTtl = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_minimum_cache_ttl>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_minimum_cache_ttl.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_name>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_name.CreateFromDiscriminatorValue); } },
                { "negative_cache_ttl", n => { NegativeCacheTtl = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_negative_cache_ttl>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_negative_cache_ttl.CreateFromDiscriminatorValue); } },
                { "ratelimit", n => { Ratelimit = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ratelimit>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ratelimit.CreateFromDiscriminatorValue); } },
                { "retries", n => { Retries = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_retries>(global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_retries.CreateFromDiscriminatorValue); } },
                { "upstream_ips", n => { UpstreamIps = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_attack_mitigation>("attack_mitigation", AttackMitigation);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_deprecate_any_requests>("deprecate_any_requests", DeprecateAnyRequests);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ecs_fallback>("ecs_fallback", EcsFallback);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_maximum_cache_ttl>("maximum_cache_ttl", MaximumCacheTtl);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_minimum_cache_ttl>("minimum_cache_ttl", MinimumCacheTtl);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_name>("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_negative_cache_ttl>("negative_cache_ttl", NegativeCacheTtl);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_ratelimit>("ratelimit", Ratelimit);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DnsFirewall_retries>("retries", Retries);
            writer.WriteCollectionOfPrimitiveValues<string>("upstream_ips", UpstreamIps);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
