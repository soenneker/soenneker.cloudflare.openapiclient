// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Mconn_snapshot : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bonds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_bond>? Bonds { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_bond> Bonds { get; set; }
#endif
        /// <summary>Count of reclaimed paths</summary>
        public double? CountReclaimedPaths { get; set; }
        /// <summary>Count of failures to reclaim space</summary>
        public double? CountReclaimFailures { get; set; }
        /// <summary>Count of failed snapshot recordings</summary>
        public double? CountRecordFailed { get; set; }
        /// <summary>Count of failed snapshot transmissions</summary>
        public double? CountTransmitFailures { get; set; }
        /// <summary>Count of processors/cores</summary>
        public double? CpuCount { get; set; }
        /// <summary>Percentage of time over a 10 second window that tasks were stalled</summary>
        public double? CpuPressure10s { get; set; }
        /// <summary>Percentage of time over a 5 minute window that tasks were stalled</summary>
        public double? CpuPressure300s { get; set; }
        /// <summary>Percentage of time over a 1 minute window that tasks were stalled</summary>
        public double? CpuPressure60s { get; set; }
        /// <summary>Total stall time (microseconds)</summary>
        public double? CpuPressureTotalUs { get; set; }
        /// <summary>Time spent running a virtual CPU or guest OS (milliseconds)</summary>
        public double? CpuTimeGuestMs { get; set; }
        /// <summary>Time spent running a niced guest (milliseconds)</summary>
        public double? CpuTimeGuestNiceMs { get; set; }
        /// <summary>Time spent in idle state (milliseconds)</summary>
        public double? CpuTimeIdleMs { get; set; }
        /// <summary>Time spent wait for I/O to complete (milliseconds)</summary>
        public double? CpuTimeIowaitMs { get; set; }
        /// <summary>Time spent servicing interrupts (milliseconds)</summary>
        public double? CpuTimeIrqMs { get; set; }
        /// <summary>Time spent in low-priority user mode (milliseconds)</summary>
        public double? CpuTimeNiceMs { get; set; }
        /// <summary>Time spent servicing softirqs (milliseconds)</summary>
        public double? CpuTimeSoftirqMs { get; set; }
        /// <summary>Time stolen (milliseconds)</summary>
        public double? CpuTimeStealMs { get; set; }
        /// <summary>Time spent in system mode (milliseconds)</summary>
        public double? CpuTimeSystemMs { get; set; }
        /// <summary>Time spent in user mode (milliseconds)</summary>
        public double? CpuTimeUserMs { get; set; }
        /// <summary>The dhcp_leases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_dhcp_lease>? DhcpLeases { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_dhcp_lease> DhcpLeases { get; set; }
#endif
        /// <summary>The disks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk>? Disks { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk> Disks { get; set; }
#endif
        /// <summary>Name of high availability state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HaState { get; set; }
#nullable restore
#else
        public string HaState { get; set; }
#endif
        /// <summary>Numeric value associated with high availability state (0 = disabled, 1 = active, 2 = standby, 3 = stopped, 4 = fault)</summary>
        public double? HaValue { get; set; }
        /// <summary>The interfaces property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_interface>? Interfaces { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_interface> Interfaces { get; set; }
#endif
        /// <summary>Percentage of time over a 10 second window that all tasks were stalled</summary>
        public double? IoPressureFull10s { get; set; }
        /// <summary>Percentage of time over a 5 minute window that all tasks were stalled</summary>
        public double? IoPressureFull300s { get; set; }
        /// <summary>Percentage of time over a 1 minute window that all tasks were stalled</summary>
        public double? IoPressureFull60s { get; set; }
        /// <summary>Total stall time (microseconds)</summary>
        public double? IoPressureFullTotalUs { get; set; }
        /// <summary>Percentage of time over a 10 second window that some tasks were stalled</summary>
        public double? IoPressureSome10s { get; set; }
        /// <summary>Percentage of time over a 3 minute window that some tasks were stalled</summary>
        public double? IoPressureSome300s { get; set; }
        /// <summary>Percentage of time over a 1 minute window that some tasks were stalled</summary>
        public double? IoPressureSome60s { get; set; }
        /// <summary>Total stall time (microseconds)</summary>
        public double? IoPressureSomeTotalUs { get; set; }
        /// <summary>Boot time (seconds since Unix epoch)</summary>
        public double? KernelBtime { get; set; }
        /// <summary>Number of context switches that the system underwent</summary>
        public double? KernelCtxt { get; set; }
        /// <summary>Number of forks since boot</summary>
        public double? KernelProcesses { get; set; }
        /// <summary>Number of processes blocked waiting for I/O</summary>
        public double? KernelProcessesBlocked { get; set; }
        /// <summary>Number of processes in runnable state</summary>
        public double? KernelProcessesRunning { get; set; }
        /// <summary>The fifteen-minute load average</summary>
        public double? LoadAverage15m { get; set; }
        /// <summary>The one-minute load average</summary>
        public double? LoadAverage1m { get; set; }
        /// <summary>The five-minute load average</summary>
        public double? LoadAverage5m { get; set; }
        /// <summary>Number of currently runnable kernel scheduling entities</summary>
        public double? LoadAverageCur { get; set; }
        /// <summary>Number of kernel scheduling entities that currently exist on the system</summary>
        public double? LoadAverageMax { get; set; }
        /// <summary>Memory that has been used more recently</summary>
        public double? MemoryActiveBytes { get; set; }
        /// <summary>Non-file backed huge pages mapped into user-space page tables</summary>
        public double? MemoryAnonHugepagesBytes { get; set; }
        /// <summary>Non-file backed pages mapped into user-space page tables</summary>
        public double? MemoryAnonPagesBytes { get; set; }
        /// <summary>Estimate of how much memory is available for starting new applications</summary>
        public double? MemoryAvailableBytes { get; set; }
        /// <summary>Memory used for block device bounce buffers</summary>
        public double? MemoryBounceBytes { get; set; }
        /// <summary>Relatively temporary storage for raw disk blocks</summary>
        public double? MemoryBuffersBytes { get; set; }
        /// <summary>In-memory cache for files read from the disk</summary>
        public double? MemoryCachedBytes { get; set; }
        /// <summary>Free CMA (Contiguous Memory Allocator) pages</summary>
        public double? MemoryCmaFreeBytes { get; set; }
        /// <summary>Total CMA (Contiguous Memory Allocator) pages</summary>
        public double? MemoryCmaTotalBytes { get; set; }
        /// <summary>Total amount of memory currently available to be allocated on the system</summary>
        public double? MemoryCommitLimitBytes { get; set; }
        /// <summary>Amount of memory presently allocated on the system</summary>
        public double? MemoryCommittedAsBytes { get; set; }
        /// <summary>Memory which is waiting to get written back to the disk</summary>
        public double? MemoryDirtyBytes { get; set; }
        /// <summary>The sum of LowFree and HighFree</summary>
        public double? MemoryFreeBytes { get; set; }
        /// <summary>Amount of free highmem</summary>
        public double? MemoryHighFreeBytes { get; set; }
        /// <summary>Total amount of highmem</summary>
        public double? MemoryHighTotalBytes { get; set; }
        /// <summary>The number of huge pages in the pool that are not yet allocated</summary>
        public double? MemoryHugepagesFree { get; set; }
        /// <summary>The size of huge pages</summary>
        public double? MemoryHugepagesizeBytes { get; set; }
        /// <summary>Number of huge pages for which a commitment has been made, but no allocation has yet been made</summary>
        public double? MemoryHugepagesRsvd { get; set; }
        /// <summary>Number of huge pages in the pool above the threshold</summary>
        public double? MemoryHugepagesSurp { get; set; }
        /// <summary>The size of the pool of huge pages</summary>
        public double? MemoryHugepagesTotal { get; set; }
        /// <summary>Memory which has been less recently used</summary>
        public double? MemoryInactiveBytes { get; set; }
        /// <summary>Amount of memory allocated to kernel stacks</summary>
        public double? MemoryKernelStackBytes { get; set; }
        /// <summary>Kernel allocations that the kernel will attempt to reclaim under memory pressure</summary>
        public double? MemoryKReclaimableBytes { get; set; }
        /// <summary>Amount of free lowmem</summary>
        public double? MemoryLowFreeBytes { get; set; }
        /// <summary>Total amount of lowmem</summary>
        public double? MemoryLowTotalBytes { get; set; }
        /// <summary>Files which have been mapped into memory</summary>
        public double? MemoryMappedBytes { get; set; }
        /// <summary>Amount of memory dedicated to the lowest level of page tables</summary>
        public double? MemoryPageTablesBytes { get; set; }
        /// <summary>Memory allocated to the per-cpu alloctor used to back per-cpu allocations</summary>
        public double? MemoryPerCpuBytes { get; set; }
        /// <summary>Percentage of time over a 10 second window that all tasks were stalled</summary>
        public double? MemoryPressureFull10s { get; set; }
        /// <summary>Percentage of time over a 5 minute window that all tasks were stalled</summary>
        public double? MemoryPressureFull300s { get; set; }
        /// <summary>Percentage of time over a 1 minute window that all tasks were stalled</summary>
        public double? MemoryPressureFull60s { get; set; }
        /// <summary>Total stall time (microseconds)</summary>
        public double? MemoryPressureFullTotalUs { get; set; }
        /// <summary>Percentage of time over a 10 second window that some tasks were stalled</summary>
        public double? MemoryPressureSome10s { get; set; }
        /// <summary>Percentage of time over a 5 minute window that some tasks were stalled</summary>
        public double? MemoryPressureSome300s { get; set; }
        /// <summary>Percentage of time over a 1 minute window that some tasks were stalled</summary>
        public double? MemoryPressureSome60s { get; set; }
        /// <summary>Total stall time (microseconds)</summary>
        public double? MemoryPressureSomeTotalUs { get; set; }
        /// <summary>Amount of memory dedicated to the lowest level of page tables</summary>
        public double? MemorySecondaryPageTablesBytes { get; set; }
        /// <summary>Amount of memory consumed by tmpfs</summary>
        public double? MemoryShmemBytes { get; set; }
        /// <summary>Memory used by shmem and tmpfs, allocated with huge pages</summary>
        public double? MemoryShmemHugepagesBytes { get; set; }
        /// <summary>Shared memory mapped into user space with huge pages</summary>
        public double? MemoryShmemPmdMappedBytes { get; set; }
        /// <summary>In-kernel data structures cache</summary>
        public double? MemorySlabBytes { get; set; }
        /// <summary>Part of slab that can be reclaimed on memory pressure</summary>
        public double? MemorySReclaimableBytes { get; set; }
        /// <summary>Part of slab that cannot be reclaimed on memory pressure</summary>
        public double? MemorySUnreclaimBytes { get; set; }
        /// <summary>Memory swapped out and back in while still in swap file</summary>
        public double? MemorySwapCachedBytes { get; set; }
        /// <summary>Amount of swap space that is currently unused</summary>
        public double? MemorySwapFreeBytes { get; set; }
        /// <summary>Total amount of swap space available</summary>
        public double? MemorySwapTotalBytes { get; set; }
        /// <summary>Total usable RAM</summary>
        public double? MemoryTotalBytes { get; set; }
        /// <summary>Largest contiguous block of vmalloc area which is free</summary>
        public double? MemoryVmallocChunkBytes { get; set; }
        /// <summary>Total size of vmalloc memory area</summary>
        public double? MemoryVmallocTotalBytes { get; set; }
        /// <summary>Amount of vmalloc area which is used</summary>
        public double? MemoryVmallocUsedBytes { get; set; }
        /// <summary>Memory which is actively being written back to the disk</summary>
        public double? MemoryWritebackBytes { get; set; }
        /// <summary>Memory used by FUSE for temporary writeback buffers</summary>
        public double? MemoryWritebackTmpBytes { get; set; }
        /// <summary>Memory consumed by the zswap backend, compressed</summary>
        public double? MemoryZSwapBytes { get; set; }
        /// <summary>Amount of anonymous memory stored in zswap, uncompressed</summary>
        public double? MemoryZSwappedBytes { get; set; }
        /// <summary>The mounts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount>? Mounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount> Mounts { get; set; }
#endif
        /// <summary>The netdevs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev>? Netdevs { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev> Netdevs { get; set; }
#endif
        /// <summary>Number of ICMP Address Mask Reply messages received</summary>
        public double? SnmpIcmpInAddrMaskReps { get; set; }
        /// <summary>Number of ICMP Address Mask Request messages received</summary>
        public double? SnmpIcmpInAddrMasks { get; set; }
        /// <summary>Number of ICMP messages received with bad checksums</summary>
        public double? SnmpIcmpInCsumErrors { get; set; }
        /// <summary>Number of ICMP Destination Unreachable messages received</summary>
        public double? SnmpIcmpInDestUnreachs { get; set; }
        /// <summary>Number of ICMP Echo Reply messages received</summary>
        public double? SnmpIcmpInEchoReps { get; set; }
        /// <summary>Number of ICMP Echo (request) messages received</summary>
        public double? SnmpIcmpInEchos { get; set; }
        /// <summary>Number of ICMP messages received with ICMP-specific errors</summary>
        public double? SnmpIcmpInErrors { get; set; }
        /// <summary>Number of ICMP messages received</summary>
        public double? SnmpIcmpInMsgs { get; set; }
        /// <summary>Number of ICMP Parameter Problem messages received</summary>
        public double? SnmpIcmpInParmProbs { get; set; }
        /// <summary>Number of ICMP Redirect messages received</summary>
        public double? SnmpIcmpInRedirects { get; set; }
        /// <summary>Number of ICMP Source Quench messages received</summary>
        public double? SnmpIcmpInSrcQuenchs { get; set; }
        /// <summary>Number of ICMP Time Exceeded messages received</summary>
        public double? SnmpIcmpInTimeExcds { get; set; }
        /// <summary>Number of ICMP Address Mask Request messages received</summary>
        public double? SnmpIcmpInTimestampReps { get; set; }
        /// <summary>Number of ICMP Timestamp (request) messages received</summary>
        public double? SnmpIcmpInTimestamps { get; set; }
        /// <summary>Number of ICMP Address Mask Reply messages sent</summary>
        public double? SnmpIcmpOutAddrMaskReps { get; set; }
        /// <summary>Number of ICMP Address Mask Request messages sent</summary>
        public double? SnmpIcmpOutAddrMasks { get; set; }
        /// <summary>Number of ICMP Destination Unreachable messages sent</summary>
        public double? SnmpIcmpOutDestUnreachs { get; set; }
        /// <summary>Number of ICMP Echo Reply messages sent</summary>
        public double? SnmpIcmpOutEchoReps { get; set; }
        /// <summary>Number of ICMP Echo (request) messages sent</summary>
        public double? SnmpIcmpOutEchos { get; set; }
        /// <summary>Number of ICMP messages which this entity did not send due to ICMP-specific errors</summary>
        public double? SnmpIcmpOutErrors { get; set; }
        /// <summary>Number of ICMP messages attempted to send</summary>
        public double? SnmpIcmpOutMsgs { get; set; }
        /// <summary>Number of ICMP Parameter Problem messages sent</summary>
        public double? SnmpIcmpOutParmProbs { get; set; }
        /// <summary>Number of ICMP Redirect messages sent</summary>
        public double? SnmpIcmpOutRedirects { get; set; }
        /// <summary>Number of ICMP Source Quench messages sent</summary>
        public double? SnmpIcmpOutSrcQuenchs { get; set; }
        /// <summary>Number of ICMP Time Exceeded messages sent</summary>
        public double? SnmpIcmpOutTimeExcds { get; set; }
        /// <summary>Number of ICMP Timestamp Reply messages sent</summary>
        public double? SnmpIcmpOutTimestampReps { get; set; }
        /// <summary>Number of ICMP Timestamp (request) messages sent</summary>
        public double? SnmpIcmpOutTimestamps { get; set; }
        /// <summary>Default value of the Time-To-Live field of the IP header</summary>
        public double? SnmpIpDefaultTtl { get; set; }
        /// <summary>Set when acting as an IP gateway</summary>
        public bool? SnmpIpForwardingEnabled { get; set; }
        /// <summary>Number of datagrams forwarded to their final destination</summary>
        public double? SnmpIpForwDatagrams { get; set; }
        /// <summary>Number of datagrams generated by fragmentation</summary>
        public double? SnmpIpFragCreates { get; set; }
        /// <summary>Number of datagrams discarded because fragmentation failed</summary>
        public double? SnmpIpFragFails { get; set; }
        /// <summary>Number of datagrams successfully fragmented</summary>
        public double? SnmpIpFragOks { get; set; }
        /// <summary>Number of input datagrams discarded due to errors in the IP address</summary>
        public double? SnmpIpInAddrErrors { get; set; }
        /// <summary>Number of input datagrams successfully delivered to IP user-protocols</summary>
        public double? SnmpIpInDelivers { get; set; }
        /// <summary>Number of input datagrams otherwise discarded</summary>
        public double? SnmpIpInDiscards { get; set; }
        /// <summary>Number of input datagrams discarded due to errors in the IP header</summary>
        public double? SnmpIpInHdrErrors { get; set; }
        /// <summary>Number of input datagrams received from interfaces</summary>
        public double? SnmpIpInReceives { get; set; }
        /// <summary>Number of input datagrams discarded due unknown or unsupported protocol</summary>
        public double? SnmpIpInUnknownProtos { get; set; }
        /// <summary>Number of output datagrams otherwise discarded</summary>
        public double? SnmpIpOutDiscards { get; set; }
        /// <summary>Number of output datagrams discarded because no route matched</summary>
        public double? SnmpIpOutNoRoutes { get; set; }
        /// <summary>Number of datagrams supplied for transmission</summary>
        public double? SnmpIpOutRequests { get; set; }
        /// <summary>Number of failures detected by the reassembly algorithm</summary>
        public double? SnmpIpReasmFails { get; set; }
        /// <summary>Number of datagrams successfully reassembled</summary>
        public double? SnmpIpReasmOks { get; set; }
        /// <summary>Number of fragments received which needed to be reassembled</summary>
        public double? SnmpIpReasmReqds { get; set; }
        /// <summary>Number of seconds fragments are held while awaiting reassembly</summary>
        public double? SnmpIpReasmTimeout { get; set; }
        /// <summary>Number of times TCP transitions to SYN-SENT from CLOSED</summary>
        public double? SnmpTcpActiveOpens { get; set; }
        /// <summary>Number of times TCP transitions to CLOSED from SYN-SENT or SYN-RCVD, plus transitions to LISTEN from SYN-RCVD</summary>
        public double? SnmpTcpAttemptFails { get; set; }
        /// <summary>Number of TCP connections in ESTABLISHED or CLOSE-WAIT</summary>
        public double? SnmpTcpCurrEstab { get; set; }
        /// <summary>Number of times TCP transitions to CLOSED from ESTABLISHED or CLOSE-WAIT</summary>
        public double? SnmpTcpEstabResets { get; set; }
        /// <summary>Number of TCP segments received with checksum errors</summary>
        public double? SnmpTcpInCsumErrors { get; set; }
        /// <summary>Number of TCP segments received in error</summary>
        public double? SnmpTcpInErrs { get; set; }
        /// <summary>Number of TCP segments received</summary>
        public double? SnmpTcpInSegs { get; set; }
        /// <summary>Limit on the total number of TCP connections</summary>
        public double? SnmpTcpMaxConn { get; set; }
        /// <summary>Number of TCP segments sent with RST flag</summary>
        public double? SnmpTcpOutRsts { get; set; }
        /// <summary>Number of TCP segments sent</summary>
        public double? SnmpTcpOutSegs { get; set; }
        /// <summary>Number of times TCP transitions to SYN-RCVD from LISTEN</summary>
        public double? SnmpTcpPassiveOpens { get; set; }
        /// <summary>Number of TCP segments retransmitted</summary>
        public double? SnmpTcpRetransSegs { get; set; }
        /// <summary>Maximum value permitted by a TCP implementation for the retransmission timeout (milliseconds)</summary>
        public double? SnmpTcpRtoMax { get; set; }
        /// <summary>Minimum value permitted by a TCP implementation for the retransmission timeout (milliseconds)</summary>
        public double? SnmpTcpRtoMin { get; set; }
        /// <summary>Number of UDP datagrams delivered to UDP applications</summary>
        public double? SnmpUdpInDatagrams { get; set; }
        /// <summary>Number of UDP datagrams failed to be delivered for reasons other than lack of application at the destination port</summary>
        public double? SnmpUdpInErrors { get; set; }
        /// <summary>Number of UDP datagrams received for which there was not application at the destination port</summary>
        public double? SnmpUdpNoPorts { get; set; }
        /// <summary>Number of UDP datagrams sent</summary>
        public double? SnmpUdpOutDatagrams { get; set; }
        /// <summary>Boottime of the system (seconds since the Unix epoch)</summary>
        public double? SystemBootTimeS { get; set; }
        /// <summary>Time the Snapshot was recorded (seconds since the Unix epoch)</summary>
        public double? T { get; set; }
        /// <summary>The thermals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_thermal>? Thermals { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_thermal> Thermals { get; set; }
#endif
        /// <summary>The tunnels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel>? Tunnels { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel> Tunnels { get; set; }
#endif
        /// <summary>Sum of how much time each core has spent idle</summary>
        public double? UptimeIdleMs { get; set; }
        /// <summary>Uptime of the system, including time spent in suspend</summary>
        public double? UptimeTotalMs { get; set; }
        /// <summary>Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? V { get; set; }
#nullable restore
#else
        public string V { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot"/> and sets the default values.
        /// </summary>
        public Mconn_snapshot()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bonds", n => { Bonds = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_bond>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_bond.CreateFromDiscriminatorValue)?.AsList(); } },
                { "count_reclaim_failures", n => { CountReclaimFailures = n.GetDoubleValue(); } },
                { "count_reclaimed_paths", n => { CountReclaimedPaths = n.GetDoubleValue(); } },
                { "count_record_failed", n => { CountRecordFailed = n.GetDoubleValue(); } },
                { "count_transmit_failures", n => { CountTransmitFailures = n.GetDoubleValue(); } },
                { "cpu_count", n => { CpuCount = n.GetDoubleValue(); } },
                { "cpu_pressure_10s", n => { CpuPressure10s = n.GetDoubleValue(); } },
                { "cpu_pressure_300s", n => { CpuPressure300s = n.GetDoubleValue(); } },
                { "cpu_pressure_60s", n => { CpuPressure60s = n.GetDoubleValue(); } },
                { "cpu_pressure_total_us", n => { CpuPressureTotalUs = n.GetDoubleValue(); } },
                { "cpu_time_guest_ms", n => { CpuTimeGuestMs = n.GetDoubleValue(); } },
                { "cpu_time_guest_nice_ms", n => { CpuTimeGuestNiceMs = n.GetDoubleValue(); } },
                { "cpu_time_idle_ms", n => { CpuTimeIdleMs = n.GetDoubleValue(); } },
                { "cpu_time_iowait_ms", n => { CpuTimeIowaitMs = n.GetDoubleValue(); } },
                { "cpu_time_irq_ms", n => { CpuTimeIrqMs = n.GetDoubleValue(); } },
                { "cpu_time_nice_ms", n => { CpuTimeNiceMs = n.GetDoubleValue(); } },
                { "cpu_time_softirq_ms", n => { CpuTimeSoftirqMs = n.GetDoubleValue(); } },
                { "cpu_time_steal_ms", n => { CpuTimeStealMs = n.GetDoubleValue(); } },
                { "cpu_time_system_ms", n => { CpuTimeSystemMs = n.GetDoubleValue(); } },
                { "cpu_time_user_ms", n => { CpuTimeUserMs = n.GetDoubleValue(); } },
                { "dhcp_leases", n => { DhcpLeases = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_dhcp_lease>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_dhcp_lease.CreateFromDiscriminatorValue)?.AsList(); } },
                { "disks", n => { Disks = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ha_state", n => { HaState = n.GetStringValue(); } },
                { "ha_value", n => { HaValue = n.GetDoubleValue(); } },
                { "interfaces", n => { Interfaces = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_interface>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_interface.CreateFromDiscriminatorValue)?.AsList(); } },
                { "io_pressure_full_10s", n => { IoPressureFull10s = n.GetDoubleValue(); } },
                { "io_pressure_full_300s", n => { IoPressureFull300s = n.GetDoubleValue(); } },
                { "io_pressure_full_60s", n => { IoPressureFull60s = n.GetDoubleValue(); } },
                { "io_pressure_full_total_us", n => { IoPressureFullTotalUs = n.GetDoubleValue(); } },
                { "io_pressure_some_10s", n => { IoPressureSome10s = n.GetDoubleValue(); } },
                { "io_pressure_some_300s", n => { IoPressureSome300s = n.GetDoubleValue(); } },
                { "io_pressure_some_60s", n => { IoPressureSome60s = n.GetDoubleValue(); } },
                { "io_pressure_some_total_us", n => { IoPressureSomeTotalUs = n.GetDoubleValue(); } },
                { "kernel_btime", n => { KernelBtime = n.GetDoubleValue(); } },
                { "kernel_ctxt", n => { KernelCtxt = n.GetDoubleValue(); } },
                { "kernel_processes", n => { KernelProcesses = n.GetDoubleValue(); } },
                { "kernel_processes_blocked", n => { KernelProcessesBlocked = n.GetDoubleValue(); } },
                { "kernel_processes_running", n => { KernelProcessesRunning = n.GetDoubleValue(); } },
                { "load_average_15m", n => { LoadAverage15m = n.GetDoubleValue(); } },
                { "load_average_1m", n => { LoadAverage1m = n.GetDoubleValue(); } },
                { "load_average_5m", n => { LoadAverage5m = n.GetDoubleValue(); } },
                { "load_average_cur", n => { LoadAverageCur = n.GetDoubleValue(); } },
                { "load_average_max", n => { LoadAverageMax = n.GetDoubleValue(); } },
                { "memory_active_bytes", n => { MemoryActiveBytes = n.GetDoubleValue(); } },
                { "memory_anon_hugepages_bytes", n => { MemoryAnonHugepagesBytes = n.GetDoubleValue(); } },
                { "memory_anon_pages_bytes", n => { MemoryAnonPagesBytes = n.GetDoubleValue(); } },
                { "memory_available_bytes", n => { MemoryAvailableBytes = n.GetDoubleValue(); } },
                { "memory_bounce_bytes", n => { MemoryBounceBytes = n.GetDoubleValue(); } },
                { "memory_buffers_bytes", n => { MemoryBuffersBytes = n.GetDoubleValue(); } },
                { "memory_cached_bytes", n => { MemoryCachedBytes = n.GetDoubleValue(); } },
                { "memory_cma_free_bytes", n => { MemoryCmaFreeBytes = n.GetDoubleValue(); } },
                { "memory_cma_total_bytes", n => { MemoryCmaTotalBytes = n.GetDoubleValue(); } },
                { "memory_commit_limit_bytes", n => { MemoryCommitLimitBytes = n.GetDoubleValue(); } },
                { "memory_committed_as_bytes", n => { MemoryCommittedAsBytes = n.GetDoubleValue(); } },
                { "memory_dirty_bytes", n => { MemoryDirtyBytes = n.GetDoubleValue(); } },
                { "memory_free_bytes", n => { MemoryFreeBytes = n.GetDoubleValue(); } },
                { "memory_high_free_bytes", n => { MemoryHighFreeBytes = n.GetDoubleValue(); } },
                { "memory_high_total_bytes", n => { MemoryHighTotalBytes = n.GetDoubleValue(); } },
                { "memory_hugepages_free", n => { MemoryHugepagesFree = n.GetDoubleValue(); } },
                { "memory_hugepages_rsvd", n => { MemoryHugepagesRsvd = n.GetDoubleValue(); } },
                { "memory_hugepages_surp", n => { MemoryHugepagesSurp = n.GetDoubleValue(); } },
                { "memory_hugepages_total", n => { MemoryHugepagesTotal = n.GetDoubleValue(); } },
                { "memory_hugepagesize_bytes", n => { MemoryHugepagesizeBytes = n.GetDoubleValue(); } },
                { "memory_inactive_bytes", n => { MemoryInactiveBytes = n.GetDoubleValue(); } },
                { "memory_k_reclaimable_bytes", n => { MemoryKReclaimableBytes = n.GetDoubleValue(); } },
                { "memory_kernel_stack_bytes", n => { MemoryKernelStackBytes = n.GetDoubleValue(); } },
                { "memory_low_free_bytes", n => { MemoryLowFreeBytes = n.GetDoubleValue(); } },
                { "memory_low_total_bytes", n => { MemoryLowTotalBytes = n.GetDoubleValue(); } },
                { "memory_mapped_bytes", n => { MemoryMappedBytes = n.GetDoubleValue(); } },
                { "memory_page_tables_bytes", n => { MemoryPageTablesBytes = n.GetDoubleValue(); } },
                { "memory_per_cpu_bytes", n => { MemoryPerCpuBytes = n.GetDoubleValue(); } },
                { "memory_pressure_full_10s", n => { MemoryPressureFull10s = n.GetDoubleValue(); } },
                { "memory_pressure_full_300s", n => { MemoryPressureFull300s = n.GetDoubleValue(); } },
                { "memory_pressure_full_60s", n => { MemoryPressureFull60s = n.GetDoubleValue(); } },
                { "memory_pressure_full_total_us", n => { MemoryPressureFullTotalUs = n.GetDoubleValue(); } },
                { "memory_pressure_some_10s", n => { MemoryPressureSome10s = n.GetDoubleValue(); } },
                { "memory_pressure_some_300s", n => { MemoryPressureSome300s = n.GetDoubleValue(); } },
                { "memory_pressure_some_60s", n => { MemoryPressureSome60s = n.GetDoubleValue(); } },
                { "memory_pressure_some_total_us", n => { MemoryPressureSomeTotalUs = n.GetDoubleValue(); } },
                { "memory_s_reclaimable_bytes", n => { MemorySReclaimableBytes = n.GetDoubleValue(); } },
                { "memory_s_unreclaim_bytes", n => { MemorySUnreclaimBytes = n.GetDoubleValue(); } },
                { "memory_secondary_page_tables_bytes", n => { MemorySecondaryPageTablesBytes = n.GetDoubleValue(); } },
                { "memory_shmem_bytes", n => { MemoryShmemBytes = n.GetDoubleValue(); } },
                { "memory_shmem_hugepages_bytes", n => { MemoryShmemHugepagesBytes = n.GetDoubleValue(); } },
                { "memory_shmem_pmd_mapped_bytes", n => { MemoryShmemPmdMappedBytes = n.GetDoubleValue(); } },
                { "memory_slab_bytes", n => { MemorySlabBytes = n.GetDoubleValue(); } },
                { "memory_swap_cached_bytes", n => { MemorySwapCachedBytes = n.GetDoubleValue(); } },
                { "memory_swap_free_bytes", n => { MemorySwapFreeBytes = n.GetDoubleValue(); } },
                { "memory_swap_total_bytes", n => { MemorySwapTotalBytes = n.GetDoubleValue(); } },
                { "memory_total_bytes", n => { MemoryTotalBytes = n.GetDoubleValue(); } },
                { "memory_vmalloc_chunk_bytes", n => { MemoryVmallocChunkBytes = n.GetDoubleValue(); } },
                { "memory_vmalloc_total_bytes", n => { MemoryVmallocTotalBytes = n.GetDoubleValue(); } },
                { "memory_vmalloc_used_bytes", n => { MemoryVmallocUsedBytes = n.GetDoubleValue(); } },
                { "memory_writeback_bytes", n => { MemoryWritebackBytes = n.GetDoubleValue(); } },
                { "memory_writeback_tmp_bytes", n => { MemoryWritebackTmpBytes = n.GetDoubleValue(); } },
                { "memory_z_swap_bytes", n => { MemoryZSwapBytes = n.GetDoubleValue(); } },
                { "memory_z_swapped_bytes", n => { MemoryZSwappedBytes = n.GetDoubleValue(); } },
                { "mounts", n => { Mounts = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "netdevs", n => { Netdevs = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev.CreateFromDiscriminatorValue)?.AsList(); } },
                { "snmp_icmp_in_addr_mask_reps", n => { SnmpIcmpInAddrMaskReps = n.GetDoubleValue(); } },
                { "snmp_icmp_in_addr_masks", n => { SnmpIcmpInAddrMasks = n.GetDoubleValue(); } },
                { "snmp_icmp_in_csum_errors", n => { SnmpIcmpInCsumErrors = n.GetDoubleValue(); } },
                { "snmp_icmp_in_dest_unreachs", n => { SnmpIcmpInDestUnreachs = n.GetDoubleValue(); } },
                { "snmp_icmp_in_echo_reps", n => { SnmpIcmpInEchoReps = n.GetDoubleValue(); } },
                { "snmp_icmp_in_echos", n => { SnmpIcmpInEchos = n.GetDoubleValue(); } },
                { "snmp_icmp_in_errors", n => { SnmpIcmpInErrors = n.GetDoubleValue(); } },
                { "snmp_icmp_in_msgs", n => { SnmpIcmpInMsgs = n.GetDoubleValue(); } },
                { "snmp_icmp_in_parm_probs", n => { SnmpIcmpInParmProbs = n.GetDoubleValue(); } },
                { "snmp_icmp_in_redirects", n => { SnmpIcmpInRedirects = n.GetDoubleValue(); } },
                { "snmp_icmp_in_src_quenchs", n => { SnmpIcmpInSrcQuenchs = n.GetDoubleValue(); } },
                { "snmp_icmp_in_time_excds", n => { SnmpIcmpInTimeExcds = n.GetDoubleValue(); } },
                { "snmp_icmp_in_timestamp_reps", n => { SnmpIcmpInTimestampReps = n.GetDoubleValue(); } },
                { "snmp_icmp_in_timestamps", n => { SnmpIcmpInTimestamps = n.GetDoubleValue(); } },
                { "snmp_icmp_out_addr_mask_reps", n => { SnmpIcmpOutAddrMaskReps = n.GetDoubleValue(); } },
                { "snmp_icmp_out_addr_masks", n => { SnmpIcmpOutAddrMasks = n.GetDoubleValue(); } },
                { "snmp_icmp_out_dest_unreachs", n => { SnmpIcmpOutDestUnreachs = n.GetDoubleValue(); } },
                { "snmp_icmp_out_echo_reps", n => { SnmpIcmpOutEchoReps = n.GetDoubleValue(); } },
                { "snmp_icmp_out_echos", n => { SnmpIcmpOutEchos = n.GetDoubleValue(); } },
                { "snmp_icmp_out_errors", n => { SnmpIcmpOutErrors = n.GetDoubleValue(); } },
                { "snmp_icmp_out_msgs", n => { SnmpIcmpOutMsgs = n.GetDoubleValue(); } },
                { "snmp_icmp_out_parm_probs", n => { SnmpIcmpOutParmProbs = n.GetDoubleValue(); } },
                { "snmp_icmp_out_redirects", n => { SnmpIcmpOutRedirects = n.GetDoubleValue(); } },
                { "snmp_icmp_out_src_quenchs", n => { SnmpIcmpOutSrcQuenchs = n.GetDoubleValue(); } },
                { "snmp_icmp_out_time_excds", n => { SnmpIcmpOutTimeExcds = n.GetDoubleValue(); } },
                { "snmp_icmp_out_timestamp_reps", n => { SnmpIcmpOutTimestampReps = n.GetDoubleValue(); } },
                { "snmp_icmp_out_timestamps", n => { SnmpIcmpOutTimestamps = n.GetDoubleValue(); } },
                { "snmp_ip_default_ttl", n => { SnmpIpDefaultTtl = n.GetDoubleValue(); } },
                { "snmp_ip_forw_datagrams", n => { SnmpIpForwDatagrams = n.GetDoubleValue(); } },
                { "snmp_ip_forwarding_enabled", n => { SnmpIpForwardingEnabled = n.GetBoolValue(); } },
                { "snmp_ip_frag_creates", n => { SnmpIpFragCreates = n.GetDoubleValue(); } },
                { "snmp_ip_frag_fails", n => { SnmpIpFragFails = n.GetDoubleValue(); } },
                { "snmp_ip_frag_oks", n => { SnmpIpFragOks = n.GetDoubleValue(); } },
                { "snmp_ip_in_addr_errors", n => { SnmpIpInAddrErrors = n.GetDoubleValue(); } },
                { "snmp_ip_in_delivers", n => { SnmpIpInDelivers = n.GetDoubleValue(); } },
                { "snmp_ip_in_discards", n => { SnmpIpInDiscards = n.GetDoubleValue(); } },
                { "snmp_ip_in_hdr_errors", n => { SnmpIpInHdrErrors = n.GetDoubleValue(); } },
                { "snmp_ip_in_receives", n => { SnmpIpInReceives = n.GetDoubleValue(); } },
                { "snmp_ip_in_unknown_protos", n => { SnmpIpInUnknownProtos = n.GetDoubleValue(); } },
                { "snmp_ip_out_discards", n => { SnmpIpOutDiscards = n.GetDoubleValue(); } },
                { "snmp_ip_out_no_routes", n => { SnmpIpOutNoRoutes = n.GetDoubleValue(); } },
                { "snmp_ip_out_requests", n => { SnmpIpOutRequests = n.GetDoubleValue(); } },
                { "snmp_ip_reasm_fails", n => { SnmpIpReasmFails = n.GetDoubleValue(); } },
                { "snmp_ip_reasm_oks", n => { SnmpIpReasmOks = n.GetDoubleValue(); } },
                { "snmp_ip_reasm_reqds", n => { SnmpIpReasmReqds = n.GetDoubleValue(); } },
                { "snmp_ip_reasm_timeout", n => { SnmpIpReasmTimeout = n.GetDoubleValue(); } },
                { "snmp_tcp_active_opens", n => { SnmpTcpActiveOpens = n.GetDoubleValue(); } },
                { "snmp_tcp_attempt_fails", n => { SnmpTcpAttemptFails = n.GetDoubleValue(); } },
                { "snmp_tcp_curr_estab", n => { SnmpTcpCurrEstab = n.GetDoubleValue(); } },
                { "snmp_tcp_estab_resets", n => { SnmpTcpEstabResets = n.GetDoubleValue(); } },
                { "snmp_tcp_in_csum_errors", n => { SnmpTcpInCsumErrors = n.GetDoubleValue(); } },
                { "snmp_tcp_in_errs", n => { SnmpTcpInErrs = n.GetDoubleValue(); } },
                { "snmp_tcp_in_segs", n => { SnmpTcpInSegs = n.GetDoubleValue(); } },
                { "snmp_tcp_max_conn", n => { SnmpTcpMaxConn = n.GetDoubleValue(); } },
                { "snmp_tcp_out_rsts", n => { SnmpTcpOutRsts = n.GetDoubleValue(); } },
                { "snmp_tcp_out_segs", n => { SnmpTcpOutSegs = n.GetDoubleValue(); } },
                { "snmp_tcp_passive_opens", n => { SnmpTcpPassiveOpens = n.GetDoubleValue(); } },
                { "snmp_tcp_retrans_segs", n => { SnmpTcpRetransSegs = n.GetDoubleValue(); } },
                { "snmp_tcp_rto_max", n => { SnmpTcpRtoMax = n.GetDoubleValue(); } },
                { "snmp_tcp_rto_min", n => { SnmpTcpRtoMin = n.GetDoubleValue(); } },
                { "snmp_udp_in_datagrams", n => { SnmpUdpInDatagrams = n.GetDoubleValue(); } },
                { "snmp_udp_in_errors", n => { SnmpUdpInErrors = n.GetDoubleValue(); } },
                { "snmp_udp_no_ports", n => { SnmpUdpNoPorts = n.GetDoubleValue(); } },
                { "snmp_udp_out_datagrams", n => { SnmpUdpOutDatagrams = n.GetDoubleValue(); } },
                { "system_boot_time_s", n => { SystemBootTimeS = n.GetDoubleValue(); } },
                { "t", n => { T = n.GetDoubleValue(); } },
                { "thermals", n => { Thermals = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_thermal>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_thermal.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tunnels", n => { Tunnels = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "uptime_idle_ms", n => { UptimeIdleMs = n.GetDoubleValue(); } },
                { "uptime_total_ms", n => { UptimeTotalMs = n.GetDoubleValue(); } },
                { "v", n => { V = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_bond>("bonds", Bonds);
            writer.WriteDoubleValue("count_reclaimed_paths", CountReclaimedPaths);
            writer.WriteDoubleValue("count_reclaim_failures", CountReclaimFailures);
            writer.WriteDoubleValue("count_record_failed", CountRecordFailed);
            writer.WriteDoubleValue("count_transmit_failures", CountTransmitFailures);
            writer.WriteDoubleValue("cpu_count", CpuCount);
            writer.WriteDoubleValue("cpu_pressure_10s", CpuPressure10s);
            writer.WriteDoubleValue("cpu_pressure_300s", CpuPressure300s);
            writer.WriteDoubleValue("cpu_pressure_60s", CpuPressure60s);
            writer.WriteDoubleValue("cpu_pressure_total_us", CpuPressureTotalUs);
            writer.WriteDoubleValue("cpu_time_guest_ms", CpuTimeGuestMs);
            writer.WriteDoubleValue("cpu_time_guest_nice_ms", CpuTimeGuestNiceMs);
            writer.WriteDoubleValue("cpu_time_idle_ms", CpuTimeIdleMs);
            writer.WriteDoubleValue("cpu_time_iowait_ms", CpuTimeIowaitMs);
            writer.WriteDoubleValue("cpu_time_irq_ms", CpuTimeIrqMs);
            writer.WriteDoubleValue("cpu_time_nice_ms", CpuTimeNiceMs);
            writer.WriteDoubleValue("cpu_time_softirq_ms", CpuTimeSoftirqMs);
            writer.WriteDoubleValue("cpu_time_steal_ms", CpuTimeStealMs);
            writer.WriteDoubleValue("cpu_time_system_ms", CpuTimeSystemMs);
            writer.WriteDoubleValue("cpu_time_user_ms", CpuTimeUserMs);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_dhcp_lease>("dhcp_leases", DhcpLeases);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk>("disks", Disks);
            writer.WriteStringValue("ha_state", HaState);
            writer.WriteDoubleValue("ha_value", HaValue);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_interface>("interfaces", Interfaces);
            writer.WriteDoubleValue("io_pressure_full_10s", IoPressureFull10s);
            writer.WriteDoubleValue("io_pressure_full_300s", IoPressureFull300s);
            writer.WriteDoubleValue("io_pressure_full_60s", IoPressureFull60s);
            writer.WriteDoubleValue("io_pressure_full_total_us", IoPressureFullTotalUs);
            writer.WriteDoubleValue("io_pressure_some_10s", IoPressureSome10s);
            writer.WriteDoubleValue("io_pressure_some_300s", IoPressureSome300s);
            writer.WriteDoubleValue("io_pressure_some_60s", IoPressureSome60s);
            writer.WriteDoubleValue("io_pressure_some_total_us", IoPressureSomeTotalUs);
            writer.WriteDoubleValue("kernel_btime", KernelBtime);
            writer.WriteDoubleValue("kernel_ctxt", KernelCtxt);
            writer.WriteDoubleValue("kernel_processes", KernelProcesses);
            writer.WriteDoubleValue("kernel_processes_blocked", KernelProcessesBlocked);
            writer.WriteDoubleValue("kernel_processes_running", KernelProcessesRunning);
            writer.WriteDoubleValue("load_average_15m", LoadAverage15m);
            writer.WriteDoubleValue("load_average_1m", LoadAverage1m);
            writer.WriteDoubleValue("load_average_5m", LoadAverage5m);
            writer.WriteDoubleValue("load_average_cur", LoadAverageCur);
            writer.WriteDoubleValue("load_average_max", LoadAverageMax);
            writer.WriteDoubleValue("memory_active_bytes", MemoryActiveBytes);
            writer.WriteDoubleValue("memory_anon_hugepages_bytes", MemoryAnonHugepagesBytes);
            writer.WriteDoubleValue("memory_anon_pages_bytes", MemoryAnonPagesBytes);
            writer.WriteDoubleValue("memory_available_bytes", MemoryAvailableBytes);
            writer.WriteDoubleValue("memory_bounce_bytes", MemoryBounceBytes);
            writer.WriteDoubleValue("memory_buffers_bytes", MemoryBuffersBytes);
            writer.WriteDoubleValue("memory_cached_bytes", MemoryCachedBytes);
            writer.WriteDoubleValue("memory_cma_free_bytes", MemoryCmaFreeBytes);
            writer.WriteDoubleValue("memory_cma_total_bytes", MemoryCmaTotalBytes);
            writer.WriteDoubleValue("memory_commit_limit_bytes", MemoryCommitLimitBytes);
            writer.WriteDoubleValue("memory_committed_as_bytes", MemoryCommittedAsBytes);
            writer.WriteDoubleValue("memory_dirty_bytes", MemoryDirtyBytes);
            writer.WriteDoubleValue("memory_free_bytes", MemoryFreeBytes);
            writer.WriteDoubleValue("memory_high_free_bytes", MemoryHighFreeBytes);
            writer.WriteDoubleValue("memory_high_total_bytes", MemoryHighTotalBytes);
            writer.WriteDoubleValue("memory_hugepages_free", MemoryHugepagesFree);
            writer.WriteDoubleValue("memory_hugepagesize_bytes", MemoryHugepagesizeBytes);
            writer.WriteDoubleValue("memory_hugepages_rsvd", MemoryHugepagesRsvd);
            writer.WriteDoubleValue("memory_hugepages_surp", MemoryHugepagesSurp);
            writer.WriteDoubleValue("memory_hugepages_total", MemoryHugepagesTotal);
            writer.WriteDoubleValue("memory_inactive_bytes", MemoryInactiveBytes);
            writer.WriteDoubleValue("memory_kernel_stack_bytes", MemoryKernelStackBytes);
            writer.WriteDoubleValue("memory_k_reclaimable_bytes", MemoryKReclaimableBytes);
            writer.WriteDoubleValue("memory_low_free_bytes", MemoryLowFreeBytes);
            writer.WriteDoubleValue("memory_low_total_bytes", MemoryLowTotalBytes);
            writer.WriteDoubleValue("memory_mapped_bytes", MemoryMappedBytes);
            writer.WriteDoubleValue("memory_page_tables_bytes", MemoryPageTablesBytes);
            writer.WriteDoubleValue("memory_per_cpu_bytes", MemoryPerCpuBytes);
            writer.WriteDoubleValue("memory_pressure_full_10s", MemoryPressureFull10s);
            writer.WriteDoubleValue("memory_pressure_full_300s", MemoryPressureFull300s);
            writer.WriteDoubleValue("memory_pressure_full_60s", MemoryPressureFull60s);
            writer.WriteDoubleValue("memory_pressure_full_total_us", MemoryPressureFullTotalUs);
            writer.WriteDoubleValue("memory_pressure_some_10s", MemoryPressureSome10s);
            writer.WriteDoubleValue("memory_pressure_some_300s", MemoryPressureSome300s);
            writer.WriteDoubleValue("memory_pressure_some_60s", MemoryPressureSome60s);
            writer.WriteDoubleValue("memory_pressure_some_total_us", MemoryPressureSomeTotalUs);
            writer.WriteDoubleValue("memory_secondary_page_tables_bytes", MemorySecondaryPageTablesBytes);
            writer.WriteDoubleValue("memory_shmem_bytes", MemoryShmemBytes);
            writer.WriteDoubleValue("memory_shmem_hugepages_bytes", MemoryShmemHugepagesBytes);
            writer.WriteDoubleValue("memory_shmem_pmd_mapped_bytes", MemoryShmemPmdMappedBytes);
            writer.WriteDoubleValue("memory_slab_bytes", MemorySlabBytes);
            writer.WriteDoubleValue("memory_s_reclaimable_bytes", MemorySReclaimableBytes);
            writer.WriteDoubleValue("memory_s_unreclaim_bytes", MemorySUnreclaimBytes);
            writer.WriteDoubleValue("memory_swap_cached_bytes", MemorySwapCachedBytes);
            writer.WriteDoubleValue("memory_swap_free_bytes", MemorySwapFreeBytes);
            writer.WriteDoubleValue("memory_swap_total_bytes", MemorySwapTotalBytes);
            writer.WriteDoubleValue("memory_total_bytes", MemoryTotalBytes);
            writer.WriteDoubleValue("memory_vmalloc_chunk_bytes", MemoryVmallocChunkBytes);
            writer.WriteDoubleValue("memory_vmalloc_total_bytes", MemoryVmallocTotalBytes);
            writer.WriteDoubleValue("memory_vmalloc_used_bytes", MemoryVmallocUsedBytes);
            writer.WriteDoubleValue("memory_writeback_bytes", MemoryWritebackBytes);
            writer.WriteDoubleValue("memory_writeback_tmp_bytes", MemoryWritebackTmpBytes);
            writer.WriteDoubleValue("memory_z_swap_bytes", MemoryZSwapBytes);
            writer.WriteDoubleValue("memory_z_swapped_bytes", MemoryZSwappedBytes);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_mount>("mounts", Mounts);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_netdev>("netdevs", Netdevs);
            writer.WriteDoubleValue("snmp_icmp_in_addr_mask_reps", SnmpIcmpInAddrMaskReps);
            writer.WriteDoubleValue("snmp_icmp_in_addr_masks", SnmpIcmpInAddrMasks);
            writer.WriteDoubleValue("snmp_icmp_in_csum_errors", SnmpIcmpInCsumErrors);
            writer.WriteDoubleValue("snmp_icmp_in_dest_unreachs", SnmpIcmpInDestUnreachs);
            writer.WriteDoubleValue("snmp_icmp_in_echo_reps", SnmpIcmpInEchoReps);
            writer.WriteDoubleValue("snmp_icmp_in_echos", SnmpIcmpInEchos);
            writer.WriteDoubleValue("snmp_icmp_in_errors", SnmpIcmpInErrors);
            writer.WriteDoubleValue("snmp_icmp_in_msgs", SnmpIcmpInMsgs);
            writer.WriteDoubleValue("snmp_icmp_in_parm_probs", SnmpIcmpInParmProbs);
            writer.WriteDoubleValue("snmp_icmp_in_redirects", SnmpIcmpInRedirects);
            writer.WriteDoubleValue("snmp_icmp_in_src_quenchs", SnmpIcmpInSrcQuenchs);
            writer.WriteDoubleValue("snmp_icmp_in_time_excds", SnmpIcmpInTimeExcds);
            writer.WriteDoubleValue("snmp_icmp_in_timestamp_reps", SnmpIcmpInTimestampReps);
            writer.WriteDoubleValue("snmp_icmp_in_timestamps", SnmpIcmpInTimestamps);
            writer.WriteDoubleValue("snmp_icmp_out_addr_mask_reps", SnmpIcmpOutAddrMaskReps);
            writer.WriteDoubleValue("snmp_icmp_out_addr_masks", SnmpIcmpOutAddrMasks);
            writer.WriteDoubleValue("snmp_icmp_out_dest_unreachs", SnmpIcmpOutDestUnreachs);
            writer.WriteDoubleValue("snmp_icmp_out_echo_reps", SnmpIcmpOutEchoReps);
            writer.WriteDoubleValue("snmp_icmp_out_echos", SnmpIcmpOutEchos);
            writer.WriteDoubleValue("snmp_icmp_out_errors", SnmpIcmpOutErrors);
            writer.WriteDoubleValue("snmp_icmp_out_msgs", SnmpIcmpOutMsgs);
            writer.WriteDoubleValue("snmp_icmp_out_parm_probs", SnmpIcmpOutParmProbs);
            writer.WriteDoubleValue("snmp_icmp_out_redirects", SnmpIcmpOutRedirects);
            writer.WriteDoubleValue("snmp_icmp_out_src_quenchs", SnmpIcmpOutSrcQuenchs);
            writer.WriteDoubleValue("snmp_icmp_out_time_excds", SnmpIcmpOutTimeExcds);
            writer.WriteDoubleValue("snmp_icmp_out_timestamp_reps", SnmpIcmpOutTimestampReps);
            writer.WriteDoubleValue("snmp_icmp_out_timestamps", SnmpIcmpOutTimestamps);
            writer.WriteDoubleValue("snmp_ip_default_ttl", SnmpIpDefaultTtl);
            writer.WriteBoolValue("snmp_ip_forwarding_enabled", SnmpIpForwardingEnabled);
            writer.WriteDoubleValue("snmp_ip_forw_datagrams", SnmpIpForwDatagrams);
            writer.WriteDoubleValue("snmp_ip_frag_creates", SnmpIpFragCreates);
            writer.WriteDoubleValue("snmp_ip_frag_fails", SnmpIpFragFails);
            writer.WriteDoubleValue("snmp_ip_frag_oks", SnmpIpFragOks);
            writer.WriteDoubleValue("snmp_ip_in_addr_errors", SnmpIpInAddrErrors);
            writer.WriteDoubleValue("snmp_ip_in_delivers", SnmpIpInDelivers);
            writer.WriteDoubleValue("snmp_ip_in_discards", SnmpIpInDiscards);
            writer.WriteDoubleValue("snmp_ip_in_hdr_errors", SnmpIpInHdrErrors);
            writer.WriteDoubleValue("snmp_ip_in_receives", SnmpIpInReceives);
            writer.WriteDoubleValue("snmp_ip_in_unknown_protos", SnmpIpInUnknownProtos);
            writer.WriteDoubleValue("snmp_ip_out_discards", SnmpIpOutDiscards);
            writer.WriteDoubleValue("snmp_ip_out_no_routes", SnmpIpOutNoRoutes);
            writer.WriteDoubleValue("snmp_ip_out_requests", SnmpIpOutRequests);
            writer.WriteDoubleValue("snmp_ip_reasm_fails", SnmpIpReasmFails);
            writer.WriteDoubleValue("snmp_ip_reasm_oks", SnmpIpReasmOks);
            writer.WriteDoubleValue("snmp_ip_reasm_reqds", SnmpIpReasmReqds);
            writer.WriteDoubleValue("snmp_ip_reasm_timeout", SnmpIpReasmTimeout);
            writer.WriteDoubleValue("snmp_tcp_active_opens", SnmpTcpActiveOpens);
            writer.WriteDoubleValue("snmp_tcp_attempt_fails", SnmpTcpAttemptFails);
            writer.WriteDoubleValue("snmp_tcp_curr_estab", SnmpTcpCurrEstab);
            writer.WriteDoubleValue("snmp_tcp_estab_resets", SnmpTcpEstabResets);
            writer.WriteDoubleValue("snmp_tcp_in_csum_errors", SnmpTcpInCsumErrors);
            writer.WriteDoubleValue("snmp_tcp_in_errs", SnmpTcpInErrs);
            writer.WriteDoubleValue("snmp_tcp_in_segs", SnmpTcpInSegs);
            writer.WriteDoubleValue("snmp_tcp_max_conn", SnmpTcpMaxConn);
            writer.WriteDoubleValue("snmp_tcp_out_rsts", SnmpTcpOutRsts);
            writer.WriteDoubleValue("snmp_tcp_out_segs", SnmpTcpOutSegs);
            writer.WriteDoubleValue("snmp_tcp_passive_opens", SnmpTcpPassiveOpens);
            writer.WriteDoubleValue("snmp_tcp_retrans_segs", SnmpTcpRetransSegs);
            writer.WriteDoubleValue("snmp_tcp_rto_max", SnmpTcpRtoMax);
            writer.WriteDoubleValue("snmp_tcp_rto_min", SnmpTcpRtoMin);
            writer.WriteDoubleValue("snmp_udp_in_datagrams", SnmpUdpInDatagrams);
            writer.WriteDoubleValue("snmp_udp_in_errors", SnmpUdpInErrors);
            writer.WriteDoubleValue("snmp_udp_no_ports", SnmpUdpNoPorts);
            writer.WriteDoubleValue("snmp_udp_out_datagrams", SnmpUdpOutDatagrams);
            writer.WriteDoubleValue("system_boot_time_s", SystemBootTimeS);
            writer.WriteDoubleValue("t", T);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_thermal>("thermals", Thermals);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel>("tunnels", Tunnels);
            writer.WriteDoubleValue("uptime_idle_ms", UptimeIdleMs);
            writer.WriteDoubleValue("uptime_total_ms", UptimeTotalMs);
            writer.WriteStringValue("v", V);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
