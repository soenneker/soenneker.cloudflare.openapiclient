// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RegistrarApi_domains : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Shows if a domain is available for transferring into Cloudflare Registrar.</summary>
        public bool? Available { get; set; }
        /// <summary>Indicates if the domain can be registered as a new domain.</summary>
        public bool? CanRegister { get; set; }
        /// <summary>Shows time of creation.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Shows name of current registrar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentRegistrar { get; set; }
#nullable restore
#else
        public string CurrentRegistrar { get; set; }
#endif
        /// <summary>Shows when domain name registration expires.</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>Domain identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Shows whether a registrar lock is in place for a domain.</summary>
        public bool? Locked { get; set; }
        /// <summary>Shows contact information for domain registrant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_registrant_contact? RegistrantContact { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_registrant_contact RegistrantContact { get; set; }
#endif
        /// <summary>A comma-separated list of registry status codes. A full list of status codes can be found at [EPP Status Codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegistryStatuses { get; set; }
#nullable restore
#else
        public string RegistryStatuses { get; set; }
#endif
        /// <summary>Whether a particular TLD is currently supported by Cloudflare Registrar. Refer to [TLD Policies](https://www.cloudflare.com/tld-policies/) for a list of supported TLDs.</summary>
        public bool? SupportedTld { get; set; }
        /// <summary>Statuses for domain transfers into Cloudflare Registrar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_transfer_in? TransferIn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_transfer_in TransferIn { get; set; }
#endif
        /// <summary>Last updated.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_domains"/> and sets the default values.
        /// </summary>
        public RegistrarApi_domains()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_domains"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_domains CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_domains();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available", n => { Available = n.GetBoolValue(); } },
                { "can_register", n => { CanRegister = n.GetBoolValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "current_registrar", n => { CurrentRegistrar = n.GetStringValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "registrant_contact", n => { RegistrantContact = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_registrant_contact>(global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_registrant_contact.CreateFromDiscriminatorValue); } },
                { "registry_statuses", n => { RegistryStatuses = n.GetStringValue(); } },
                { "supported_tld", n => { SupportedTld = n.GetBoolValue(); } },
                { "transfer_in", n => { TransferIn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_transfer_in>(global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_transfer_in.CreateFromDiscriminatorValue); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("available", Available);
            writer.WriteBoolValue("can_register", CanRegister);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("current_registrar", CurrentRegistrar);
            writer.WriteDateTimeOffsetValue("expires_at", ExpiresAt);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_registrant_contact>("registrant_contact", RegistrantContact);
            writer.WriteStringValue("registry_statuses", RegistryStatuses);
            writer.WriteBoolValue("supported_tld", SupportedTld);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.RegistrarApi_transfer_in>("transfer_in", TransferIn);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
