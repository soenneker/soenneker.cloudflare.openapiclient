// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Pages_deployment_configs_values : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Constellation bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_ai_bindings? AiBindings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_ai_bindings AiBindings { get; set; }
#endif
        /// <summary>Whether to always use the latest compatibility date for Pages Functions.</summary>
        public bool? AlwaysUseLatestCompatibilityDate { get; set; }
        /// <summary>Analytics Engine bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_analytics_engine_datasets? AnalyticsEngineDatasets { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_analytics_engine_datasets AnalyticsEngineDatasets { get; set; }
#endif
        /// <summary>Browser bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_browsers? Browsers { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_browsers Browsers { get; set; }
#endif
        /// <summary>The major version of the build image to use for Pages Functions.</summary>
        public int? BuildImageMajorVersion { get; set; }
        /// <summary>Compatibility date used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompatibilityDate { get; set; }
#nullable restore
#else
        public string CompatibilityDate { get; set; }
#endif
        /// <summary>Compatibility flags used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CompatibilityFlags { get; set; }
#nullable restore
#else
        public List<string> CompatibilityFlags { get; set; }
#endif
        /// <summary>D1 databases used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_d1_databases? D1Databases { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_d1_databases D1Databases { get; set; }
#endif
        /// <summary>Durable Object namespaces used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_durable_object_namespaces? DurableObjectNamespaces { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_durable_object_namespaces DurableObjectNamespaces { get; set; }
#endif
        /// <summary>Environment variables used for builds and Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_env_vars? EnvVars { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_env_vars EnvVars { get; set; }
#endif
        /// <summary>Whether to fail open when the deployment config cannot be applied.</summary>
        public bool? FailOpen { get; set; }
        /// <summary>Hyperdrive bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_hyperdrive_bindings? HyperdriveBindings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_hyperdrive_bindings HyperdriveBindings { get; set; }
#endif
        /// <summary>KV namespaces used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_kv_namespaces? KvNamespaces { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_kv_namespaces KvNamespaces { get; set; }
#endif
        /// <summary>Limits for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_limits? Limits { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_limits Limits { get; set; }
#endif
        /// <summary>mTLS bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_mtls_certificates? MtlsCertificates { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_mtls_certificates MtlsCertificates { get; set; }
#endif
        /// <summary>Placement setting used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_placement? Placement { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_placement Placement { get; set; }
#endif
        /// <summary>Queue Producer bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_queue_producers? QueueProducers { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_queue_producers QueueProducers { get; set; }
#endif
        /// <summary>R2 buckets used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_r2_buckets? R2Buckets { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_r2_buckets R2Buckets { get; set; }
#endif
        /// <summary>Services used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_services? Services { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_services Services { get; set; }
#endif
        /// <summary>The usage model for Pages Functions.</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_usage_model? UsageModel { get; set; }
        /// <summary>Vectorize bindings used for Pages Functions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_vectorize_bindings? VectorizeBindings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_vectorize_bindings VectorizeBindings { get; set; }
#endif
        /// <summary>Hash of the Wrangler configuration used for the deployment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WranglerConfigHash { get; set; }
#nullable restore
#else
        public string WranglerConfigHash { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values"/> and sets the default values.
        /// </summary>
        public Pages_deployment_configs_values()
        {
            AdditionalData = new Dictionary<string, object>();
            UsageModel = global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_usage_model.Standard;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ai_bindings", n => { AiBindings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_ai_bindings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_ai_bindings.CreateFromDiscriminatorValue); } },
                { "always_use_latest_compatibility_date", n => { AlwaysUseLatestCompatibilityDate = n.GetBoolValue(); } },
                { "analytics_engine_datasets", n => { AnalyticsEngineDatasets = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_analytics_engine_datasets>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_analytics_engine_datasets.CreateFromDiscriminatorValue); } },
                { "browsers", n => { Browsers = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_browsers>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_browsers.CreateFromDiscriminatorValue); } },
                { "build_image_major_version", n => { BuildImageMajorVersion = n.GetIntValue(); } },
                { "compatibility_date", n => { CompatibilityDate = n.GetStringValue(); } },
                { "compatibility_flags", n => { CompatibilityFlags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "d1_databases", n => { D1Databases = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_d1_databases>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_d1_databases.CreateFromDiscriminatorValue); } },
                { "durable_object_namespaces", n => { DurableObjectNamespaces = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_durable_object_namespaces>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_durable_object_namespaces.CreateFromDiscriminatorValue); } },
                { "env_vars", n => { EnvVars = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_env_vars>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_env_vars.CreateFromDiscriminatorValue); } },
                { "fail_open", n => { FailOpen = n.GetBoolValue(); } },
                { "hyperdrive_bindings", n => { HyperdriveBindings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_hyperdrive_bindings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_hyperdrive_bindings.CreateFromDiscriminatorValue); } },
                { "kv_namespaces", n => { KvNamespaces = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_kv_namespaces>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_kv_namespaces.CreateFromDiscriminatorValue); } },
                { "limits", n => { Limits = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_limits>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_limits.CreateFromDiscriminatorValue); } },
                { "mtls_certificates", n => { MtlsCertificates = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_mtls_certificates>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_mtls_certificates.CreateFromDiscriminatorValue); } },
                { "placement", n => { Placement = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_placement>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_placement.CreateFromDiscriminatorValue); } },
                { "queue_producers", n => { QueueProducers = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_queue_producers>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_queue_producers.CreateFromDiscriminatorValue); } },
                { "r2_buckets", n => { R2Buckets = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_r2_buckets>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_r2_buckets.CreateFromDiscriminatorValue); } },
                { "services", n => { Services = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_services>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_services.CreateFromDiscriminatorValue); } },
                { "usage_model", n => { UsageModel = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_usage_model>(); } },
                { "vectorize_bindings", n => { VectorizeBindings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_vectorize_bindings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_vectorize_bindings.CreateFromDiscriminatorValue); } },
                { "wrangler_config_hash", n => { WranglerConfigHash = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_ai_bindings>("ai_bindings", AiBindings);
            writer.WriteBoolValue("always_use_latest_compatibility_date", AlwaysUseLatestCompatibilityDate);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_analytics_engine_datasets>("analytics_engine_datasets", AnalyticsEngineDatasets);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_browsers>("browsers", Browsers);
            writer.WriteIntValue("build_image_major_version", BuildImageMajorVersion);
            writer.WriteStringValue("compatibility_date", CompatibilityDate);
            writer.WriteCollectionOfPrimitiveValues<string>("compatibility_flags", CompatibilityFlags);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_d1_databases>("d1_databases", D1Databases);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_durable_object_namespaces>("durable_object_namespaces", DurableObjectNamespaces);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_env_vars>("env_vars", EnvVars);
            writer.WriteBoolValue("fail_open", FailOpen);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_hyperdrive_bindings>("hyperdrive_bindings", HyperdriveBindings);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_kv_namespaces>("kv_namespaces", KvNamespaces);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_limits>("limits", Limits);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_mtls_certificates>("mtls_certificates", MtlsCertificates);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_placement>("placement", Placement);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_queue_producers>("queue_producers", QueueProducers);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_r2_buckets>("r2_buckets", R2Buckets);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_services>("services", Services);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_usage_model>("usage_model", UsageModel);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Pages_deployment_configs_values_vectorize_bindings>("vectorize_bindings", VectorizeBindings);
            writer.WriteStringValue("wrangler_config_hash", WranglerConfigHash);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
