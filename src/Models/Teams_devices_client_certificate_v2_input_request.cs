// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Teams_devices_client_certificate_v2_input_request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>UUID of Cloudflare managed certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateId { get; set; }
#nullable restore
#else
        public string CertificateId { get; set; }
#endif
        /// <summary>Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.</summary>
        public bool? CheckPrivateKey { get; set; }
        /// <summary>Certificate Common Name. This may include one or more variables in the ${ } notation. Only ${serial_number} and ${hostname} are valid variables.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cn { get; set; }
#nullable restore
#else
        public string Cn { get; set; }
#endif
        /// <summary>List of values indicating purposes for which the certificate public key can be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_extended_key_usage_enum?>? ExtendedKeyUsage { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_extended_key_usage_enum?> ExtendedKeyUsage { get; set; }
#endif
        /// <summary>The locations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_locations? Locations { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_locations Locations { get; set; }
#endif
        /// <summary>Operating System.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_operating_system? OperatingSystem { get; set; }
        /// <summary>List of certificate Subject Alternative Names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SubjectAlternativeNames { get; set; }
#nullable restore
#else
        public List<string> SubjectAlternativeNames { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request"/> and sets the default values.
        /// </summary>
        public Teams_devices_client_certificate_v2_input_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certificate_id", n => { CertificateId = n.GetStringValue(); } },
                { "check_private_key", n => { CheckPrivateKey = n.GetBoolValue(); } },
                { "cn", n => { Cn = n.GetStringValue(); } },
                { "extended_key_usage", n => { ExtendedKeyUsage = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_extended_key_usage_enum>()?.AsList(); } },
                { "locations", n => { Locations = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_locations>(global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_locations.CreateFromDiscriminatorValue); } },
                { "operating_system", n => { OperatingSystem = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_operating_system>(); } },
                { "subject_alternative_names", n => { SubjectAlternativeNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("certificate_id", CertificateId);
            writer.WriteBoolValue("check_private_key", CheckPrivateKey);
            writer.WriteStringValue("cn", Cn);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_extended_key_usage_enum>("extended_key_usage", ExtendedKeyUsage);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_locations>("locations", Locations);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Teams_devices_client_certificate_v2_input_request_operating_system>("operating_system", OperatingSystem);
            writer.WriteCollectionOfPrimitiveValues<string>("subject_alternative_names", SubjectAlternativeNames);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
