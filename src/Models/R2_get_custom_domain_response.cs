// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class R2_get_custom_domain_response : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ciphers { get; set; }
#nullable restore
#else
        public List<string> Ciphers { get; set; }
#endif
        /// <summary>Domain name of the custom domain to be added.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>Whether this bucket is publicly accessible at the specified custom domain.</summary>
        public bool? Enabled { get; set; }
        /// <summary>Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_minTLS? MinTLS { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_status? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_status Status { get; set; }
#endif
        /// <summary>Zone ID of the custom domain resides in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneId { get; set; }
#nullable restore
#else
        public string ZoneId { get; set; }
#endif
        /// <summary>Zone that the custom domain resides in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneName { get; set; }
#nullable restore
#else
        public string ZoneName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response"/> and sets the default values.
        /// </summary>
        public R2_get_custom_domain_response()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ciphers", n => { Ciphers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "minTLS", n => { MinTLS = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_minTLS>(); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_status>(global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_status.CreateFromDiscriminatorValue); } },
                { "zoneId", n => { ZoneId = n.GetStringValue(); } },
                { "zoneName", n => { ZoneName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("ciphers", Ciphers);
            writer.WriteStringValue("domain", Domain);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_minTLS>("minTLS", MinTLS);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.R2_get_custom_domain_response_status>("status", Status);
            writer.WriteStringValue("zoneId", ZoneId);
            writer.WriteStringValue("zoneName", ZoneName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
