// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Realtimekit_ActiveSession : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the meeting this session is associated with. In the case of V2 meetings, it is always a UUID. In V1 meetings, it is a room name of the form `abcdef-ghijkl`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssociatedId { get; set; }
#nullable restore
#else
        public string AssociatedId { get; set; }
#endif
        /// <summary>The breakout_rooms property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession>? BreakoutRooms { get; private set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession> BreakoutRooms { get; private set; }
#endif
        /// <summary>timestamp when session created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>timestamp when session ended</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndedAt { get; set; }
#nullable restore
#else
        public string EndedAt { get; set; }
#endif
        /// <summary>ID of the session</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>number of participants currently in the session</summary>
        public double? LiveParticipants { get; set; }
        /// <summary>number of maximum participants that were in the session</summary>
        public double? MaxConcurrentParticipants { get; set; }
        /// <summary>Title of the meeting this session belongs to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeetingDisplayName { get; set; }
#nullable restore
#else
        public string MeetingDisplayName { get; set; }
#endif
        /// <summary>Any meta data about session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_meta? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_meta Meta { get; set; }
#endif
        /// <summary>number of minutes consumed since the session started</summary>
        public double? MinutesConsumed { get; set; }
        /// <summary>Organization id that hosted this session</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationId { get; set; }
#nullable restore
#else
        public string OrganizationId { get; set; }
#endif
        /// <summary>timestamp when session started</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartedAt { get; set; }
#nullable restore
#else
        public string StartedAt { get; set; }
#endif
        /// <summary>current status of session</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_status? Status { get; set; }
        /// <summary>type of session</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_type? Type { get; set; }
        /// <summary>timestamp when session was last updated</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession"/> and sets the default values.
        /// </summary>
        public Realtimekit_ActiveSession()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "associated_id", n => { AssociatedId = n.GetStringValue(); } },
                { "breakout_rooms", n => { BreakoutRooms = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession.CreateFromDiscriminatorValue)?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "ended_at", n => { EndedAt = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "live_participants", n => { LiveParticipants = n.GetDoubleValue(); } },
                { "max_concurrent_participants", n => { MaxConcurrentParticipants = n.GetDoubleValue(); } },
                { "meeting_display_name", n => { MeetingDisplayName = n.GetStringValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_meta>(global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_meta.CreateFromDiscriminatorValue); } },
                { "minutes_consumed", n => { MinutesConsumed = n.GetDoubleValue(); } },
                { "organization_id", n => { OrganizationId = n.GetStringValue(); } },
                { "started_at", n => { StartedAt = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_type>(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("associated_id", AssociatedId);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("ended_at", EndedAt);
            writer.WriteDoubleValue("live_participants", LiveParticipants);
            writer.WriteDoubleValue("max_concurrent_participants", MaxConcurrentParticipants);
            writer.WriteStringValue("meeting_display_name", MeetingDisplayName);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_meta>("meta", Meta);
            writer.WriteDoubleValue("minutes_consumed", MinutesConsumed);
            writer.WriteStringValue("organization_id", OrganizationId);
            writer.WriteStringValue("started_at", StartedAt);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Realtimekit_ActiveSession_type>("type", Type);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
