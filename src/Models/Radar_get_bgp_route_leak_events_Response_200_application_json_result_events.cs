// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Radar_get_bgp_route_leak_events_Response_200_application_json_result_events : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The countries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Countries { get; set; }
#nullable restore
#else
        public List<string> Countries { get; set; }
#endif
        /// <summary>The detected_ts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetectedTs { get; set; }
#nullable restore
#else
        public string DetectedTs { get; set; }
#endif
        /// <summary>The finished property</summary>
        public bool? Finished { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The leak_asn property</summary>
        public int? LeakAsn { get; set; }
        /// <summary>The leak_count property</summary>
        public int? LeakCount { get; set; }
        /// <summary>The leak_seg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LeakSeg { get; set; }
#nullable restore
#else
        public List<int?> LeakSeg { get; set; }
#endif
        /// <summary>The leak_type property</summary>
        public int? LeakType { get; set; }
        /// <summary>The max_ts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxTs { get; set; }
#nullable restore
#else
        public string MaxTs { get; set; }
#endif
        /// <summary>The min_ts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinTs { get; set; }
#nullable restore
#else
        public string MinTs { get; set; }
#endif
        /// <summary>The origin_count property</summary>
        public int? OriginCount { get; set; }
        /// <summary>The peer_count property</summary>
        public int? PeerCount { get; set; }
        /// <summary>The prefix_count property</summary>
        public int? PrefixCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_route_leak_events_Response_200_application_json_result_events"/> and sets the default values.
        /// </summary>
        public Radar_get_bgp_route_leak_events_Response_200_application_json_result_events()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_route_leak_events_Response_200_application_json_result_events"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_route_leak_events_Response_200_application_json_result_events CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_bgp_route_leak_events_Response_200_application_json_result_events();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "countries", n => { Countries = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "detected_ts", n => { DetectedTs = n.GetStringValue(); } },
                { "finished", n => { Finished = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "leak_asn", n => { LeakAsn = n.GetIntValue(); } },
                { "leak_count", n => { LeakCount = n.GetIntValue(); } },
                { "leak_seg", n => { LeakSeg = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "leak_type", n => { LeakType = n.GetIntValue(); } },
                { "max_ts", n => { MaxTs = n.GetStringValue(); } },
                { "min_ts", n => { MinTs = n.GetStringValue(); } },
                { "origin_count", n => { OriginCount = n.GetIntValue(); } },
                { "peer_count", n => { PeerCount = n.GetIntValue(); } },
                { "prefix_count", n => { PrefixCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("countries", Countries);
            writer.WriteStringValue("detected_ts", DetectedTs);
            writer.WriteBoolValue("finished", Finished);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("leak_asn", LeakAsn);
            writer.WriteIntValue("leak_count", LeakCount);
            writer.WriteCollectionOfPrimitiveValues<int?>("leak_seg", LeakSeg);
            writer.WriteIntValue("leak_type", LeakType);
            writer.WriteStringValue("max_ts", MaxTs);
            writer.WriteStringValue("min_ts", MinTs);
            writer.WriteIntValue("origin_count", OriginCount);
            writer.WriteIntValue("peer_count", PeerCount);
            writer.WriteIntValue("prefix_count", PrefixCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
