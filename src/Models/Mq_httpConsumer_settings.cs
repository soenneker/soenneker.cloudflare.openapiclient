// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Mq_httpConsumer_settings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The maximum number of messages to include in a batch.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_batchSize? BatchSize { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_batchSize BatchSize { get; set; }
#endif
        /// <summary>The maximum number of retries</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_maxRetries? MaxRetries { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_maxRetries MaxRetries { get; set; }
#endif
        /// <summary>The number of seconds to delay before making the message available for another attempt.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_retryDelay? RetryDelay { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_retryDelay RetryDelay { get; set; }
#endif
        /// <summary>The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_visibilityTimeout? VisibilityTimeoutMs { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_visibilityTimeout VisibilityTimeoutMs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_httpConsumer_settings"/> and sets the default values.
        /// </summary>
        public Mq_httpConsumer_settings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_httpConsumer_settings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_httpConsumer_settings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_httpConsumer_settings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "batch_size", n => { BatchSize = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_batchSize>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_batchSize.CreateFromDiscriminatorValue); } },
                { "max_retries", n => { MaxRetries = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_maxRetries>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_maxRetries.CreateFromDiscriminatorValue); } },
                { "retry_delay", n => { RetryDelay = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_retryDelay>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_retryDelay.CreateFromDiscriminatorValue); } },
                { "visibility_timeout_ms", n => { VisibilityTimeoutMs = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_visibilityTimeout>(global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_visibilityTimeout.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_batchSize>("batch_size", BatchSize);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_maxRetries>("max_retries", MaxRetries);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_retryDelay>("retry_delay", RetryDelay);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Mq_visibilityTimeout>("visibility_timeout_ms", VisibilityTimeoutMs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
