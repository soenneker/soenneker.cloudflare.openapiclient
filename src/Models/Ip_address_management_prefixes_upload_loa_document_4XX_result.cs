// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Ip_address_management_prefixes_upload_loa_document_4XX_result : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Identifier of a Cloudflare account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountId { get; set; }
#nullable restore
#else
        public string AccountId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>Name of LOA document. Max file size 10MB, and supported filetype is pdf.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Filename { get; set; }
#nullable restore
#else
        public string Filename { get; set; }
#endif
        /// <summary>Identifier for the uploaded LOA document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>File size of the uploaded LOA document.</summary>
        public int? SizeBytes { get; set; }
        /// <summary>Whether the LOA has been verified by Cloudflare staff.</summary>
        public bool? Verified { get; set; }
        /// <summary>Timestamp of the moment the LOA was marked as validated.</summary>
        public DateTimeOffset? VerifiedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Ip_address_management_prefixes_upload_loa_document_4XX_result"/> and sets the default values.
        /// </summary>
        public Ip_address_management_prefixes_upload_loa_document_4XX_result()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Ip_address_management_prefixes_upload_loa_document_4XX_result"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Ip_address_management_prefixes_upload_loa_document_4XX_result CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Ip_address_management_prefixes_upload_loa_document_4XX_result();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_id", n => { AccountId = n.GetStringValue(); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "filename", n => { Filename = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "size_bytes", n => { SizeBytes = n.GetIntValue(); } },
                { "verified", n => { Verified = n.GetBoolValue(); } },
                { "verified_at", n => { VerifiedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_id", AccountId);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("filename", Filename);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("size_bytes", SizeBytes);
            writer.WriteBoolValue("verified", Verified);
            writer.WriteDateTimeOffsetValue("verified_at", VerifiedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
