// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_ipsecTunnel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_allow_null_cipher? AllowNullCipher { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_allow_null_cipher AllowNullCipher { get; set; }
#endif
        /// <summary>The IP address assigned to the Cloudflare side of the IPsec tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_cloudflare_ipsec_endpoint? CloudflareEndpoint { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_cloudflare_ipsec_endpoint CloudflareEndpoint { get; set; }
#endif
        /// <summary>The date and time the tunnel was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasCreated_on? CreatedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasCreated_on CreatedOn { get; set; }
#endif
        /// <summary>The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_customer_ipsec_endpoint? CustomerEndpoint { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_customer_ipsec_endpoint CustomerEndpoint { get; set; }
#endif
        /// <summary>An optional description forthe IPsec tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_componentsSchemasDescription? Description { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_componentsSchemasDescription Description { get; set; }
#endif
        /// <summary>The health_check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check? HealthCheck { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check HealthCheck { get; set; }
#endif
        /// <summary>Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasIdentifier? Id { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasIdentifier Id { get; set; }
#endif
        /// <summary>A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address? InterfaceAddress { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address InterfaceAddress { get; set; }
#endif
        /// <summary>The date and time the tunnel was last modified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasModified_on? ModifiedOn { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasModified_on ModifiedOn { get; set; }
#endif
        /// <summary>The name of the IPsec tunnel. The name cannot share a name with other tunnels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsec_tunnel_name? Name { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsec_tunnel_name Name { get; set; }
#endif
        /// <summary>The PSK metadata that includes when the PSK was generated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_psk_metadata? PskMetadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_psk_metadata PskMetadata { get; set; }
#endif
        /// <summary>If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_replay_protection? ReplayProtection { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_replay_protection ReplayProtection { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsecTunnel"/> and sets the default values.
        /// </summary>
        public Magic_ipsecTunnel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsecTunnel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsecTunnel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsecTunnel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_null_cipher", n => { AllowNullCipher = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_allow_null_cipher>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_allow_null_cipher.CreateFromDiscriminatorValue); } },
                { "cloudflare_endpoint", n => { CloudflareEndpoint = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_cloudflare_ipsec_endpoint>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_cloudflare_ipsec_endpoint.CreateFromDiscriminatorValue); } },
                { "created_on", n => { CreatedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasCreated_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasCreated_on.CreateFromDiscriminatorValue); } },
                { "customer_endpoint", n => { CustomerEndpoint = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_customer_ipsec_endpoint>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_customer_ipsec_endpoint.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_componentsSchemasDescription>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_componentsSchemasDescription.CreateFromDiscriminatorValue); } },
                { "health_check", n => { HealthCheck = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasIdentifier>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasIdentifier.CreateFromDiscriminatorValue); } },
                { "interface_address", n => { InterfaceAddress = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address.CreateFromDiscriminatorValue); } },
                { "modified_on", n => { ModifiedOn = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasModified_on>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasModified_on.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsec_tunnel_name>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsec_tunnel_name.CreateFromDiscriminatorValue); } },
                { "psk_metadata", n => { PskMetadata = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_psk_metadata>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_psk_metadata.CreateFromDiscriminatorValue); } },
                { "replay_protection", n => { ReplayProtection = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_replay_protection>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_replay_protection.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_allow_null_cipher>("allow_null_cipher", AllowNullCipher);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_cloudflare_ipsec_endpoint>("cloudflare_endpoint", CloudflareEndpoint);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasCreated_on>("created_on", CreatedOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_customer_ipsec_endpoint>("customer_endpoint", CustomerEndpoint);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_componentsSchemasDescription>("description", Description);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check>("health_check", HealthCheck);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasIdentifier>("id", Id);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_interface_address>("interface_address", InterfaceAddress);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_schemasModified_on>("modified_on", ModifiedOn);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_ipsec_tunnel_name>("name", Name);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_psk_metadata>("psk_metadata", PskMetadata);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_replay_protection>("replay_protection", ReplayProtection);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
