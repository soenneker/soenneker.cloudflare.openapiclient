// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tls_certificates_and_hostnames_value : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1? TlsCertificatesAndHostnamesValueBranch1 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1 TlsCertificatesAndHostnamesValueBranch1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2? TlsCertificatesAndHostnamesValueBranch2 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2 TlsCertificatesAndHostnamesValueBranch2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3? TlsCertificatesAndHostnamesValueBranch3 { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3 TlsCertificatesAndHostnamesValueBranch3 { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
            var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value();
            if("tls_certificates_and_hostnames_value_1".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.TlsCertificatesAndHostnamesValueBranch1 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1();
            }
            else if("tls_certificates_and_hostnames_value_2".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.TlsCertificatesAndHostnamesValueBranch2 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2();
            }
            else if("tls_certificates_and_hostnames_value_3".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.TlsCertificatesAndHostnamesValueBranch3 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(TlsCertificatesAndHostnamesValueBranch1 != null)
            {
                return TlsCertificatesAndHostnamesValueBranch1.GetFieldDeserializers();
            }
            else if(TlsCertificatesAndHostnamesValueBranch2 != null)
            {
                return TlsCertificatesAndHostnamesValueBranch2.GetFieldDeserializers();
            }
            else if(TlsCertificatesAndHostnamesValueBranch3 != null)
            {
                return TlsCertificatesAndHostnamesValueBranch3.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(TlsCertificatesAndHostnamesValueBranch1 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch1>(null, TlsCertificatesAndHostnamesValueBranch1);
            }
            else if(TlsCertificatesAndHostnamesValueBranch2 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch2>(null, TlsCertificatesAndHostnamesValueBranch2);
            }
            else if(TlsCertificatesAndHostnamesValueBranch3 != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_value_Branch3>(null, TlsCertificatesAndHostnamesValueBranch3);
            }
        }
    }
}
#pragma warning restore CS0618
