// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SpectrumConfig_app_config : global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_base_app_config, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Enables Argo Smart Routing for this application.Notes: Only available for TCP applications with traffic_type set to &quot;direct&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_argo_smart_routing? ArgoSmartRouting { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_argo_smart_routing ArgoSmartRouting { get; set; }
#endif
        /// <summary>The name and type of DNS record for the Spectrum application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_dns? Dns { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_dns Dns { get; set; }
#endif
        /// <summary>The anycast edge IP configuration for the hostname of this application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_edge_ips? EdgeIps { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_edge_ips EdgeIps { get; set; }
#endif
        /// <summary>Enables IP Access Rules for this application.Notes: Only available for TCP applications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_ip_firewall? IpFirewall { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_ip_firewall IpFirewall { get; set; }
#endif
        /// <summary>List of origin IP addresses. Array may contain multiple IP addresses for load balancing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginDirect { get; set; }
#nullable restore
#else
        public List<string> OriginDirect { get; set; }
#endif
        /// <summary>The name and type of DNS record for the Spectrum application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_dns? OriginDns { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_dns OriginDns { get; set; }
#endif
        /// <summary>The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `&quot;1000-2000&quot;`.Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the &quot;protocol&quot; field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_port? OriginPort { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_port OriginPort { get; set; }
#endif
        /// <summary>The port configuration at Cloudflare&apos;s edge. May specify a single port, for example `&quot;tcp/1000&quot;`, or a range of ports, for example `&quot;tcp/1000-2000&quot;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_protocol? Protocol { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_protocol Protocol { get; set; }
#endif
        /// <summary>Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_proxy_protocol? ProxyProtocol { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_proxy_protocol ProxyProtocol { get; set; }
#endif
        /// <summary>The type of TLS termination associated with the application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_tls? Tls { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_tls Tls { get; set; }
#endif
        /// <summary>Determines how data travels from the edge to your origin. When set to &quot;direct&quot;, Spectrum will send traffic directly to your origin, and the application&apos;s type is derived from the `protocol`. When set to &quot;http&quot; or &quot;https&quot;, Spectrum will apply Cloudflare&apos;s HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_traffic_type? TrafficType { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_traffic_type TrafficType { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_app_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_app_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_app_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "argo_smart_routing", n => { ArgoSmartRouting = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_argo_smart_routing>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_argo_smart_routing.CreateFromDiscriminatorValue); } },
                { "dns", n => { Dns = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_dns>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_dns.CreateFromDiscriminatorValue); } },
                { "edge_ips", n => { EdgeIps = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_edge_ips>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_edge_ips.CreateFromDiscriminatorValue); } },
                { "ip_firewall", n => { IpFirewall = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_ip_firewall>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_ip_firewall.CreateFromDiscriminatorValue); } },
                { "origin_direct", n => { OriginDirect = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "origin_dns", n => { OriginDns = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_dns>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_dns.CreateFromDiscriminatorValue); } },
                { "origin_port", n => { OriginPort = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_port>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_port.CreateFromDiscriminatorValue); } },
                { "protocol", n => { Protocol = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_protocol>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_protocol.CreateFromDiscriminatorValue); } },
                { "proxy_protocol", n => { ProxyProtocol = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_proxy_protocol>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_proxy_protocol.CreateFromDiscriminatorValue); } },
                { "tls", n => { Tls = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_tls>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_tls.CreateFromDiscriminatorValue); } },
                { "traffic_type", n => { TrafficType = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_traffic_type>(global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_traffic_type.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_argo_smart_routing>("argo_smart_routing", ArgoSmartRouting);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_dns>("dns", Dns);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_edge_ips>("edge_ips", EdgeIps);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_ip_firewall>("ip_firewall", IpFirewall);
            writer.WriteCollectionOfPrimitiveValues<string>("origin_direct", OriginDirect);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_dns>("origin_dns", OriginDns);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_origin_port>("origin_port", OriginPort);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_protocol>("protocol", Protocol);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_proxy_protocol>("proxy_protocol", ProxyProtocol);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_tls>("tls", Tls);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SpectrumConfig_traffic_type>("traffic_type", TrafficType);
        }
    }
}
#pragma warning restore CS0618
