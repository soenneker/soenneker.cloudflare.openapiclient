// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tls_certificates_and_hostnames_verification : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Certificate Authority is manually reviewing the order.</summary>
        public bool? BrandCheck { get; set; }
        /// <summary>Current status of certificate.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_status? CertificateStatus { get; set; }
        /// <summary>Certificate Pack UUID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertPackUuid { get; set; }
#nullable restore
#else
        public string CertPackUuid { get; set; }
#endif
        /// <summary>Certificate&apos;s signature algorithm.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_signature? Signature { get; set; }
        /// <summary>Validation method in use for a certificate pack order.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_validation_method? ValidationMethod { get; set; }
        /// <summary>Certificate&apos;s required verification information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_info? VerificationInfo { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_info VerificationInfo { get; set; }
#endif
        /// <summary>Status of the required verification information, omitted if verification status is unknown.</summary>
        public bool? VerificationStatus { get; set; }
        /// <summary>Method of verification.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_type? VerificationType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification"/> and sets the default values.
        /// </summary>
        public Tls_certificates_and_hostnames_verification()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "brand_check", n => { BrandCheck = n.GetBoolValue(); } },
                { "cert_pack_uuid", n => { CertPackUuid = n.GetStringValue(); } },
                { "certificate_status", n => { CertificateStatus = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_status>(); } },
                { "signature", n => { Signature = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_signature>(); } },
                { "validation_method", n => { ValidationMethod = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_validation_method>(); } },
                { "verification_info", n => { VerificationInfo = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_info>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_info.CreateFromDiscriminatorValue); } },
                { "verification_status", n => { VerificationStatus = n.GetBoolValue(); } },
                { "verification_type", n => { VerificationType = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("brand_check", BrandCheck);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_certificate_status>("certificate_status", CertificateStatus);
            writer.WriteStringValue("cert_pack_uuid", CertPackUuid);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_signature>("signature", Signature);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_schemas_validation_method>("validation_method", ValidationMethod);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_info>("verification_info", VerificationInfo);
            writer.WriteBoolValue("verification_status", VerificationStatus);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_verification_type>("verification_type", VerificationType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
