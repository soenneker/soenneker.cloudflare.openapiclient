// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Specify account settings.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zero_trust_gateway_gateway_account_settings_settings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Specify activity log settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_activity_log_settings? ActivityLog { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_activity_log_settings ActivityLog { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specify anti-virus settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_anti_virus_settings? Antivirus { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_anti_virus_settings Antivirus { get; set; }
#endif
        /// <summary>Specify block page layout settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_block_page_settings? BlockPage { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_block_page_settings BlockPage { get; set; }
#endif
        /// <summary>Specify the DLP inspection mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_body_scanning_settings? BodyScanning { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_body_scanning_settings BodyScanning { get; set; }
#endif
        /// <summary>Specify Clientless Browser Isolation settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_browser_isolation_settings? BrowserIsolation { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_browser_isolation_settings BrowserIsolation { get; set; }
#endif
        /// <summary>Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificate_settings? Certificate { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificate_settings Certificate { get; set; }
#endif
        /// <summary>Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_custom_certificate_settings? CustomCertificate { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_custom_certificate_settings CustomCertificate { get; set; }
#endif
        /// <summary>Configures user email settings for firewall policies. When you enable this, the system standardizes email addresses in the identity portion of the rule to match extended email variants in firewall policies. When you disable this setting, the system matches email addresses exactly as you provide them. Enable this setting if your email uses `.` or `+` modifiers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_extended_email_matching? ExtendedEmailMatching { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_extended_email_matching ExtendedEmailMatching { get; set; }
#endif
        /// <summary>Specify FIPS settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_fips_settings? Fips { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_fips_settings Fips { get; set; }
#endif
        /// <summary>Enable host selection in egress policies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_host_selector_settings? HostSelector { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_host_selector_settings HostSelector { get; set; }
#endif
        /// <summary>Define the proxy inspection mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_inspection_settings? Inspection { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_inspection_settings Inspection { get; set; }
#endif
        /// <summary>Specify whether to detect protocols from the initial bytes of client traffic.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_protocol_detection? ProtocolDetection { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_protocol_detection ProtocolDetection { get; set; }
#endif
        /// <summary>Specify whether to enable the sandbox.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_sandbox? Sandbox { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_sandbox Sandbox { get; set; }
#endif
        /// <summary>Specify whether to inspect encrypted HTTP traffic.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_tls_settings? TlsDecrypt { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_tls_settings TlsDecrypt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_gateway_account_settings_settings"/> and sets the default values.
        /// </summary>
        public Zero_trust_gateway_gateway_account_settings_settings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_gateway_account_settings_settings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_gateway_account_settings_settings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_gateway_account_settings_settings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity_log", n => { ActivityLog = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_activity_log_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_activity_log_settings.CreateFromDiscriminatorValue); } },
                { "antivirus", n => { Antivirus = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_anti_virus_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_anti_virus_settings.CreateFromDiscriminatorValue); } },
                { "block_page", n => { BlockPage = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_block_page_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_block_page_settings.CreateFromDiscriminatorValue); } },
                { "body_scanning", n => { BodyScanning = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_body_scanning_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_body_scanning_settings.CreateFromDiscriminatorValue); } },
                { "browser_isolation", n => { BrowserIsolation = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_browser_isolation_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_browser_isolation_settings.CreateFromDiscriminatorValue); } },
                { "certificate", n => { Certificate = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificate_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificate_settings.CreateFromDiscriminatorValue); } },
                { "custom_certificate", n => { CustomCertificate = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_custom_certificate_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_custom_certificate_settings.CreateFromDiscriminatorValue); } },
                { "extended_email_matching", n => { ExtendedEmailMatching = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_extended_email_matching>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_extended_email_matching.CreateFromDiscriminatorValue); } },
                { "fips", n => { Fips = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_fips_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_fips_settings.CreateFromDiscriminatorValue); } },
                { "host_selector", n => { HostSelector = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_host_selector_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_host_selector_settings.CreateFromDiscriminatorValue); } },
                { "inspection", n => { Inspection = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_inspection_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_inspection_settings.CreateFromDiscriminatorValue); } },
                { "protocol_detection", n => { ProtocolDetection = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_protocol_detection>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_protocol_detection.CreateFromDiscriminatorValue); } },
                { "sandbox", n => { Sandbox = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_sandbox>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_sandbox.CreateFromDiscriminatorValue); } },
                { "tls_decrypt", n => { TlsDecrypt = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_tls_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_tls_settings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_activity_log_settings>("activity_log", ActivityLog);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_anti_virus_settings>("antivirus", Antivirus);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_block_page_settings>("block_page", BlockPage);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_body_scanning_settings>("body_scanning", BodyScanning);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_browser_isolation_settings>("browser_isolation", BrowserIsolation);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_certificate_settings>("certificate", Certificate);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_custom_certificate_settings>("custom_certificate", CustomCertificate);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_extended_email_matching>("extended_email_matching", ExtendedEmailMatching);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_fips_settings>("fips", Fips);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_host_selector_settings>("host_selector", HostSelector);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_inspection_settings>("inspection", Inspection);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_protocol_detection>("protocol_detection", ProtocolDetection);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_sandbox>("sandbox", Sandbox);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zero_trust_gateway_tls_settings>("tls_decrypt", TlsDecrypt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
