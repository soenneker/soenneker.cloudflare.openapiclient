// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Access_key_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of days until the next key rotation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_days_until_next_rotation? DaysUntilNextRotation { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_days_until_next_rotation DaysUntilNextRotation { get; set; }
#endif
        /// <summary>The number of days between key rotations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_rotation_interval_days? KeyRotationIntervalDays { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_rotation_interval_days KeyRotationIntervalDays { get; set; }
#endif
        /// <summary>The timestamp of the previous key rotation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_last_key_rotation_at? LastKeyRotationAt { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Access_last_key_rotation_at LastKeyRotationAt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_config"/> and sets the default values.
        /// </summary>
        public Access_key_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "days_until_next_rotation", n => { DaysUntilNextRotation = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_days_until_next_rotation>(global::Soenneker.Cloudflare.OpenApiClient.Models.Access_days_until_next_rotation.CreateFromDiscriminatorValue); } },
                { "key_rotation_interval_days", n => { KeyRotationIntervalDays = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_rotation_interval_days>(global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_rotation_interval_days.CreateFromDiscriminatorValue); } },
                { "last_key_rotation_at", n => { LastKeyRotationAt = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_last_key_rotation_at>(global::Soenneker.Cloudflare.OpenApiClient.Models.Access_last_key_rotation_at.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_days_until_next_rotation>("days_until_next_rotation", DaysUntilNextRotation);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_key_rotation_interval_days>("key_rotation_interval_days", KeyRotationIntervalDays);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Access_last_key_rotation_at>("last_key_rotation_at", LastKeyRotationAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
