// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot Disk
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Mconn_snapshot_disk : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Connector identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectorId { get; set; }
#nullable restore
#else
        public string ConnectorId { get; set; }
#endif
        /// <summary>Discards completed successfully</summary>
        public double? Discards { get; set; }
        /// <summary>Discards merged</summary>
        public double? DiscardsMerged { get; set; }
        /// <summary>Flushes completed successfully</summary>
        public double? Flushes { get; set; }
        /// <summary>I/Os currently in progress</summary>
        public double? InProgress { get; set; }
        /// <summary>Device major number</summary>
        public double? Major { get; set; }
        /// <summary>Reads merged</summary>
        public double? Merged { get; set; }
        /// <summary>Device minor number</summary>
        public double? Minor { get; set; }
        /// <summary>Device name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Reads completed successfully</summary>
        public double? Reads { get; set; }
        /// <summary>Sectors discarded</summary>
        public double? SectorsDiscarded { get; set; }
        /// <summary>Sectors read successfully</summary>
        public double? SectorsRead { get; set; }
        /// <summary>Sectors written successfully</summary>
        public double? SectorsWritten { get; set; }
        /// <summary>Time spent discarding (milliseconds)</summary>
        public double? TimeDiscardingMs { get; set; }
        /// <summary>Time spent flushing (milliseconds)</summary>
        public double? TimeFlushingMs { get; set; }
        /// <summary>Time spent doing I/Os (milliseconds)</summary>
        public double? TimeInProgressMs { get; set; }
        /// <summary>Time spent reading (milliseconds)</summary>
        public double? TimeReadingMs { get; set; }
        /// <summary>Time spent writing (milliseconds)</summary>
        public double? TimeWritingMs { get; set; }
        /// <summary>Weighted time spent doing I/Os (milliseconds)</summary>
        public double? WeightedTimeInProgressMs { get; set; }
        /// <summary>Writes completed</summary>
        public double? Writes { get; set; }
        /// <summary>Writes merged</summary>
        public double? WritesMerged { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk"/> and sets the default values.
        /// </summary>
        public Mconn_snapshot_disk()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_disk();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "connector_id", n => { ConnectorId = n.GetStringValue(); } },
                { "discards", n => { Discards = n.GetDoubleValue(); } },
                { "discards_merged", n => { DiscardsMerged = n.GetDoubleValue(); } },
                { "flushes", n => { Flushes = n.GetDoubleValue(); } },
                { "in_progress", n => { InProgress = n.GetDoubleValue(); } },
                { "major", n => { Major = n.GetDoubleValue(); } },
                { "merged", n => { Merged = n.GetDoubleValue(); } },
                { "minor", n => { Minor = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "reads", n => { Reads = n.GetDoubleValue(); } },
                { "sectors_discarded", n => { SectorsDiscarded = n.GetDoubleValue(); } },
                { "sectors_read", n => { SectorsRead = n.GetDoubleValue(); } },
                { "sectors_written", n => { SectorsWritten = n.GetDoubleValue(); } },
                { "time_discarding_ms", n => { TimeDiscardingMs = n.GetDoubleValue(); } },
                { "time_flushing_ms", n => { TimeFlushingMs = n.GetDoubleValue(); } },
                { "time_in_progress_ms", n => { TimeInProgressMs = n.GetDoubleValue(); } },
                { "time_reading_ms", n => { TimeReadingMs = n.GetDoubleValue(); } },
                { "time_writing_ms", n => { TimeWritingMs = n.GetDoubleValue(); } },
                { "weighted_time_in_progress_ms", n => { WeightedTimeInProgressMs = n.GetDoubleValue(); } },
                { "writes", n => { Writes = n.GetDoubleValue(); } },
                { "writes_merged", n => { WritesMerged = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("connector_id", ConnectorId);
            writer.WriteDoubleValue("discards", Discards);
            writer.WriteDoubleValue("discards_merged", DiscardsMerged);
            writer.WriteDoubleValue("flushes", Flushes);
            writer.WriteDoubleValue("in_progress", InProgress);
            writer.WriteDoubleValue("major", Major);
            writer.WriteDoubleValue("merged", Merged);
            writer.WriteDoubleValue("minor", Minor);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("reads", Reads);
            writer.WriteDoubleValue("sectors_discarded", SectorsDiscarded);
            writer.WriteDoubleValue("sectors_read", SectorsRead);
            writer.WriteDoubleValue("sectors_written", SectorsWritten);
            writer.WriteDoubleValue("time_discarding_ms", TimeDiscardingMs);
            writer.WriteDoubleValue("time_flushing_ms", TimeFlushingMs);
            writer.WriteDoubleValue("time_in_progress_ms", TimeInProgressMs);
            writer.WriteDoubleValue("time_reading_ms", TimeReadingMs);
            writer.WriteDoubleValue("time_writing_ms", TimeWritingMs);
            writer.WriteDoubleValue("weighted_time_in_progress_ms", WeightedTimeInProgressMs);
            writer.WriteDoubleValue("writes", Writes);
            writer.WriteDoubleValue("writes_merged", WritesMerged);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
