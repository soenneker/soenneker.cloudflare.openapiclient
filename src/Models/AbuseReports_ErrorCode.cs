// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AbuseReports_ErrorCode : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError? AbuseReportsBadActError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError AbuseReportsBadActError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError? AbuseReportsBadAddressError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError AbuseReportsBadAddressError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError? AbuseReportsBadAgentNameError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError AbuseReportsBadAgentNameError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError? AbuseReportsBadCityError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError AbuseReportsBadCityError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError? AbuseReportsBadCommentsError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError AbuseReportsBadCommentsError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError? AbuseReportsBadCountryError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError AbuseReportsBadCountryError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError? AbuseReportsBadEmailError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError AbuseReportsBadEmailError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError? AbuseReportsBadIPError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError AbuseReportsBadIPError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError? AbuseReportsBadJustError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError AbuseReportsBadJustError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError? AbuseReportsBadNameError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError AbuseReportsBadNameError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError? AbuseReportsBadPortsProtocolError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError AbuseReportsBadPortsProtocolError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError? AbuseReportsBadStateError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError AbuseReportsBadStateError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError? AbuseReportsBadUrlsError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError AbuseReportsBadUrlsError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError? AbuseReportsDBError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError AbuseReportsDBError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError? AbuseReportsDedupeError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError AbuseReportsDedupeError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError? AbuseReportsDiffEmailError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError AbuseReportsDiffEmailError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError? AbuseReportsEmailError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError AbuseReportsEmailError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError? AbuseReportsInternalError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError AbuseReportsInternalError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError? AbuseReportsInvalidNotifyError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError AbuseReportsInvalidNotifyError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError? AbuseReportsMaxIPsError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError AbuseReportsMaxIPsError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError? AbuseReportsMustNotifyError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError AbuseReportsMustNotifyError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError? AbuseReportsNoAgreeError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError AbuseReportsNoAgreeError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError? AbuseReportsNoOriginalWorkError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError AbuseReportsNoOriginalWorkError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError? AbuseReportsNoSigError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError AbuseReportsNoSigError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError? AbuseReportsPortsProtocolError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError AbuseReportsPortsProtocolError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError? AbuseReportsUnexpectedActError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError AbuseReportsUnexpectedActError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError? AbuseReportsUnknownError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError AbuseReportsUnknownError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError? AbuseReportsUrlNotOrangeError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError AbuseReportsUrlNotOrangeError { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError? AbuseReportsUrlNotvalidError { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError AbuseReportsUrlNotvalidError { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_ErrorCode"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_ErrorCode CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
            var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_ErrorCode();
            if("abuse-reports_BadActError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadActError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError();
            }
            else if("abuse-reports_BadAddressError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadAddressError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError();
            }
            else if("abuse-reports_BadAgentNameError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadAgentNameError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError();
            }
            else if("abuse-reports_BadCityError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadCityError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError();
            }
            else if("abuse-reports_BadCommentsError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadCommentsError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError();
            }
            else if("abuse-reports_BadCountryError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadCountryError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError();
            }
            else if("abuse-reports_BadEmailError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadEmailError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError();
            }
            else if("abuse-reports_BadIPError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadIPError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError();
            }
            else if("abuse-reports_BadJustError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadJustError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError();
            }
            else if("abuse-reports_BadNameError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadNameError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError();
            }
            else if("abuse-reports_BadPortsProtocolError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadPortsProtocolError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError();
            }
            else if("abuse-reports_BadStateError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadStateError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError();
            }
            else if("abuse-reports_BadUrlsError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsBadUrlsError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError();
            }
            else if("abuse-reports_DBError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsDBError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError();
            }
            else if("abuse-reports_DedupeError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsDedupeError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError();
            }
            else if("abuse-reports_DiffEmailError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsDiffEmailError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError();
            }
            else if("abuse-reports_EmailError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsEmailError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError();
            }
            else if("abuse-reports_InternalError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsInternalError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError();
            }
            else if("abuse-reports_InvalidNotifyError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsInvalidNotifyError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError();
            }
            else if("abuse-reports_MaxIPsError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsMaxIPsError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError();
            }
            else if("abuse-reports_MustNotifyError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsMustNotifyError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError();
            }
            else if("abuse-reports_NoAgreeError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsNoAgreeError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError();
            }
            else if("abuse-reports_NoOriginalWorkError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsNoOriginalWorkError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError();
            }
            else if("abuse-reports_NoSigError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsNoSigError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError();
            }
            else if("abuse-reports_PortsProtocolError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsPortsProtocolError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError();
            }
            else if("abuse-reports_UnexpectedActError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsUnexpectedActError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError();
            }
            else if("abuse-reports_UnknownError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsUnknownError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError();
            }
            else if("abuse-reports_UrlNotOrangeError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsUrlNotOrangeError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError();
            }
            else if("abuse-reports_UrlNotvalidError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.AbuseReportsUrlNotvalidError = new global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(AbuseReportsBadActError != null)
            {
                return AbuseReportsBadActError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadAddressError != null)
            {
                return AbuseReportsBadAddressError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadAgentNameError != null)
            {
                return AbuseReportsBadAgentNameError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadCityError != null)
            {
                return AbuseReportsBadCityError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadCommentsError != null)
            {
                return AbuseReportsBadCommentsError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadCountryError != null)
            {
                return AbuseReportsBadCountryError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadEmailError != null)
            {
                return AbuseReportsBadEmailError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadIPError != null)
            {
                return AbuseReportsBadIPError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadJustError != null)
            {
                return AbuseReportsBadJustError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadNameError != null)
            {
                return AbuseReportsBadNameError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadPortsProtocolError != null)
            {
                return AbuseReportsBadPortsProtocolError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadStateError != null)
            {
                return AbuseReportsBadStateError.GetFieldDeserializers();
            }
            else if(AbuseReportsBadUrlsError != null)
            {
                return AbuseReportsBadUrlsError.GetFieldDeserializers();
            }
            else if(AbuseReportsDBError != null)
            {
                return AbuseReportsDBError.GetFieldDeserializers();
            }
            else if(AbuseReportsDedupeError != null)
            {
                return AbuseReportsDedupeError.GetFieldDeserializers();
            }
            else if(AbuseReportsDiffEmailError != null)
            {
                return AbuseReportsDiffEmailError.GetFieldDeserializers();
            }
            else if(AbuseReportsEmailError != null)
            {
                return AbuseReportsEmailError.GetFieldDeserializers();
            }
            else if(AbuseReportsInternalError != null)
            {
                return AbuseReportsInternalError.GetFieldDeserializers();
            }
            else if(AbuseReportsInvalidNotifyError != null)
            {
                return AbuseReportsInvalidNotifyError.GetFieldDeserializers();
            }
            else if(AbuseReportsMaxIPsError != null)
            {
                return AbuseReportsMaxIPsError.GetFieldDeserializers();
            }
            else if(AbuseReportsMustNotifyError != null)
            {
                return AbuseReportsMustNotifyError.GetFieldDeserializers();
            }
            else if(AbuseReportsNoAgreeError != null)
            {
                return AbuseReportsNoAgreeError.GetFieldDeserializers();
            }
            else if(AbuseReportsNoOriginalWorkError != null)
            {
                return AbuseReportsNoOriginalWorkError.GetFieldDeserializers();
            }
            else if(AbuseReportsNoSigError != null)
            {
                return AbuseReportsNoSigError.GetFieldDeserializers();
            }
            else if(AbuseReportsPortsProtocolError != null)
            {
                return AbuseReportsPortsProtocolError.GetFieldDeserializers();
            }
            else if(AbuseReportsUnexpectedActError != null)
            {
                return AbuseReportsUnexpectedActError.GetFieldDeserializers();
            }
            else if(AbuseReportsUnknownError != null)
            {
                return AbuseReportsUnknownError.GetFieldDeserializers();
            }
            else if(AbuseReportsUrlNotOrangeError != null)
            {
                return AbuseReportsUrlNotOrangeError.GetFieldDeserializers();
            }
            else if(AbuseReportsUrlNotvalidError != null)
            {
                return AbuseReportsUrlNotvalidError.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(AbuseReportsBadActError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadActError>(null, AbuseReportsBadActError);
            }
            else if(AbuseReportsBadAddressError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAddressError>(null, AbuseReportsBadAddressError);
            }
            else if(AbuseReportsBadAgentNameError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadAgentNameError>(null, AbuseReportsBadAgentNameError);
            }
            else if(AbuseReportsBadCityError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCityError>(null, AbuseReportsBadCityError);
            }
            else if(AbuseReportsBadCommentsError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCommentsError>(null, AbuseReportsBadCommentsError);
            }
            else if(AbuseReportsBadCountryError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadCountryError>(null, AbuseReportsBadCountryError);
            }
            else if(AbuseReportsBadEmailError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadEmailError>(null, AbuseReportsBadEmailError);
            }
            else if(AbuseReportsBadIPError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadIPError>(null, AbuseReportsBadIPError);
            }
            else if(AbuseReportsBadJustError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadJustError>(null, AbuseReportsBadJustError);
            }
            else if(AbuseReportsBadNameError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadNameError>(null, AbuseReportsBadNameError);
            }
            else if(AbuseReportsBadPortsProtocolError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadPortsProtocolError>(null, AbuseReportsBadPortsProtocolError);
            }
            else if(AbuseReportsBadStateError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadStateError>(null, AbuseReportsBadStateError);
            }
            else if(AbuseReportsBadUrlsError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_BadUrlsError>(null, AbuseReportsBadUrlsError);
            }
            else if(AbuseReportsDBError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DBError>(null, AbuseReportsDBError);
            }
            else if(AbuseReportsDedupeError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DedupeError>(null, AbuseReportsDedupeError);
            }
            else if(AbuseReportsDiffEmailError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_DiffEmailError>(null, AbuseReportsDiffEmailError);
            }
            else if(AbuseReportsEmailError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_EmailError>(null, AbuseReportsEmailError);
            }
            else if(AbuseReportsInternalError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InternalError>(null, AbuseReportsInternalError);
            }
            else if(AbuseReportsInvalidNotifyError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_InvalidNotifyError>(null, AbuseReportsInvalidNotifyError);
            }
            else if(AbuseReportsMaxIPsError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MaxIPsError>(null, AbuseReportsMaxIPsError);
            }
            else if(AbuseReportsMustNotifyError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_MustNotifyError>(null, AbuseReportsMustNotifyError);
            }
            else if(AbuseReportsNoAgreeError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoAgreeError>(null, AbuseReportsNoAgreeError);
            }
            else if(AbuseReportsNoOriginalWorkError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoOriginalWorkError>(null, AbuseReportsNoOriginalWorkError);
            }
            else if(AbuseReportsNoSigError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_NoSigError>(null, AbuseReportsNoSigError);
            }
            else if(AbuseReportsPortsProtocolError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_PortsProtocolError>(null, AbuseReportsPortsProtocolError);
            }
            else if(AbuseReportsUnexpectedActError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnexpectedActError>(null, AbuseReportsUnexpectedActError);
            }
            else if(AbuseReportsUnknownError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UnknownError>(null, AbuseReportsUnknownError);
            }
            else if(AbuseReportsUrlNotOrangeError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotOrangeError>(null, AbuseReportsUrlNotOrangeError);
            }
            else if(AbuseReportsUrlNotvalidError != null)
            {
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.AbuseReports_UrlNotvalidError>(null, AbuseReportsUrlNotvalidError);
            }
        }
    }
}
#pragma warning restore CS0618
