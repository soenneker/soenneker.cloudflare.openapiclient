// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Load_balancing_location_strategy : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.- `&quot;pop&quot;`: Use the Cloudflare PoP location.- `&quot;resolver_ip&quot;`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_mode? Mode { get; set; }
        /// <summary>Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.- `&quot;always&quot;`: Always prefer ECS.- `&quot;never&quot;`: Never prefer ECS.- `&quot;proximity&quot;`: Prefer ECS only when `steering_policy=&quot;proximity&quot;`.- `&quot;geo&quot;`: Prefer ECS only when `steering_policy=&quot;geo&quot;`.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_prefer_ecs? PreferEcs { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy"/> and sets the default values.
        /// </summary>
        public Load_balancing_location_strategy()
        {
            AdditionalData = new Dictionary<string, object>();
            Mode = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_mode.Pop;
            PreferEcs = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_prefer_ecs.Proximity;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "mode", n => { Mode = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_mode>(); } },
                { "prefer_ecs", n => { PreferEcs = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_prefer_ecs>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_mode>("mode", Mode);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_location_strategy_prefer_ecs>("prefer_ecs", PreferEcs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
