// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tls_certificates_and_hostnames_client_certificate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Client Certificate PEM</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certificate { get; set; }
#nullable restore
#else
        public string Certificate { get; set; }
#endif
        /// <summary>Certificate Authority used to issue the Client Certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_certificate_authority? CertificateAuthority { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_certificate_authority CertificateAuthority { get; set; }
#endif
        /// <summary>Common Name of the Client Certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommonName { get; set; }
#nullable restore
#else
        public string CommonName { get; set; }
#endif
        /// <summary>Country, provided by the CSR</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The Certificate Signing Request (CSR). Must be newline-encoded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Csr { get; set; }
#nullable restore
#else
        public string Csr { get; set; }
#endif
        /// <summary>Date that the Client Certificate expires</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpiresOn { get; set; }
#nullable restore
#else
        public string ExpiresOn { get; set; }
#endif
        /// <summary>Unique identifier of the Client Certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FingerprintSha256 { get; set; }
#nullable restore
#else
        public string FingerprintSha256 { get; set; }
#endif
        /// <summary>Identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Date that the Client Certificate was issued by the Certificate Authority</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuedOn { get; set; }
#nullable restore
#else
        public string IssuedOn { get; set; }
#endif
        /// <summary>Location, provided by the CSR</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>Organization, provided by the CSR</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Organization { get; set; }
#nullable restore
#else
        public string Organization { get; set; }
#endif
        /// <summary>Organizational Unit, provided by the CSR</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationalUnit { get; set; }
#nullable restore
#else
        public string OrganizationalUnit { get; set; }
#endif
        /// <summary>The serial number on the created Client Certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The type of hash used for the Client Certificate..</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Signature { get; set; }
#nullable restore
#else
        public string Signature { get; set; }
#endif
        /// <summary>Subject Key Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ski { get; set; }
#nullable restore
#else
        public string Ski { get; set; }
#endif
        /// <summary>State, provided by the CSR</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>Client Certificates may be active or revoked, and the pending_reactivation or pending_revocation represent in-progress asynchronous transitions</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_status? Status { get; set; }
        /// <summary>The number of days the Client Certificate will be valid after the issued_on date</summary>
        public int? ValidityDays { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificate"/> and sets the default values.
        /// </summary>
        public Tls_certificates_and_hostnames_client_certificate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certificate", n => { Certificate = n.GetStringValue(); } },
                { "certificate_authority", n => { CertificateAuthority = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_certificate_authority>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_certificate_authority.CreateFromDiscriminatorValue); } },
                { "common_name", n => { CommonName = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "csr", n => { Csr = n.GetStringValue(); } },
                { "expires_on", n => { ExpiresOn = n.GetStringValue(); } },
                { "fingerprint_sha256", n => { FingerprintSha256 = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issued_on", n => { IssuedOn = n.GetStringValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "organization", n => { Organization = n.GetStringValue(); } },
                { "organizational_unit", n => { OrganizationalUnit = n.GetStringValue(); } },
                { "serial_number", n => { SerialNumber = n.GetStringValue(); } },
                { "signature", n => { Signature = n.GetStringValue(); } },
                { "ski", n => { Ski = n.GetStringValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_status>(); } },
                { "validity_days", n => { ValidityDays = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("certificate", Certificate);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_certificate_authority>("certificate_authority", CertificateAuthority);
            writer.WriteStringValue("common_name", CommonName);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("csr", Csr);
            writer.WriteStringValue("expires_on", ExpiresOn);
            writer.WriteStringValue("fingerprint_sha256", FingerprintSha256);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("issued_on", IssuedOn);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("organization", Organization);
            writer.WriteStringValue("organizational_unit", OrganizationalUnit);
            writer.WriteStringValue("serial_number", SerialNumber);
            writer.WriteStringValue("signature", Signature);
            writer.WriteStringValue("ski", Ski);
            writer.WriteStringValue("state", State);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tls_certificates_and_hostnames_client_certificates_components_schemas_status>("status", Status);
            writer.WriteIntValue("validity_days", ValidityDays);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
