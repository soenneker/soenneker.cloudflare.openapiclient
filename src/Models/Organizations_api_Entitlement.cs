// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Organizations_api_Entitlement : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation? Allocation { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation Allocation { get; set; }
#endif
        /// <summary>The feature property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Feature? Feature { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Feature Feature { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement"/> and sets the default values.
        /// </summary>
        public Organizations_api_Entitlement()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allocation", n => { Allocation = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation>(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation.CreateFromDiscriminatorValue); } },
                { "feature", n => { Feature = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Feature>(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Feature.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation>("allocation", Allocation);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Feature>("feature", Feature);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_MaxCountAllocation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_NullAllocation"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Organizations_api_Entitlement_allocation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation? OrganizationsApiBoolAllocation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation OrganizationsApiBoolAllocation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_MaxCountAllocation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_MaxCountAllocation? OrganizationsApiMaxCountAllocation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_MaxCountAllocation OrganizationsApiMaxCountAllocation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_NullAllocation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_NullAllocation? OrganizationsApiNullAllocation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_NullAllocation OrganizationsApiNullAllocation { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Entitlement.Organizations_api_Entitlement_allocation();
                result.OrganizationsApiBoolAllocation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation();
                result.OrganizationsApiMaxCountAllocation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_MaxCountAllocation();
                result.OrganizationsApiNullAllocation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_NullAllocation();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(OrganizationsApiBoolAllocation != null || OrganizationsApiMaxCountAllocation != null || OrganizationsApiNullAllocation != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(OrganizationsApiBoolAllocation, OrganizationsApiMaxCountAllocation, OrganizationsApiNullAllocation);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_BoolAllocation>(null, OrganizationsApiBoolAllocation, OrganizationsApiMaxCountAllocation, OrganizationsApiNullAllocation);
            }
        }
    }
}
#pragma warning restore CS0618
