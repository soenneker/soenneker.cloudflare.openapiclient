// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Additional settings that modify the rule&apos;s action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ZeroTrustGateway_ruleSettings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_add_headers? AddHeaders { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_add_headers AddHeaders { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Set by parent MSP accounts to enable their children to bypass this rule.</summary>
        public bool? AllowChildBypass { get; set; }
        /// <summary>Settings for the Audit SSH action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_audit_ssh? AuditSsh { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_audit_ssh AuditSsh { get; set; }
#endif
        /// <summary>Configure how browser isolation behaves.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_biso_admin_controls? BisoAdminControls { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_biso_admin_controls BisoAdminControls { get; set; }
#endif
        /// <summary>Custom block page settings. If missing/null, blocking will use the the account settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_block_page? BlockPage { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_block_page BlockPage { get; set; }
#endif
        /// <summary>Enable the custom block page.</summary>
        public bool? BlockPageEnabled { get; set; }
        /// <summary>The text describing why this block occurred, displayed on the custom block page (if enabled).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BlockReason { get; set; }
#nullable restore
#else
        public string BlockReason { get; set; }
#endif
        /// <summary>Set by children MSP accounts to bypass their parent&apos;s rules.</summary>
        public bool? BypassParentRule { get; set; }
        /// <summary>Configure how session check behaves.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_check_session? CheckSession { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_check_session CheckSession { get; set; }
#endif
        /// <summary>Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when &apos;resolve_dns_through_cloudflare&apos; or &apos;resolve_dns_internally&apos; are set. DNS queries will route to the address closest to their origin. Only valid when a rule&apos;s action is set to &apos;resolve&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_dns_resolvers? DnsResolvers { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_dns_resolvers DnsResolvers { get; set; }
#endif
        /// <summary>Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_egress? Egress { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_egress Egress { get; set; }
#endif
        /// <summary>Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.</summary>
        public bool? IgnoreCnameCategoryMatches { get; set; }
        /// <summary>INSECURE - disable DNSSEC validation (for Allow actions).</summary>
        public bool? InsecureDisableDnssecValidation { get; set; }
        /// <summary>Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.</summary>
        public bool? IpCategories { get; set; }
        /// <summary>Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.</summary>
        public bool? IpIndicatorFeeds { get; set; }
        /// <summary>Send matching traffic to the supplied destination IP address. and port.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_l4override? L4override { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_l4override L4override { get; set; }
#endif
        /// <summary>Configure a notification to display on the user&apos;s device when this rule is matched.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_notification_settings? NotificationSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_notification_settings NotificationSettings { get; set; }
#endif
        /// <summary>Override matching DNS queries with a hostname.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OverrideHost { get; set; }
#nullable restore
#else
        public string OverrideHost { get; set; }
#endif
        /// <summary>Override matching DNS queries with an IP or set of IPs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OverrideIps { get; set; }
#nullable restore
#else
        public List<string> OverrideIps { get; set; }
#endif
        /// <summary>Configure DLP payload logging.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_payload_log? PayloadLog { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_payload_log PayloadLog { get; set; }
#endif
        /// <summary>Settings that apply to quarantine rules.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_quarantine? Quarantine { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_quarantine Quarantine { get; set; }
#endif
        /// <summary>Settings that apply to redirect rules.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_redirect? Redirect { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_redirect Redirect { get; set; }
#endif
        /// <summary>Configure to forward the query to the internal DNS service, passing the specified &apos;view_id&apos; as input. Cannot be set when &apos;dns_resolvers&apos; are specified or &apos;resolve_dns_through_cloudflare&apos; is set. Only valid when a rule&apos;s action is set to &apos;resolve&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally? ResolveDnsInternally { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally ResolveDnsInternally { get; set; }
#endif
        /// <summary>Enable to send queries that match the policy to Cloudflare&apos;s default 1.1.1.1 DNS resolver. Cannot be set when &apos;dns_resolvers&apos; are specified or &apos;resolve_dns_internally&apos; is set. Only valid when a rule&apos;s action is set to &apos;resolve&apos;.</summary>
        public bool? ResolveDnsThroughCloudflare { get; set; }
        /// <summary>Configure behavior when an upstream cert is invalid or an SSL error occurs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_untrusted_cert? UntrustedCert { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_untrusted_cert UntrustedCert { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings"/> and sets the default values.
        /// </summary>
        public ZeroTrustGateway_ruleSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "add_headers", n => { AddHeaders = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_add_headers>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_add_headers.CreateFromDiscriminatorValue); } },
                { "allow_child_bypass", n => { AllowChildBypass = n.GetBoolValue(); } },
                { "audit_ssh", n => { AuditSsh = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_audit_ssh>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_audit_ssh.CreateFromDiscriminatorValue); } },
                { "biso_admin_controls", n => { BisoAdminControls = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_biso_admin_controls>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_biso_admin_controls.CreateFromDiscriminatorValue); } },
                { "block_page", n => { BlockPage = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_block_page>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_block_page.CreateFromDiscriminatorValue); } },
                { "block_page_enabled", n => { BlockPageEnabled = n.GetBoolValue(); } },
                { "block_reason", n => { BlockReason = n.GetStringValue(); } },
                { "bypass_parent_rule", n => { BypassParentRule = n.GetBoolValue(); } },
                { "check_session", n => { CheckSession = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_check_session>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_check_session.CreateFromDiscriminatorValue); } },
                { "dns_resolvers", n => { DnsResolvers = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_dns_resolvers>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_dns_resolvers.CreateFromDiscriminatorValue); } },
                { "egress", n => { Egress = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_egress>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_egress.CreateFromDiscriminatorValue); } },
                { "ignore_cname_category_matches", n => { IgnoreCnameCategoryMatches = n.GetBoolValue(); } },
                { "insecure_disable_dnssec_validation", n => { InsecureDisableDnssecValidation = n.GetBoolValue(); } },
                { "ip_categories", n => { IpCategories = n.GetBoolValue(); } },
                { "ip_indicator_feeds", n => { IpIndicatorFeeds = n.GetBoolValue(); } },
                { "l4override", n => { L4override = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_l4override>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_l4override.CreateFromDiscriminatorValue); } },
                { "notification_settings", n => { NotificationSettings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_notification_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_notification_settings.CreateFromDiscriminatorValue); } },
                { "override_host", n => { OverrideHost = n.GetStringValue(); } },
                { "override_ips", n => { OverrideIps = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "payload_log", n => { PayloadLog = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_payload_log>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_payload_log.CreateFromDiscriminatorValue); } },
                { "quarantine", n => { Quarantine = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_quarantine>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_quarantine.CreateFromDiscriminatorValue); } },
                { "redirect", n => { Redirect = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_redirect>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_redirect.CreateFromDiscriminatorValue); } },
                { "resolve_dns_internally", n => { ResolveDnsInternally = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally.CreateFromDiscriminatorValue); } },
                { "resolve_dns_through_cloudflare", n => { ResolveDnsThroughCloudflare = n.GetBoolValue(); } },
                { "untrusted_cert", n => { UntrustedCert = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_untrusted_cert>(global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_untrusted_cert.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_add_headers>("add_headers", AddHeaders);
            writer.WriteBoolValue("allow_child_bypass", AllowChildBypass);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_audit_ssh>("audit_ssh", AuditSsh);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_biso_admin_controls>("biso_admin_controls", BisoAdminControls);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_block_page>("block_page", BlockPage);
            writer.WriteBoolValue("block_page_enabled", BlockPageEnabled);
            writer.WriteStringValue("block_reason", BlockReason);
            writer.WriteBoolValue("bypass_parent_rule", BypassParentRule);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_check_session>("check_session", CheckSession);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_dns_resolvers>("dns_resolvers", DnsResolvers);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_egress>("egress", Egress);
            writer.WriteBoolValue("ignore_cname_category_matches", IgnoreCnameCategoryMatches);
            writer.WriteBoolValue("insecure_disable_dnssec_validation", InsecureDisableDnssecValidation);
            writer.WriteBoolValue("ip_categories", IpCategories);
            writer.WriteBoolValue("ip_indicator_feeds", IpIndicatorFeeds);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_l4override>("l4override", L4override);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_notification_settings>("notification_settings", NotificationSettings);
            writer.WriteStringValue("override_host", OverrideHost);
            writer.WriteCollectionOfPrimitiveValues<string>("override_ips", OverrideIps);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_payload_log>("payload_log", PayloadLog);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_quarantine>("quarantine", Quarantine);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_redirect>("redirect", Redirect);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally>("resolve_dns_internally", ResolveDnsInternally);
            writer.WriteBoolValue("resolve_dns_through_cloudflare", ResolveDnsThroughCloudflare);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_untrusted_cert>("untrusted_cert", UntrustedCert);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
