// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Get_v2_active_livestream_session_details_200_data_session : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Timestamp the object was created at. The time is returned in ISO format.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The err_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrMessage { get; set; }
#nullable restore
#else
        public string ErrMessage { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The time duration for which the input was given or the meeting was streamed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IngestSeconds { get; set; }
#nullable restore
#else
        public string IngestSeconds { get; set; }
#endif
        /// <summary>Timestamp the object was invoked. The time is returned in ISO format.</summary>
        public DateTimeOffset? InvokedTime { get; set; }
        /// <summary>The livestream_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LivestreamId { get; set; }
#nullable restore
#else
        public string LivestreamId { get; set; }
#endif
        /// <summary>Timestamp the object was started. The time is returned in ISO format.</summary>
        public DateTimeOffset? StartedTime { get; set; }
        /// <summary>Timestamp the object was stopped. The time is returned in ISO format.</summary>
        public DateTimeOffset? StoppedTime { get; set; }
        /// <summary>Timestamp the object was updated at. The time is returned in ISO format.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The total view time for which the viewers watched the stream.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewerSeconds { get; set; }
#nullable restore
#else
        public string ViewerSeconds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Get_v2_active_livestream_session_details_200_data_session"/> and sets the default values.
        /// </summary>
        public Get_v2_active_livestream_session_details_200_data_session()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Get_v2_active_livestream_session_details_200_data_session"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Get_v2_active_livestream_session_details_200_data_session CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Get_v2_active_livestream_session_details_200_data_session();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "err_message", n => { ErrMessage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "ingest_seconds", n => { IngestSeconds = n.GetStringValue(); } },
                { "invoked_time", n => { InvokedTime = n.GetDateTimeOffsetValue(); } },
                { "livestream_id", n => { LivestreamId = n.GetStringValue(); } },
                { "started_time", n => { StartedTime = n.GetDateTimeOffsetValue(); } },
                { "stopped_time", n => { StoppedTime = n.GetDateTimeOffsetValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "viewer_seconds", n => { ViewerSeconds = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("err_message", ErrMessage);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("ingest_seconds", IngestSeconds);
            writer.WriteDateTimeOffsetValue("invoked_time", InvokedTime);
            writer.WriteStringValue("livestream_id", LivestreamId);
            writer.WriteDateTimeOffsetValue("started_time", StartedTime);
            writer.WriteDateTimeOffsetValue("stopped_time", StoppedTime);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("viewer_seconds", ViewerSeconds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
