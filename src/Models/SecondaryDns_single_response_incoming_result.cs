// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SecondaryDns_single_response_incoming_result : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>How often should a secondary zone auto refresh regardless of DNS NOTIFY.Not applicable for primary zones.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_auto_refresh_seconds? AutoRefreshSeconds { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_auto_refresh_seconds AutoRefreshSeconds { get; set; }
#endif
        /// <summary>The time for a specific event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time? CheckedTime { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time CheckedTime { get; set; }
#endif
        /// <summary>The time for a specific event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time? CreatedTime { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time CreatedTime { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier? Id { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier Id { get; set; }
#endif
        /// <summary>The time for a specific event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time? ModifiedTime { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time ModifiedTime { get; set; }
#endif
        /// <summary>Zone name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_name? Name { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_name Name { get; set; }
#endif
        /// <summary>A list of peer tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier>? Peers { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier> Peers { get; set; }
#endif
        /// <summary>The serial number of the SOA for the given zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_soa_serial? SoaSerial { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_soa_serial SoaSerial { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_single_response_incoming_result"/> and sets the default values.
        /// </summary>
        public SecondaryDns_single_response_incoming_result()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_single_response_incoming_result"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_single_response_incoming_result CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_single_response_incoming_result();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auto_refresh_seconds", n => { AutoRefreshSeconds = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_auto_refresh_seconds>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_auto_refresh_seconds.CreateFromDiscriminatorValue); } },
                { "checked_time", n => { CheckedTime = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time.CreateFromDiscriminatorValue); } },
                { "created_time", n => { CreatedTime = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier.CreateFromDiscriminatorValue); } },
                { "modified_time", n => { ModifiedTime = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_name>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_name.CreateFromDiscriminatorValue); } },
                { "peers", n => { Peers = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier.CreateFromDiscriminatorValue)?.AsList(); } },
                { "soa_serial", n => { SoaSerial = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_soa_serial>(global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_soa_serial.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_auto_refresh_seconds>("auto_refresh_seconds", AutoRefreshSeconds);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>("checked_time", CheckedTime);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>("created_time", CreatedTime);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier>("id", Id);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_time>("modified_time", ModifiedTime);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_name>("name", Name);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_identifier>("peers", Peers);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.SecondaryDns_soa_serial>("soa_serial", SoaSerial);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
