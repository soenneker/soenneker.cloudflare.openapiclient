// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Metadata about the zone.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zones_zone_meta : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The zone is only configured for CDN.</summary>
        public bool? CdnOnly { get; set; }
        /// <summary>Number of Custom Certificates the zone can have.</summary>
        public int? CustomCertificateQuota { get; set; }
        /// <summary>The zone is only configured for DNS.</summary>
        public bool? DnsOnly { get; set; }
        /// <summary>The zone is setup with Foundation DNS.</summary>
        public bool? FoundationDns { get; set; }
        /// <summary>Number of Page Rules a zone can have.</summary>
        public int? PageRuleQuota { get; set; }
        /// <summary>The zone has been flagged for phishing.</summary>
        public bool? PhishingDetected { get; set; }
        /// <summary>The step property</summary>
        public int? Step { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta"/> and sets the default values.
        /// </summary>
        public Zones_zone_meta()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_meta();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cdn_only", n => { CdnOnly = n.GetBoolValue(); } },
                { "custom_certificate_quota", n => { CustomCertificateQuota = n.GetIntValue(); } },
                { "dns_only", n => { DnsOnly = n.GetBoolValue(); } },
                { "foundation_dns", n => { FoundationDns = n.GetBoolValue(); } },
                { "page_rule_quota", n => { PageRuleQuota = n.GetIntValue(); } },
                { "phishing_detected", n => { PhishingDetected = n.GetBoolValue(); } },
                { "step", n => { Step = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cdn_only", CdnOnly);
            writer.WriteIntValue("custom_certificate_quota", CustomCertificateQuota);
            writer.WriteBoolValue("dns_only", DnsOnly);
            writer.WriteBoolValue("foundation_dns", FoundationDns);
            writer.WriteIntValue("page_rule_quota", PageRuleQuota);
            writer.WriteBoolValue("phishing_detected", PhishingDetected);
            writer.WriteIntValue("step", Step);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
