// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Urlscanner_create_scan : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Country to geo egress from</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_country? Country { get; set; }
        /// <summary>Set custom headers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_customHeaders? CustomHeaders { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_customHeaders CustomHeaders { get; set; }
#endif
        /// <summary>Take multiple screenshots targeting different device types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_screenshotsResolutions?>? ScreenshotsResolutions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_screenshotsResolutions?> ScreenshotsResolutions { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The option `Public` means it will be included in listings like recent scans and search results. `Unlisted` means it will not be included in the aforementioned listings, users will need to have the scan&apos;s ID to access it. A a scan will be automatically marked as unlisted if it fails, if it contains potential PII or other sensitive material.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_visibility? Visibility { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan"/> and sets the default values.
        /// </summary>
        public Urlscanner_create_scan()
        {
            AdditionalData = new Dictionary<string, object>();
            Visibility = global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_visibility.Public;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "country", n => { Country = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_country>(); } },
                { "customHeaders", n => { CustomHeaders = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_customHeaders>(global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_customHeaders.CreateFromDiscriminatorValue); } },
                { "screenshotsResolutions", n => { ScreenshotsResolutions = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_screenshotsResolutions>()?.AsList(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_visibility>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_country>("country", Country);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_customHeaders>("customHeaders", CustomHeaders);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_screenshotsResolutions>("screenshotsResolutions", ScreenshotsResolutions);
            writer.WriteStringValue("url", Url);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_create_scan_visibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
