// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Workers_ai_post_run_cf_openai_whisper_large_v3_turbo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Base64 encoded value of the audio data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Audio { get; set; }
#nullable restore
#else
        public string Audio { get; set; }
#endif
        /// <summary>A text prompt to help provide context to the model on the contents of the audio.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitialPrompt { get; set; }
#nullable restore
#else
        public string InitialPrompt { get; set; }
#endif
        /// <summary>The language of the audio being transcribed or translated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The prefix it appended the the beginning of the output of the transcription and can guide the transcription result.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Prefix { get; set; }
#nullable restore
#else
        public string Prefix { get; set; }
#endif
        /// <summary>Supported tasks are &apos;translate&apos; or &apos;transcribe&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Task { get; set; }
#nullable restore
#else
        public string Task { get; set; }
#endif
        /// <summary>Preprocess the audio with a voice activity detection model.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VadFilter { get; set; }
#nullable restore
#else
        public string VadFilter { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_openai_whisper_large_v3_turbo"/> and sets the default values.
        /// </summary>
        public Workers_ai_post_run_cf_openai_whisper_large_v3_turbo()
        {
            AdditionalData = new Dictionary<string, object>();
            Language = "en";
            Task = "transcribe";
            VadFilter = "false";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_openai_whisper_large_v3_turbo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_openai_whisper_large_v3_turbo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Workers_ai_post_run_cf_openai_whisper_large_v3_turbo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audio", n => { Audio = n.GetStringValue(); } },
                { "initial_prompt", n => { InitialPrompt = n.GetStringValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "prefix", n => { Prefix = n.GetStringValue(); } },
                { "task", n => { Task = n.GetStringValue(); } },
                { "vad_filter", n => { VadFilter = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("audio", Audio);
            writer.WriteStringValue("initial_prompt", InitialPrompt);
            writer.WriteStringValue("language", Language);
            writer.WriteStringValue("prefix", Prefix);
            writer.WriteStringValue("task", Task);
            writer.WriteStringValue("vad_filter", VadFilter);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
