// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dos_DnsProtectionRuleUpdate : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The new burst sensitivity. Optional. Must be one of &apos;low&apos;, &apos;medium&apos;, &apos;high&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BurstSensitivity { get; set; }
#nullable restore
#else
        public string BurstSensitivity { get; set; }
#endif
        /// <summary>The new mode for DNS Protection. Optional. Must be one of &apos;enabled&apos;, &apos;disabled&apos;, &apos;monitoring&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mode { get; set; }
#nullable restore
#else
        public string Mode { get; set; }
#endif
        /// <summary>The new profile sensitivity. Optional. Recommended setting is &apos;low&apos;. Must be one of &apos;low&apos;, &apos;medium&apos;, &apos;high&apos;, or &apos;very_high&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileSensitivity { get; set; }
#nullable restore
#else
        public string ProfileSensitivity { get; set; }
#endif
        /// <summary>The new rate sensitivity. Optional. Must be one of &apos;low&apos;, &apos;medium&apos;, &apos;high&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RateSensitivity { get; set; }
#nullable restore
#else
        public string RateSensitivity { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_DnsProtectionRuleUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_DnsProtectionRuleUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dos_DnsProtectionRuleUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "burst_sensitivity", n => { BurstSensitivity = n.GetStringValue(); } },
                { "mode", n => { Mode = n.GetStringValue(); } },
                { "profile_sensitivity", n => { ProfileSensitivity = n.GetStringValue(); } },
                { "rate_sensitivity", n => { RateSensitivity = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("burst_sensitivity", BurstSensitivity);
            writer.WriteStringValue("mode", Mode);
            writer.WriteStringValue("profile_sensitivity", ProfileSensitivity);
            writer.WriteStringValue("rate_sensitivity", RateSensitivity);
        }
    }
}
#pragma warning restore CS0618
