// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot Tunnels
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Mconn_snapshot_tunnel : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Connector identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectorId { get; set; }
#nullable restore
#else
        public string ConnectorId { get; set; }
#endif
        /// <summary>Name of tunnel health state (unknown, healthy, degraded, down)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HealthState { get; set; }
#nullable restore
#else
        public string HealthState { get; set; }
#endif
        /// <summary>Numeric value associated with tunnel state (0 = unknown, 1 = healthy, 2 = degraded, 3 = down)</summary>
        public double? HealthValue { get; set; }
        /// <summary>The tunnel interface name (i.e. xfrm1, xfrm3.99, etc.)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InterfaceName { get; set; }
#nullable restore
#else
        public string InterfaceName { get; set; }
#endif
        /// <summary>MTU as measured between the two ends of the tunnel</summary>
        public double? ProbedMtu { get; set; }
        /// <summary>Tunnel identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TunnelId { get; set; }
#nullable restore
#else
        public string TunnelId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel"/> and sets the default values.
        /// </summary>
        public Mconn_snapshot_tunnel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Mconn_snapshot_tunnel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "connector_id", n => { ConnectorId = n.GetStringValue(); } },
                { "health_state", n => { HealthState = n.GetStringValue(); } },
                { "health_value", n => { HealthValue = n.GetDoubleValue(); } },
                { "interface_name", n => { InterfaceName = n.GetStringValue(); } },
                { "probed_mtu", n => { ProbedMtu = n.GetDoubleValue(); } },
                { "tunnel_id", n => { TunnelId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("connector_id", ConnectorId);
            writer.WriteStringValue("health_state", HealthState);
            writer.WriteDoubleValue("health_value", HealthValue);
            writer.WriteStringValue("interface_name", InterfaceName);
            writer.WriteDoubleValue("probed_mtu", ProbedMtu);
            writer.WriteStringValue("tunnel_id", TunnelId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
