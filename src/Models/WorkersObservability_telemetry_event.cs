// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// The data structure of a telemetry event
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WorkersObservability_telemetry_event : IParsable
    {
        /// <summary>The dataset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Dataset { get; set; }
#nullable restore
#else
        public string Dataset { get; set; }
#endif
        /// <summary>The Metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event_Metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event_Metadata Metadata { get; set; }
#endif
        /// <summary>The source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Source { get; set; }
#nullable restore
#else
        public UntypedNode Source { get; set; }
#endif
        /// <summary>The timestamp property</summary>
        public int? Timestamp { get; set; }
        /// <summary>Cloudflare Workers event information enriches your logs so you can easily identify and debug issues.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Workers { get; set; }
#nullable restore
#else
        public UntypedNode Workers { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dataset", n => { Dataset = n.GetStringValue(); } },
                { "$metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event_Metadata>(global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event_Metadata.CreateFromDiscriminatorValue); } },
                { "source", n => { Source = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "timestamp", n => { Timestamp = n.GetIntValue(); } },
                { "$workers", n => { Workers = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("dataset", Dataset);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.WorkersObservability_telemetry_event_Metadata>("$metadata", Metadata);
            writer.WriteObjectValue<UntypedNode>("source", Source);
            writer.WriteIntValue("timestamp", Timestamp);
            writer.WriteObjectValue<UntypedNode>("$workers", Workers);
        }
    }
}
#pragma warning restore CS0618
