// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Page_rules_edit_a_page_rule_RequestBody_application_json : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The set of actions to perform if the targets of this rule match therequest. Actions can redirect to another URL or override settings, butnot both.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_>? Actions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_> Actions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The priority of the rule, used to define which Page Rule is processedover another. A higher number indicates a higher priority. For example,if you have a catch-all Page Rule (rule A: `/images/*`) but want a morespecific Page Rule to take precedence (rule B: `/images/special/*`),specify a higher priority for rule B so it overrides rule A.</summary>
        public int? Priority { get; set; }
        /// <summary>The status of the Page Rule.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_status? Status { get; set; }
        /// <summary>The rule targets to evaluate on each request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_target>? Targets { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_target> Targets { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json"/> and sets the default values.
        /// </summary>
        public Page_rules_edit_a_page_rule_RequestBody_application_json()
        {
            AdditionalData = new Dictionary<string, object>();
            Status = global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_status.Disabled;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actions", n => { Actions = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_>(global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_.CreateFromDiscriminatorValue)?.AsList(); } },
                { "priority", n => { Priority = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_status>(); } },
                { "targets", n => { Targets = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_target>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_target.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_>("actions", Actions);
            writer.WriteIntValue("priority", Priority);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_status>("status", Status);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_target>("targets", Targets);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPagerule_ : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https? ZonesAlwaysUseHttps { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https ZonesAlwaysUseHttps { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites? ZonesAutomaticHttpsRewrites { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites ZonesAutomaticHttpsRewrites { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl? ZonesBrowserCacheTtl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl ZonesBrowserCacheTtl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check? ZonesBrowserCheck { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check ZonesBrowserCheck { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie? ZonesBypassCacheOnCookie { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie ZonesBypassCacheOnCookie { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type? ZonesCacheByDeviceType { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type ZonesCacheByDeviceType { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor? ZonesCacheDeceptionArmor { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor ZonesCacheDeceptionArmor { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields? ZonesCacheKeyFields { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields ZonesCacheKeyFields { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level? ZonesCacheLevel { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level ZonesCacheLevel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie? ZonesCacheOnCookie { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie ZonesCacheOnCookie { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status? ZonesCacheTtlByStatus { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status ZonesCacheTtlByStatus { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps? ZonesDisableApps { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps ZonesDisableApps { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance? ZonesDisablePerformance { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance ZonesDisablePerformance { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security? ZonesDisableSecurity { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security ZonesDisableSecurity { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz? ZonesDisableZaraz { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz ZonesDisableZaraz { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl? ZonesEdgeCacheTtl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl ZonesEdgeCacheTtl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation? ZonesEmailObfuscation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation ZonesEmailObfuscation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control? ZonesExplicitCacheControl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control ZonesExplicitCacheControl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url? ZonesForwardingUrl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url ZonesForwardingUrl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override? ZonesHostHeaderOverride { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override ZonesHostHeaderOverride { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation? ZonesIpGeolocation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation ZonesIpGeolocation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage? ZonesMirage { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage ZonesMirage { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption? ZonesOpportunisticEncryption { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption ZonesOpportunisticEncryption { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru? ZonesOriginErrorPagePassThru { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru ZonesOriginErrorPagePassThru { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish? ZonesPolish { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish ZonesPolish { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override? ZonesResolveOverride { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override ZonesResolveOverride { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag? ZonesRespectStrongEtag { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag ZonesRespectStrongEtag { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering? ZonesResponseBuffering { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering ZonesResponseBuffering { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader? ZonesRocketLoader { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader ZonesRocketLoader { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level? ZonesSecurityLevel { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level ZonesSecurityLevel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache? ZonesSortQueryStringForCache { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache ZonesSortQueryStringForCache { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl? ZonesSsl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl ZonesSsl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header? ZonesTrueClientIpHeader { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header ZonesTrueClientIpHeader { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf? ZonesWaf { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf ZonesWaf { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_ CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("id")?.GetStringValue();
                var result = new global::Soenneker.Cloudflare.OpenApiClient.Models.Page_rules_edit_a_page_rule_RequestBody_application_json.WithPagerule_();
                if("zones_always_use_https".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesAlwaysUseHttps = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https();
                }
                else if("zones_automatic_https_rewrites".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesAutomaticHttpsRewrites = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites();
                }
                else if("zones_browser_cache_ttl".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesBrowserCacheTtl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl();
                }
                else if("zones_browser_check".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesBrowserCheck = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check();
                }
                else if("zones_bypass_cache_on_cookie".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesBypassCacheOnCookie = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie();
                }
                else if("zones_cache_by_device_type".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheByDeviceType = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type();
                }
                else if("zones_cache_deception_armor".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheDeceptionArmor = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor();
                }
                else if("zones_cache_key_fields".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheKeyFields = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields();
                }
                else if("zones_cache_level".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheLevel = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level();
                }
                else if("zones_cache_on_cookie".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheOnCookie = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie();
                }
                else if("zones_cache_ttl_by_status".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesCacheTtlByStatus = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status();
                }
                else if("zones_disable_apps".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesDisableApps = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps();
                }
                else if("zones_disable_performance".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesDisablePerformance = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance();
                }
                else if("zones_disable_security".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesDisableSecurity = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security();
                }
                else if("zones_disable_zaraz".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesDisableZaraz = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz();
                }
                else if("zones_edge_cache_ttl".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesEdgeCacheTtl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl();
                }
                else if("zones_email_obfuscation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesEmailObfuscation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation();
                }
                else if("zones_explicit_cache_control".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesExplicitCacheControl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control();
                }
                else if("zones_forwarding_url".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesForwardingUrl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url();
                }
                else if("zones_host_header_override".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesHostHeaderOverride = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override();
                }
                else if("zones_ip_geolocation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesIpGeolocation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation();
                }
                else if("zones_mirage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesMirage = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage();
                }
                else if("zones_opportunistic_encryption".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesOpportunisticEncryption = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption();
                }
                else if("zones_origin_error_page_pass_thru".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesOriginErrorPagePassThru = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru();
                }
                else if("zones_polish".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesPolish = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish();
                }
                else if("zones_resolve_override".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesResolveOverride = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override();
                }
                else if("zones_respect_strong_etag".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesRespectStrongEtag = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag();
                }
                else if("zones_response_buffering".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesResponseBuffering = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering();
                }
                else if("zones_rocket_loader".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesRocketLoader = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader();
                }
                else if("zones_security_level".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesSecurityLevel = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level();
                }
                else if("zones_sort_query_string_for_cache".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesSortQueryStringForCache = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache();
                }
                else if("zones_ssl".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesSsl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl();
                }
                else if("zones_true_client_ip_header".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesTrueClientIpHeader = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header();
                }
                else if("zones_waf".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ZonesWaf = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ZonesAlwaysUseHttps != null)
                {
                    return ZonesAlwaysUseHttps.GetFieldDeserializers();
                }
                else if(ZonesAutomaticHttpsRewrites != null)
                {
                    return ZonesAutomaticHttpsRewrites.GetFieldDeserializers();
                }
                else if(ZonesBrowserCacheTtl != null)
                {
                    return ZonesBrowserCacheTtl.GetFieldDeserializers();
                }
                else if(ZonesBrowserCheck != null)
                {
                    return ZonesBrowserCheck.GetFieldDeserializers();
                }
                else if(ZonesBypassCacheOnCookie != null)
                {
                    return ZonesBypassCacheOnCookie.GetFieldDeserializers();
                }
                else if(ZonesCacheByDeviceType != null)
                {
                    return ZonesCacheByDeviceType.GetFieldDeserializers();
                }
                else if(ZonesCacheDeceptionArmor != null)
                {
                    return ZonesCacheDeceptionArmor.GetFieldDeserializers();
                }
                else if(ZonesCacheKeyFields != null)
                {
                    return ZonesCacheKeyFields.GetFieldDeserializers();
                }
                else if(ZonesCacheLevel != null)
                {
                    return ZonesCacheLevel.GetFieldDeserializers();
                }
                else if(ZonesCacheOnCookie != null)
                {
                    return ZonesCacheOnCookie.GetFieldDeserializers();
                }
                else if(ZonesCacheTtlByStatus != null)
                {
                    return ZonesCacheTtlByStatus.GetFieldDeserializers();
                }
                else if(ZonesDisableApps != null)
                {
                    return ZonesDisableApps.GetFieldDeserializers();
                }
                else if(ZonesDisablePerformance != null)
                {
                    return ZonesDisablePerformance.GetFieldDeserializers();
                }
                else if(ZonesDisableSecurity != null)
                {
                    return ZonesDisableSecurity.GetFieldDeserializers();
                }
                else if(ZonesDisableZaraz != null)
                {
                    return ZonesDisableZaraz.GetFieldDeserializers();
                }
                else if(ZonesEdgeCacheTtl != null)
                {
                    return ZonesEdgeCacheTtl.GetFieldDeserializers();
                }
                else if(ZonesEmailObfuscation != null)
                {
                    return ZonesEmailObfuscation.GetFieldDeserializers();
                }
                else if(ZonesExplicitCacheControl != null)
                {
                    return ZonesExplicitCacheControl.GetFieldDeserializers();
                }
                else if(ZonesForwardingUrl != null)
                {
                    return ZonesForwardingUrl.GetFieldDeserializers();
                }
                else if(ZonesHostHeaderOverride != null)
                {
                    return ZonesHostHeaderOverride.GetFieldDeserializers();
                }
                else if(ZonesIpGeolocation != null)
                {
                    return ZonesIpGeolocation.GetFieldDeserializers();
                }
                else if(ZonesMirage != null)
                {
                    return ZonesMirage.GetFieldDeserializers();
                }
                else if(ZonesOpportunisticEncryption != null)
                {
                    return ZonesOpportunisticEncryption.GetFieldDeserializers();
                }
                else if(ZonesOriginErrorPagePassThru != null)
                {
                    return ZonesOriginErrorPagePassThru.GetFieldDeserializers();
                }
                else if(ZonesPolish != null)
                {
                    return ZonesPolish.GetFieldDeserializers();
                }
                else if(ZonesResolveOverride != null)
                {
                    return ZonesResolveOverride.GetFieldDeserializers();
                }
                else if(ZonesRespectStrongEtag != null)
                {
                    return ZonesRespectStrongEtag.GetFieldDeserializers();
                }
                else if(ZonesResponseBuffering != null)
                {
                    return ZonesResponseBuffering.GetFieldDeserializers();
                }
                else if(ZonesRocketLoader != null)
                {
                    return ZonesRocketLoader.GetFieldDeserializers();
                }
                else if(ZonesSecurityLevel != null)
                {
                    return ZonesSecurityLevel.GetFieldDeserializers();
                }
                else if(ZonesSortQueryStringForCache != null)
                {
                    return ZonesSortQueryStringForCache.GetFieldDeserializers();
                }
                else if(ZonesSsl != null)
                {
                    return ZonesSsl.GetFieldDeserializers();
                }
                else if(ZonesTrueClientIpHeader != null)
                {
                    return ZonesTrueClientIpHeader.GetFieldDeserializers();
                }
                else if(ZonesWaf != null)
                {
                    return ZonesWaf.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ZonesAlwaysUseHttps != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_use_https>(null, ZonesAlwaysUseHttps);
                }
                else if(ZonesAutomaticHttpsRewrites != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_automatic_https_rewrites>(null, ZonesAutomaticHttpsRewrites);
                }
                else if(ZonesBrowserCacheTtl != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_cache_ttl>(null, ZonesBrowserCacheTtl);
                }
                else if(ZonesBrowserCheck != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_browser_check>(null, ZonesBrowserCheck);
                }
                else if(ZonesBypassCacheOnCookie != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_bypass_cache_on_cookie>(null, ZonesBypassCacheOnCookie);
                }
                else if(ZonesCacheByDeviceType != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_by_device_type>(null, ZonesCacheByDeviceType);
                }
                else if(ZonesCacheDeceptionArmor != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_deception_armor>(null, ZonesCacheDeceptionArmor);
                }
                else if(ZonesCacheKeyFields != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_key_fields>(null, ZonesCacheKeyFields);
                }
                else if(ZonesCacheLevel != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_level>(null, ZonesCacheLevel);
                }
                else if(ZonesCacheOnCookie != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_on_cookie>(null, ZonesCacheOnCookie);
                }
                else if(ZonesCacheTtlByStatus != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_ttl_by_status>(null, ZonesCacheTtlByStatus);
                }
                else if(ZonesDisableApps != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_apps>(null, ZonesDisableApps);
                }
                else if(ZonesDisablePerformance != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_performance>(null, ZonesDisablePerformance);
                }
                else if(ZonesDisableSecurity != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_security>(null, ZonesDisableSecurity);
                }
                else if(ZonesDisableZaraz != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_disable_zaraz>(null, ZonesDisableZaraz);
                }
                else if(ZonesEdgeCacheTtl != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_edge_cache_ttl>(null, ZonesEdgeCacheTtl);
                }
                else if(ZonesEmailObfuscation != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_email_obfuscation>(null, ZonesEmailObfuscation);
                }
                else if(ZonesExplicitCacheControl != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_explicit_cache_control>(null, ZonesExplicitCacheControl);
                }
                else if(ZonesForwardingUrl != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_forwarding_url>(null, ZonesForwardingUrl);
                }
                else if(ZonesHostHeaderOverride != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_host_header_override>(null, ZonesHostHeaderOverride);
                }
                else if(ZonesIpGeolocation != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ip_geolocation>(null, ZonesIpGeolocation);
                }
                else if(ZonesMirage != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_mirage>(null, ZonesMirage);
                }
                else if(ZonesOpportunisticEncryption != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_encryption>(null, ZonesOpportunisticEncryption);
                }
                else if(ZonesOriginErrorPagePassThru != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_origin_error_page_pass_thru>(null, ZonesOriginErrorPagePassThru);
                }
                else if(ZonesPolish != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_polish>(null, ZonesPolish);
                }
                else if(ZonesResolveOverride != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_resolve_override>(null, ZonesResolveOverride);
                }
                else if(ZonesRespectStrongEtag != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_respect_strong_etag>(null, ZonesRespectStrongEtag);
                }
                else if(ZonesResponseBuffering != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_response_buffering>(null, ZonesResponseBuffering);
                }
                else if(ZonesRocketLoader != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_rocket_loader>(null, ZonesRocketLoader);
                }
                else if(ZonesSecurityLevel != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_level>(null, ZonesSecurityLevel);
                }
                else if(ZonesSortQueryStringForCache != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sort_query_string_for_cache>(null, ZonesSortQueryStringForCache);
                }
                else if(ZonesSsl != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl>(null, ZonesSsl);
                }
                else if(ZonesTrueClientIpHeader != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_true_client_ip_header>(null, ZonesTrueClientIpHeader);
                }
                else if(ZonesWaf != null)
                {
                    writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_waf>(null, ZonesWaf);
                }
            }
        }
    }
}
#pragma warning restore CS0618
