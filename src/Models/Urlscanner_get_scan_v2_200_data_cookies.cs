// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Urlscanner_get_scan_v2_200_data_cookies : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The expires property</summary>
        public double? Expires { get; set; }
        /// <summary>The httpOnly property</summary>
        public bool? HttpOnly { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The priority property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Priority { get; set; }
#nullable restore
#else
        public string Priority { get; set; }
#endif
        /// <summary>The sameParty property</summary>
        public bool? SameParty { get; set; }
        /// <summary>The secure property</summary>
        public bool? Secure { get; set; }
        /// <summary>The session property</summary>
        public bool? Session { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>The sourcePort property</summary>
        public double? SourcePort { get; set; }
        /// <summary>The sourceScheme property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceScheme { get; set; }
#nullable restore
#else
        public string SourceScheme { get; set; }
#endif
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_data_cookies"/> and sets the default values.
        /// </summary>
        public Urlscanner_get_scan_v2_200_data_cookies()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_data_cookies"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_data_cookies CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_v2_200_data_cookies();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "expires", n => { Expires = n.GetDoubleValue(); } },
                { "httpOnly", n => { HttpOnly = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "priority", n => { Priority = n.GetStringValue(); } },
                { "sameParty", n => { SameParty = n.GetBoolValue(); } },
                { "secure", n => { Secure = n.GetBoolValue(); } },
                { "session", n => { Session = n.GetBoolValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
                { "sourcePort", n => { SourcePort = n.GetDoubleValue(); } },
                { "sourceScheme", n => { SourceScheme = n.GetStringValue(); } },
                { "value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("domain", Domain);
            writer.WriteDoubleValue("expires", Expires);
            writer.WriteBoolValue("httpOnly", HttpOnly);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("path", Path);
            writer.WriteStringValue("priority", Priority);
            writer.WriteBoolValue("sameParty", SameParty);
            writer.WriteBoolValue("secure", Secure);
            writer.WriteBoolValue("session", Session);
            writer.WriteDoubleValue("size", Size);
            writer.WriteDoubleValue("sourcePort", SourcePort);
            writer.WriteStringValue("sourceScheme", SourceScheme);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
