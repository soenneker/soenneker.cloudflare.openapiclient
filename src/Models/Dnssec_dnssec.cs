// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dnssec_dnssec : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Algorithm key code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Algorithm { get; private set; }
#nullable restore
#else
        public string Algorithm { get; private set; }
#endif
        /// <summary>Digest hash.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Digest { get; private set; }
#nullable restore
#else
        public string Digest { get; private set; }
#endif
        /// <summary>Type of digest algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DigestAlgorithm { get; private set; }
#nullable restore
#else
        public string DigestAlgorithm { get; private set; }
#endif
        /// <summary>Coded type for digest algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DigestType { get; private set; }
#nullable restore
#else
        public string DigestType { get; private set; }
#endif
        /// <summary>If true, multi-signer DNSSEC is enabled on the zone, allowing multipleproviders to serve a DNSSEC-signed zone at the same time.This is required for DNSKEY records (except those automaticallygenerated by Cloudflare) to be added to the zone.See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.</summary>
        public bool? DnssecMultiSigner { get; set; }
        /// <summary>If true, allows Cloudflare to transfer in a DNSSEC-signed zoneincluding signatures from an external provider, without requiringCloudflare to sign any records on the fly.Note that this feature has some limitations.See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.</summary>
        public bool? DnssecPresigned { get; set; }
        /// <summary>If true, enables the use of NSEC3 together with DNSSEC on the zone.Combined with setting dnssec_presigned to true, this enables the use ofNSEC3 records when transferring in from an external provider.If dnssec_presigned is instead set to false (default), NSEC3 records will begenerated and signed at request time.See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.</summary>
        public bool? DnssecUseNsec3 { get; set; }
        /// <summary>Full DS record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ds { get; private set; }
#nullable restore
#else
        public string Ds { get; private set; }
#endif
        /// <summary>Flag for DNSSEC record.</summary>
        public double? Flags { get; private set; }
        /// <summary>Code for key tag.</summary>
        public double? KeyTag { get; private set; }
        /// <summary>Algorithm key type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyType { get; private set; }
#nullable restore
#else
        public string KeyType { get; private set; }
#endif
        /// <summary>When DNSSEC was last modified.</summary>
        public DateTimeOffset? ModifiedOn { get; private set; }
        /// <summary>Public key for DS record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicKey { get; private set; }
#nullable restore
#else
        public string PublicKey { get; private set; }
#endif
        /// <summary>Status of DNSSEC, based on user-desired state and presence of necessary records.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_dnssec"/> and sets the default values.
        /// </summary>
        public Dnssec_dnssec()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_dnssec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_dnssec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_dnssec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "algorithm", n => { Algorithm = n.GetStringValue(); } },
                { "digest", n => { Digest = n.GetStringValue(); } },
                { "digest_algorithm", n => { DigestAlgorithm = n.GetStringValue(); } },
                { "digest_type", n => { DigestType = n.GetStringValue(); } },
                { "dnssec_multi_signer", n => { DnssecMultiSigner = n.GetBoolValue(); } },
                { "dnssec_presigned", n => { DnssecPresigned = n.GetBoolValue(); } },
                { "dnssec_use_nsec3", n => { DnssecUseNsec3 = n.GetBoolValue(); } },
                { "ds", n => { Ds = n.GetStringValue(); } },
                { "flags", n => { Flags = n.GetDoubleValue(); } },
                { "key_tag", n => { KeyTag = n.GetDoubleValue(); } },
                { "key_type", n => { KeyType = n.GetStringValue(); } },
                { "modified_on", n => { ModifiedOn = n.GetDateTimeOffsetValue(); } },
                { "public_key", n => { PublicKey = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("dnssec_multi_signer", DnssecMultiSigner);
            writer.WriteBoolValue("dnssec_presigned", DnssecPresigned);
            writer.WriteBoolValue("dnssec_use_nsec3", DnssecUseNsec3);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Dnssec_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
