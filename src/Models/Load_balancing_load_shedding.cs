// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Configures load shedding policies and percentages for the pool.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Load_balancing_load_shedding : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.</summary>
        public double? DefaultPercent { get; set; }
        /// <summary>The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_default_policy? DefaultPolicy { get; set; }
        /// <summary>The percent of existing sessions to shed from the pool, according to the session policy.</summary>
        public double? SessionPercent { get; set; }
        /// <summary>Only the hash policy is supported for existing sessions (to avoid exponential decay).</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_session_policy? SessionPolicy { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding"/> and sets the default values.
        /// </summary>
        public Load_balancing_load_shedding()
        {
            AdditionalData = new Dictionary<string, object>();
            DefaultPolicy = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_default_policy.Random;
            SessionPolicy = global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_session_policy.Hash;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "default_percent", n => { DefaultPercent = n.GetDoubleValue(); } },
                { "default_policy", n => { DefaultPolicy = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_default_policy>(); } },
                { "session_percent", n => { SessionPercent = n.GetDoubleValue(); } },
                { "session_policy", n => { SessionPolicy = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_session_policy>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("default_percent", DefaultPercent);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_default_policy>("default_policy", DefaultPolicy);
            writer.WriteDoubleValue("session_percent", SessionPercent);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Load_balancing_load_shedding_session_policy>("session_policy", SessionPolicy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
