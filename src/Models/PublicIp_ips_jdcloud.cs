// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicIp_ips_jdcloud : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A digest of the IP data. Useful for determining if the data has changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Etag { get; set; }
#nullable restore
#else
        public string Etag { get; set; }
#endif
        /// <summary>List of Cloudflare IPv4 CIDR addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ipv4Cidrs { get; set; }
#nullable restore
#else
        public List<string> Ipv4Cidrs { get; set; }
#endif
        /// <summary>List of Cloudflare IPv6 CIDR addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Ipv6Cidrs { get; set; }
#nullable restore
#else
        public List<string> Ipv6Cidrs { get; set; }
#endif
        /// <summary>List IPv4 and IPv6 CIDRs, only populated if `?networks=jdcloud` is used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? JdcloudCidrs { get; set; }
#nullable restore
#else
        public List<string> JdcloudCidrs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.PublicIp_ips_jdcloud"/> and sets the default values.
        /// </summary>
        public PublicIp_ips_jdcloud()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.PublicIp_ips_jdcloud"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.PublicIp_ips_jdcloud CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.PublicIp_ips_jdcloud();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "etag", n => { Etag = n.GetStringValue(); } },
                { "ipv4_cidrs", n => { Ipv4Cidrs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ipv6_cidrs", n => { Ipv6Cidrs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jdcloud_cidrs", n => { JdcloudCidrs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("etag", Etag);
            writer.WriteCollectionOfPrimitiveValues<string>("ipv4_cidrs", Ipv4Cidrs);
            writer.WriteCollectionOfPrimitiveValues<string>("ipv6_cidrs", Ipv6Cidrs);
            writer.WriteCollectionOfPrimitiveValues<string>("jdcloud_cidrs", JdcloudCidrs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
