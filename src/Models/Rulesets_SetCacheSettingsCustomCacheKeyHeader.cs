// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Which headers to include in the cache key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Rulesets_SetCacheSettingsCustomCacheKeyHeader : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of headers to check for the presence of. The presence of these headers is included in the cache key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CheckPresence { get; set; }
#nullable restore
#else
        public List<string> CheckPresence { get; set; }
#endif
        /// <summary>A mapping of header names to a list of values. If a header is present in the request and contains any of the values provided, its value is included in the cache key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader_contains? Contains { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader_contains Contains { get; set; }
#endif
        /// <summary>Whether to exclude the origin header in the cache key.</summary>
        public bool? ExcludeOrigin { get; set; }
        /// <summary>A list of headers to include in the cache key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Include { get; set; }
#nullable restore
#else
        public List<string> Include { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader"/> and sets the default values.
        /// </summary>
        public Rulesets_SetCacheSettingsCustomCacheKeyHeader()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "check_presence", n => { CheckPresence = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contains", n => { Contains = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader_contains>(global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader_contains.CreateFromDiscriminatorValue); } },
                { "exclude_origin", n => { ExcludeOrigin = n.GetBoolValue(); } },
                { "include", n => { Include = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("check_presence", CheckPresence);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKeyHeader_contains>("contains", Contains);
            writer.WriteBoolValue("exclude_origin", ExcludeOrigin);
            writer.WriteCollectionOfPrimitiveValues<string>("include", Include);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
