// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// When triggered, traditional WAF rules cause the firewall to immediately act upon the request based on the configuration of the rule. A &apos;deny&apos; rule will immediately respond to the request based on the configured rule action/mode (for example, &apos;block&apos;) and no other rules will be processed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WafManagedRules_traditional_deny_rule : global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_base, IParsable
    {
        /// <summary>Defines the list of possible actions of the WAF rule when it is triggered.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional>? AllowedModes { get; private set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional> AllowedModes { get; private set; }
#endif
        /// <summary>Defines the default action/mode of a rule.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_default_mode? DefaultMode { get; private set; }
        /// <summary>Defines the action that the current WAF rule will perform when triggered. Applies to traditional (deny) WAF rules.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional? Mode { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional Mode { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_traditional_deny_rule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_traditional_deny_rule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_traditional_deny_rule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowed_modes", n => { AllowedModes = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional>(global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional.CreateFromDiscriminatorValue)?.AsList(); } },
                { "default_mode", n => { DefaultMode = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_default_mode>(); } },
                { "mode", n => { Mode = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional>(global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.WafManagedRules_mode_deny_traditional>("mode", Mode);
        }
    }
}
#pragma warning restore CS0618
