// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Urlscanner_get_scan_200_result_scan_ips_ip : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The asn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Asn { get; set; }
#nullable restore
#else
        public string Asn { get; set; }
#endif
        /// <summary>The asnDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AsnDescription { get; set; }
#nullable restore
#else
        public string AsnDescription { get; set; }
#endif
        /// <summary>The asnLocationAlpha2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AsnLocationAlpha2 { get; set; }
#nullable restore
#else
        public string AsnLocationAlpha2 { get; set; }
#endif
        /// <summary>The asnName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AsnName { get; set; }
#nullable restore
#else
        public string AsnName { get; set; }
#endif
        /// <summary>The asnOrgName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AsnOrgName { get; set; }
#nullable restore
#else
        public string AsnOrgName { get; set; }
#endif
        /// <summary>The continent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Continent { get; set; }
#nullable restore
#else
        public string Continent { get; set; }
#endif
        /// <summary>The geonameId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GeonameId { get; set; }
#nullable restore
#else
        public string GeonameId { get; set; }
#endif
        /// <summary>The ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip { get; set; }
#nullable restore
#else
        public string Ip { get; set; }
#endif
        /// <summary>The ipVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpVersion { get; set; }
#nullable restore
#else
        public string IpVersion { get; set; }
#endif
        /// <summary>The latitude property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Latitude { get; set; }
#nullable restore
#else
        public string Latitude { get; set; }
#endif
        /// <summary>The locationAlpha2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationAlpha2 { get; set; }
#nullable restore
#else
        public string LocationAlpha2 { get; set; }
#endif
        /// <summary>The locationName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationName { get; set; }
#nullable restore
#else
        public string LocationName { get; set; }
#endif
        /// <summary>The longitude property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Longitude { get; set; }
#nullable restore
#else
        public string Longitude { get; set; }
#endif
        /// <summary>The subdivision1Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subdivision1Name { get; set; }
#nullable restore
#else
        public string Subdivision1Name { get; set; }
#endif
        /// <summary>The subdivision2Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subdivision2Name { get; set; }
#nullable restore
#else
        public string Subdivision2Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_200_result_scan_ips_ip"/> and sets the default values.
        /// </summary>
        public Urlscanner_get_scan_200_result_scan_ips_ip()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_200_result_scan_ips_ip"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_200_result_scan_ips_ip CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Urlscanner_get_scan_200_result_scan_ips_ip();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "asn", n => { Asn = n.GetStringValue(); } },
                { "asnDescription", n => { AsnDescription = n.GetStringValue(); } },
                { "asnLocationAlpha2", n => { AsnLocationAlpha2 = n.GetStringValue(); } },
                { "asnName", n => { AsnName = n.GetStringValue(); } },
                { "asnOrgName", n => { AsnOrgName = n.GetStringValue(); } },
                { "continent", n => { Continent = n.GetStringValue(); } },
                { "geonameId", n => { GeonameId = n.GetStringValue(); } },
                { "ip", n => { Ip = n.GetStringValue(); } },
                { "ipVersion", n => { IpVersion = n.GetStringValue(); } },
                { "latitude", n => { Latitude = n.GetStringValue(); } },
                { "locationAlpha2", n => { LocationAlpha2 = n.GetStringValue(); } },
                { "locationName", n => { LocationName = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetStringValue(); } },
                { "subdivision1Name", n => { Subdivision1Name = n.GetStringValue(); } },
                { "subdivision2Name", n => { Subdivision2Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("asn", Asn);
            writer.WriteStringValue("asnDescription", AsnDescription);
            writer.WriteStringValue("asnLocationAlpha2", AsnLocationAlpha2);
            writer.WriteStringValue("asnName", AsnName);
            writer.WriteStringValue("asnOrgName", AsnOrgName);
            writer.WriteStringValue("continent", Continent);
            writer.WriteStringValue("geonameId", GeonameId);
            writer.WriteStringValue("ip", Ip);
            writer.WriteStringValue("ipVersion", IpVersion);
            writer.WriteStringValue("latitude", Latitude);
            writer.WriteStringValue("locationAlpha2", LocationAlpha2);
            writer.WriteStringValue("locationName", LocationName);
            writer.WriteStringValue("longitude", Longitude);
            writer.WriteStringValue("subdivision1Name", Subdivision1Name);
            writer.WriteStringValue("subdivision2Name", Subdivision2Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
