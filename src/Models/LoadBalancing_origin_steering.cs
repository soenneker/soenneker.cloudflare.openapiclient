// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LoadBalancing_origin_steering : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The type of origin steering policy to use.- `&quot;random&quot;`: Select an origin randomly.- `&quot;hash&quot;`: Select an origin by computing a hash over the CF-Connecting-IP address.- `&quot;least_outstanding_requests&quot;`: Select an origin by taking into consideration origin weights, as well as each origin&apos;s number of outstanding requests. Origins with more pending requests are weighted proportionately less relative to others.- `&quot;least_connections&quot;`: Select an origin by taking into consideration origin weights, as well as each origin&apos;s number of open connections. Origins with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering_policy? Policy { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering"/> and sets the default values.
        /// </summary>
        public LoadBalancing_origin_steering()
        {
            AdditionalData = new Dictionary<string, object>();
            Policy = global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering_policy.Random;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "policy", n => { Policy = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering_policy>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.LoadBalancing_origin_steering_policy>("policy", Policy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
