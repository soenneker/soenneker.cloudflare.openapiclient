// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_lan_dhcp_server : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A valid IPv4 address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DhcpPoolEnd { get; set; }
#nullable restore
#else
        public string DhcpPoolEnd { get; set; }
#endif
        /// <summary>A valid IPv4 address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DhcpPoolStart { get; set; }
#nullable restore
#else
        public string DhcpPoolStart { get; set; }
#endif
        /// <summary>A valid IPv4 address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DnsServer { get; set; }
#nullable restore
#else
        public string DnsServer { get; set; }
#endif
        /// <summary>The dns_servers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DnsServers { get; set; }
#nullable restore
#else
        public List<string> DnsServers { get; set; }
#endif
        /// <summary>Mapping of MAC addresses to IP addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server_reservations? Reservations { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server_reservations Reservations { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server"/> and sets the default values.
        /// </summary>
        public Magic_lan_dhcp_server()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dhcp_pool_end", n => { DhcpPoolEnd = n.GetStringValue(); } },
                { "dhcp_pool_start", n => { DhcpPoolStart = n.GetStringValue(); } },
                { "dns_server", n => { DnsServer = n.GetStringValue(); } },
                { "dns_servers", n => { DnsServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "reservations", n => { Reservations = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server_reservations>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server_reservations.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("dhcp_pool_end", DhcpPoolEnd);
            writer.WriteStringValue("dhcp_pool_start", DhcpPoolStart);
            writer.WriteStringValue("dns_server", DnsServer);
            writer.WriteCollectionOfPrimitiveValues<string>("dns_servers", DnsServers);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_lan_dhcp_server_reservations>("reservations", Reservations);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
