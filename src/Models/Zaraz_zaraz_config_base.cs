// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Zaraz configuration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zaraz_zaraz_config_base : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Cloudflare Monitoring settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_analytics? Analytics { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_analytics Analytics { get; set; }
#endif
        /// <summary>Consent management configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_consent? Consent { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_consent Consent { get; set; }
#endif
        /// <summary>Data layer compatibility mode enabled.</summary>
        public bool? DataLayer { get; set; }
        /// <summary>The key for Zaraz debug mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DebugKey { get; set; }
#nullable restore
#else
        public string DebugKey { get; set; }
#endif
        /// <summary>Single Page Application support enabled.</summary>
        public bool? HistoryChange { get; set; }
        /// <summary>General Zaraz settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_settings? Settings { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_settings Settings { get; set; }
#endif
        /// <summary>Triggers set up under Zaraz configuration, where key is the trigger alpha-numeric ID and value is the trigger configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_triggers? Triggers { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_triggers Triggers { get; set; }
#endif
        /// <summary>Variables set up under Zaraz configuration, where key is the variable alpha-numeric ID and value is the variable configuration. Values of variables of type secret are not included.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_variables? Variables { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_variables Variables { get; set; }
#endif
        /// <summary>Zaraz internal version of the config.</summary>
        public int? ZarazVersion { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base"/> and sets the default values.
        /// </summary>
        public Zaraz_zaraz_config_base()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "analytics", n => { Analytics = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_analytics>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_analytics.CreateFromDiscriminatorValue); } },
                { "consent", n => { Consent = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_consent>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_consent.CreateFromDiscriminatorValue); } },
                { "dataLayer", n => { DataLayer = n.GetBoolValue(); } },
                { "debugKey", n => { DebugKey = n.GetStringValue(); } },
                { "historyChange", n => { HistoryChange = n.GetBoolValue(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_settings>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_settings.CreateFromDiscriminatorValue); } },
                { "triggers", n => { Triggers = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_triggers>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_triggers.CreateFromDiscriminatorValue); } },
                { "variables", n => { Variables = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_variables>(global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_variables.CreateFromDiscriminatorValue); } },
                { "zarazVersion", n => { ZarazVersion = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_analytics>("analytics", Analytics);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_consent>("consent", Consent);
            writer.WriteBoolValue("dataLayer", DataLayer);
            writer.WriteStringValue("debugKey", DebugKey);
            writer.WriteBoolValue("historyChange", HistoryChange);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_settings>("settings", Settings);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_triggers>("triggers", Triggers);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zaraz_zaraz_config_base_variables>("variables", Variables);
            writer.WriteIntValue("zarazVersion", ZarazVersion);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
