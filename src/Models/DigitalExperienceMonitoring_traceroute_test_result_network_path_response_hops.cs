// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The asn property</summary>
        public int? Asn { get; set; }
        /// <summary>The aso property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Aso { get; set; }
#nullable restore
#else
        public string Aso { get; set; }
#endif
        /// <summary>The ipAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_location? Location { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_location Location { get; set; }
#endif
        /// <summary>The mile property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_mile? Mile { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The packetLossPct property</summary>
        public float? PacketLossPct { get; set; }
        /// <summary>The rttMs property</summary>
        public int? RttMs { get; set; }
        /// <summary>The ttl property</summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops"/> and sets the default values.
        /// </summary>
        public DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "asn", n => { Asn = n.GetIntValue(); } },
                { "aso", n => { Aso = n.GetStringValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_location>(global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_location.CreateFromDiscriminatorValue); } },
                { "mile", n => { Mile = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_mile>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "packetLossPct", n => { PacketLossPct = n.GetFloatValue(); } },
                { "rttMs", n => { RttMs = n.GetIntValue(); } },
                { "ttl", n => { Ttl = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("asn", Asn);
            writer.WriteStringValue("aso", Aso);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_location>("location", Location);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.DigitalExperienceMonitoring_traceroute_test_result_network_path_response_hops_mile>("mile", Mile);
            writer.WriteStringValue("name", Name);
            writer.WriteFloatValue("packetLossPct", PacketLossPct);
            writer.WriteIntValue("rttMs", RttMs);
            writer.WriteIntValue("ttl", Ttl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
