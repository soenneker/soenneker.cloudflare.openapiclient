// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Which components of the request are included in or excluded from the cache key Cloudflare uses to store the response in cache.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Rulesets_SetCacheSettingsCacheKey : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to separate cached content based on the visitor&apos;s device type.</summary>
        public bool? CacheByDeviceType { get; set; }
        /// <summary>Whether to protect from web cache deception attacks, while allowing static assets to be cached.</summary>
        public bool? CacheDeceptionArmor { get; set; }
        /// <summary>Which components of the request are included or excluded from the cache key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKey? CustomKey { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKey CustomKey { get; set; }
#endif
        /// <summary>Whether to treat requests with the same query parameters the same, regardless of the order those query parameters are in.</summary>
        public bool? IgnoreQueryStringsOrder { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCacheKey"/> and sets the default values.
        /// </summary>
        public Rulesets_SetCacheSettingsCacheKey()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCacheKey"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCacheKey CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCacheKey();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cache_by_device_type", n => { CacheByDeviceType = n.GetBoolValue(); } },
                { "cache_deception_armor", n => { CacheDeceptionArmor = n.GetBoolValue(); } },
                { "custom_key", n => { CustomKey = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKey>(global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKey.CreateFromDiscriminatorValue); } },
                { "ignore_query_strings_order", n => { IgnoreQueryStringsOrder = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cache_by_device_type", CacheByDeviceType);
            writer.WriteBoolValue("cache_deception_armor", CacheDeceptionArmor);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Rulesets_SetCacheSettingsCustomCacheKey>("custom_key", CustomKey);
            writer.WriteBoolValue("ignore_query_strings_order", IgnoreQueryStringsOrder);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
