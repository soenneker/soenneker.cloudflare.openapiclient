// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Post_commands_commands_command_args : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of interfaces to capture packets on</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args_interfaces?>? Interfaces { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args_interfaces?> Interfaces { get; set; }
#endif
        /// <summary>Maximum file size (in MB) for the capture file. Specifies the maximum file size of the warp-diag zip artifact that can be uploaded. If the zip artifact exceeds the specified max file size, it will NOT be uploaded</summary>
        public double? MaxFileSizeMb { get; set; }
        /// <summary>Maximum number of bytes to save for each packet</summary>
        public double? PacketSizeBytes { get; set; }
        /// <summary>Test an IP address from all included or excluded ranges. Tests an IP address from all included or excluded ranges. Essentially the same as running &apos;route get &lt;ip&gt;&apos;&apos; and collecting the results. This option may increase the time taken to collect the warp-diag</summary>
        public bool? TestAllRoutes { get; set; }
        /// <summary>Limit on capture duration (in minutes)</summary>
        public double? TimeLimitMin { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "interfaces", n => { Interfaces = n.GetCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args_interfaces>()?.AsList(); } },
                { "max-file-size-mb", n => { MaxFileSizeMb = n.GetDoubleValue(); } },
                { "packet-size-bytes", n => { PacketSizeBytes = n.GetDoubleValue(); } },
                { "test-all-routes", n => { TestAllRoutes = n.GetBoolValue(); } },
                { "time-limit-min", n => { TimeLimitMin = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Post_commands_commands_command_args_interfaces>("interfaces", Interfaces);
            writer.WriteDoubleValue("max-file-size-mb", MaxFileSizeMb);
            writer.WriteDoubleValue("packet-size-bytes", PacketSizeBytes);
            writer.WriteBoolValue("test-all-routes", TestAllRoutes);
            writer.WriteDoubleValue("time-limit-min", TimeLimitMin);
        }
    }
}
#pragma warning restore CS0618
