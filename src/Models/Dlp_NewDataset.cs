// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dlp_NewDataset : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Only applies to custom word lists.Determines if the words should be matched in a case-sensitive mannerCannot be set to false if `secret` is true or undefined</summary>
        public bool? CaseSensitive { get; set; }
        /// <summary>The description of the dataset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Dataset encoding versionNon-secret custom word lists with no header are always version 1.Secret EDM lists with no header are version 1.Multicolumn CSV with headers are version 2.Omitting this field provides the default value 0, which is interpretedthe same as 1.</summary>
        public int? EncodingVersion { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Generate a secret dataset.If true, the response will include a secret to use with the EDM encoder.If false, the response has no secret and the dataset is uploaded in plaintext.</summary>
        public bool? Secret { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewDataset"/> and sets the default values.
        /// </summary>
        public Dlp_NewDataset()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewDataset"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewDataset CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_NewDataset();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "case_sensitive", n => { CaseSensitive = n.GetBoolValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "encoding_version", n => { EncodingVersion = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "secret", n => { Secret = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("case_sensitive", CaseSensitive);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("encoding_version", EncodingVersion);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("secret", Secret);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
