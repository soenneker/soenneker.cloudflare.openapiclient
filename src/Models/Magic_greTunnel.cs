// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_greTunnel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bgp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config? Bgp { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config Bgp { get; set; }
#endif
        /// <summary>The bgp_status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state? BgpStatus { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state BgpStatus { get; set; }
#endif
        /// <summary>The IP address assigned to the Cloudflare side of the GRE tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudflareGreEndpoint { get; set; }
#nullable restore
#else
        public string CloudflareGreEndpoint { get; set; }
#endif
        /// <summary>The date and time the tunnel was created.</summary>
        public DateTimeOffset? CreatedOn { get; private set; }
        /// <summary>The IP address assigned to the customer side of the GRE tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerGreEndpoint { get; set; }
#nullable restore
#else
        public string CustomerGreEndpoint { get; set; }
#endif
        /// <summary>An optional description of the GRE tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The health_check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check? HealthCheck { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check HealthCheck { get; set; }
#endif
        /// <summary>Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InterfaceAddress { get; set; }
#nullable restore
#else
        public string InterfaceAddress { get; set; }
#endif
        /// <summary>A 127 bit IPV6 prefix from within the virtual_subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual_subnet6. Eg if virtual_subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface_address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InterfaceAddress6 { get; set; }
#nullable restore
#else
        public string InterfaceAddress6 { get; set; }
#endif
        /// <summary>The date and time the tunnel was last modified.</summary>
        public DateTimeOffset? ModifiedOn { get; private set; }
        /// <summary>Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.</summary>
        public int? Mtu { get; set; }
        /// <summary>The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Time To Live (TTL) in number of hops of the GRE tunnel.</summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_greTunnel"/> and sets the default values.
        /// </summary>
        public Magic_greTunnel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_greTunnel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_greTunnel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_greTunnel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bgp", n => { Bgp = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config.CreateFromDiscriminatorValue); } },
                { "bgp_status", n => { BgpStatus = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state.CreateFromDiscriminatorValue); } },
                { "cloudflare_gre_endpoint", n => { CloudflareGreEndpoint = n.GetStringValue(); } },
                { "created_on", n => { CreatedOn = n.GetDateTimeOffsetValue(); } },
                { "customer_gre_endpoint", n => { CustomerGreEndpoint = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "health_check", n => { HealthCheck = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check>(global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "interface_address", n => { InterfaceAddress = n.GetStringValue(); } },
                { "interface_address6", n => { InterfaceAddress6 = n.GetStringValue(); } },
                { "modified_on", n => { ModifiedOn = n.GetDateTimeOffsetValue(); } },
                { "mtu", n => { Mtu = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "ttl", n => { Ttl = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_config>("bgp", Bgp);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state>("bgp_status", BgpStatus);
            writer.WriteStringValue("cloudflare_gre_endpoint", CloudflareGreEndpoint);
            writer.WriteStringValue("customer_gre_endpoint", CustomerGreEndpoint);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_tunnel_health_check>("health_check", HealthCheck);
            writer.WriteStringValue("interface_address", InterfaceAddress);
            writer.WriteStringValue("interface_address6", InterfaceAddress6);
            writer.WriteIntValue("mtu", Mtu);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("ttl", Ttl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
