// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Magic_bgp_status_with_state : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bgp_state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BgpState { get; set; }
#nullable restore
#else
        public string BgpState { get; set; }
#endif
        /// <summary>The cf_speaker_ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CfSpeakerIp { get; set; }
#nullable restore
#else
        public string CfSpeakerIp { get; set; }
#endif
        /// <summary>The cf_speaker_port property</summary>
        public int? CfSpeakerPort { get; set; }
        /// <summary>The customer_speaker_ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerSpeakerIp { get; set; }
#nullable restore
#else
        public string CustomerSpeakerIp { get; set; }
#endif
        /// <summary>The customer_speaker_port property</summary>
        public int? CustomerSpeakerPort { get; set; }
        /// <summary>The state property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state_state? State { get; set; }
        /// <summary>The tcp_established property</summary>
        public bool? TcpEstablished { get; set; }
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state"/> and sets the default values.
        /// </summary>
        public Magic_bgp_status_with_state()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bgp_state", n => { BgpState = n.GetStringValue(); } },
                { "cf_speaker_ip", n => { CfSpeakerIp = n.GetStringValue(); } },
                { "cf_speaker_port", n => { CfSpeakerPort = n.GetIntValue(); } },
                { "customer_speaker_ip", n => { CustomerSpeakerIp = n.GetStringValue(); } },
                { "customer_speaker_port", n => { CustomerSpeakerPort = n.GetIntValue(); } },
                { "state", n => { State = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state_state>(); } },
                { "tcp_established", n => { TcpEstablished = n.GetBoolValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bgp_state", BgpState);
            writer.WriteStringValue("cf_speaker_ip", CfSpeakerIp);
            writer.WriteIntValue("cf_speaker_port", CfSpeakerPort);
            writer.WriteStringValue("customer_speaker_ip", CustomerSpeakerIp);
            writer.WriteIntValue("customer_speaker_port", CustomerSpeakerPort);
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Magic_bgp_status_with_state_state>("state", State);
            writer.WriteBoolValue("tcp_established", TcpEstablished);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
