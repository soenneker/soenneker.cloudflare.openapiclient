// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Additional request parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Account_request_tracer_request_trace_context : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Bot score used for evaluating tracing request processing</summary>
        public int? BotScore { get; set; }
        /// <summary>Geodata for tracing request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context_geoloc? Geoloc { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context_geoloc Geoloc { get; set; }
#endif
        /// <summary>Whether to skip any challenges for tracing request (e.g.: captcha)</summary>
        public bool? SkipChallenge { get; set; }
        /// <summary>Threat score used for evaluating tracing request processing</summary>
        public int? ThreatScore { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context"/> and sets the default values.
        /// </summary>
        public Account_request_tracer_request_trace_context()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bot_score", n => { BotScore = n.GetIntValue(); } },
                { "geoloc", n => { Geoloc = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context_geoloc>(global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context_geoloc.CreateFromDiscriminatorValue); } },
                { "skip_challenge", n => { SkipChallenge = n.GetBoolValue(); } },
                { "threat_score", n => { ThreatScore = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("bot_score", BotScore);
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Account_request_tracer_request_trace_context_geoloc>("geoloc", Geoloc);
            writer.WriteBoolValue("skip_challenge", SkipChallenge);
            writer.WriteIntValue("threat_score", ThreatScore);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
