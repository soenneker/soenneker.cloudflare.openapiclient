// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Configure to forward the query to the internal DNS service, passing the specified &apos;view_id&apos; as input. Cannot be set when &apos;dns_resolvers&apos; are specified or &apos;resolve_dns_through_cloudflare&apos; is set. Only valid when a rule&apos;s action is set to &apos;resolve&apos;.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ZeroTrustGateway_ruleSettings_resolve_dns_internally : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The fallback behavior to apply when the internal DNS response code is different from &apos;NOERROR&apos; or when the response data only contains CNAME records for &apos;A&apos; or &apos;AAAA&apos; queries.</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally_fallback? Fallback { get; set; }
        /// <summary>The internal DNS view identifier that&apos;s passed to the internal DNS service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewId { get; set; }
#nullable restore
#else
        public string ViewId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally"/> and sets the default values.
        /// </summary>
        public ZeroTrustGateway_ruleSettings_resolve_dns_internally()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fallback", n => { Fallback = n.GetEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally_fallback>(); } },
                { "view_id", n => { ViewId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Cloudflare.OpenApiClient.Models.ZeroTrustGateway_ruleSettings_resolve_dns_internally_fallback>("fallback", Fallback);
            writer.WriteStringValue("view_id", ViewId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
