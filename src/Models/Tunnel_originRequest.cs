// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    /// <summary>
    /// Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tunnel_originRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>For all L7 requests to this hostname, cloudflared will validate each request&apos;s Cf-Access-Jwt-Assertion request header.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest_access? Access { get; set; }
#nullable restore
#else
        public global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest_access Access { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaPool { get; set; }
#nullable restore
#else
        public string CaPool { get; set; }
#endif
        /// <summary>Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.</summary>
        public int? ConnectTimeout { get; set; }
        /// <summary>Disables chunked transfer encoding. Useful if you are running a WSGI server.</summary>
        public bool? DisableChunkedEncoding { get; set; }
        /// <summary>Attempt to connect to origin using HTTP2. Origin must be configured as https.</summary>
        public bool? Http2Origin { get; set; }
        /// <summary>Sets the HTTP Host header on requests sent to the local service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HttpHostHeader { get; set; }
#nullable restore
#else
        public string HttpHostHeader { get; set; }
#endif
        /// <summary>Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.</summary>
        public int? KeepAliveConnections { get; set; }
        /// <summary>Timeout after which an idle keepalive connection can be discarded.</summary>
        public int? KeepAliveTimeout { get; set; }
        /// <summary>Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.</summary>
        public bool? NoHappyEyeballs { get; set; }
        /// <summary>Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.</summary>
        public bool? NoTLSVerify { get; set; }
        /// <summary>Hostname that cloudflared should expect from your origin server certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginServerName { get; set; }
#nullable restore
#else
        public string OriginServerName { get; set; }
#endif
        /// <summary>cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: &quot;&quot; for the regular proxy and &quot;socks&quot; for a SOCKS5 proxy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProxyType { get; set; }
#nullable restore
#else
        public string ProxyType { get; set; }
#endif
        /// <summary>The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.</summary>
        public int? TcpKeepAlive { get; set; }
        /// <summary>Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.</summary>
        public int? TlsTimeout { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest"/> and sets the default values.
        /// </summary>
        public Tunnel_originRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access", n => { Access = n.GetObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest_access>(global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest_access.CreateFromDiscriminatorValue); } },
                { "caPool", n => { CaPool = n.GetStringValue(); } },
                { "connectTimeout", n => { ConnectTimeout = n.GetIntValue(); } },
                { "disableChunkedEncoding", n => { DisableChunkedEncoding = n.GetBoolValue(); } },
                { "http2Origin", n => { Http2Origin = n.GetBoolValue(); } },
                { "httpHostHeader", n => { HttpHostHeader = n.GetStringValue(); } },
                { "keepAliveConnections", n => { KeepAliveConnections = n.GetIntValue(); } },
                { "keepAliveTimeout", n => { KeepAliveTimeout = n.GetIntValue(); } },
                { "noHappyEyeballs", n => { NoHappyEyeballs = n.GetBoolValue(); } },
                { "noTLSVerify", n => { NoTLSVerify = n.GetBoolValue(); } },
                { "originServerName", n => { OriginServerName = n.GetStringValue(); } },
                { "proxyType", n => { ProxyType = n.GetStringValue(); } },
                { "tcpKeepAlive", n => { TcpKeepAlive = n.GetIntValue(); } },
                { "tlsTimeout", n => { TlsTimeout = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Tunnel_originRequest_access>("access", Access);
            writer.WriteStringValue("caPool", CaPool);
            writer.WriteIntValue("connectTimeout", ConnectTimeout);
            writer.WriteBoolValue("disableChunkedEncoding", DisableChunkedEncoding);
            writer.WriteBoolValue("http2Origin", Http2Origin);
            writer.WriteStringValue("httpHostHeader", HttpHostHeader);
            writer.WriteIntValue("keepAliveConnections", KeepAliveConnections);
            writer.WriteIntValue("keepAliveTimeout", KeepAliveTimeout);
            writer.WriteBoolValue("noHappyEyeballs", NoHappyEyeballs);
            writer.WriteBoolValue("noTLSVerify", NoTLSVerify);
            writer.WriteStringValue("originServerName", OriginServerName);
            writer.WriteStringValue("proxyType", ProxyType);
            writer.WriteIntValue("tcpKeepAlive", TcpKeepAlive);
            writer.WriteIntValue("tlsTimeout", TlsTimeout);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
