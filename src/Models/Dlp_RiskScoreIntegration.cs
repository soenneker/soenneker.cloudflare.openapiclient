// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dlp_RiskScoreIntegration : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Cloudflare account tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountTag { get; set; }
#nullable restore
#else
        public string AccountTag { get; set; }
#endif
        /// <summary>Whether this integration is enabled and should export changes in risk score.</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When the integration was created in RFC3339 format.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The id of the integration, a UUIDv4.</summary>
        public Guid? Id { get; set; }
        /// <summary>The integration_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IntegrationType { get; set; }
#nullable restore
#else
        public string IntegrationType { get; set; }
#endif
        /// <summary>A reference ID defined by the client.Should be set to the Access-Okta IDP integration ID.Useful when the risk-score integration needs to be associated with a secondary asset and recalled using that ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReferenceId { get; set; }
#nullable restore
#else
        public string ReferenceId { get; set; }
#endif
        /// <summary>The base URL for the tenant. E.g. &quot;https://tenant.okta.com&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantUrl { get; set; }
#nullable restore
#else
        public string TenantUrl { get; set; }
#endif
        /// <summary>The URL for the Shared Signals Framework configuration, e.g. &quot;/.well-known/sse-configuration/{integration_uuid}/&quot;. https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.6.2.1.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WellKnownUrl { get; set; }
#nullable restore
#else
        public string WellKnownUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_RiskScoreIntegration"/> and sets the default values.
        /// </summary>
        public Dlp_RiskScoreIntegration()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_RiskScoreIntegration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_RiskScoreIntegration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Dlp_RiskScoreIntegration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_tag", n => { AccountTag = n.GetStringValue(); } },
                { "active", n => { Active = n.GetBoolValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "integration_type", n => { IntegrationType = n.GetStringValue(); } },
                { "reference_id", n => { ReferenceId = n.GetStringValue(); } },
                { "tenant_url", n => { TenantUrl = n.GetStringValue(); } },
                { "well_known_url", n => { WellKnownUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_tag", AccountTag);
            writer.WriteBoolValue("active", Active);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("integration_type", IntegrationType);
            writer.WriteStringValue("reference_id", ReferenceId);
            writer.WriteStringValue("tenant_url", TenantUrl);
            writer.WriteStringValue("well_known_url", WellKnownUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
