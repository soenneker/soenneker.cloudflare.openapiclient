// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Vectorize_indexListVectorsResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of vectors returned in this response</summary>
        public int? Count { get; set; }
        /// <summary>When the cursor expires as an ISO8601 string</summary>
        public DateTimeOffset? CursorExpirationTimestamp { get; set; }
        /// <summary>Whether there are more vectors available beyond this response</summary>
        public bool? IsTruncated { get; set; }
        /// <summary>Cursor for the next page of results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextCursor { get; set; }
#nullable restore
#else
        public string NextCursor { get; set; }
#endif
        /// <summary>Total number of vectors in the index</summary>
        public int? TotalCount { get; set; }
        /// <summary>Array of vector items</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_vectorListItem>? Vectors { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_vectorListItem> Vectors { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_indexListVectorsResponse"/> and sets the default values.
        /// </summary>
        public Vectorize_indexListVectorsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_indexListVectorsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_indexListVectorsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_indexListVectorsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "count", n => { Count = n.GetIntValue(); } },
                { "cursorExpirationTimestamp", n => { CursorExpirationTimestamp = n.GetDateTimeOffsetValue(); } },
                { "isTruncated", n => { IsTruncated = n.GetBoolValue(); } },
                { "nextCursor", n => { NextCursor = n.GetStringValue(); } },
                { "totalCount", n => { TotalCount = n.GetIntValue(); } },
                { "vectors", n => { Vectors = n.GetCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_vectorListItem>(global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_vectorListItem.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("count", Count);
            writer.WriteDateTimeOffsetValue("cursorExpirationTimestamp", CursorExpirationTimestamp);
            writer.WriteBoolValue("isTruncated", IsTruncated);
            writer.WriteStringValue("nextCursor", NextCursor);
            writer.WriteIntValue("totalCount", TotalCount);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Cloudflare.OpenApiClient.Models.Vectorize_vectorListItem>("vectors", Vectors);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
