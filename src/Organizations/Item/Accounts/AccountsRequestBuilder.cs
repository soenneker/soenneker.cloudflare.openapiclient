// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts
{
    /// <summary>
    /// Builds and executes requests for operations under \organizations\{organization_id}\accounts
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/organizations/{organization_id}/accounts{?account_pubname,account_pubname%2Econtains,account_pubname%2EendsWith,account_pubname%2EstartsWith,name,name%2Econtains,name%2EendsWith,name%2EstartsWith,page_size,page_token}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/organizations/{organization_id}/accounts{?account_pubname,account_pubname%2Econtains,account_pubname%2EendsWith,account_pubname%2EstartsWith,name,name%2Econtains,name%2EendsWith,name%2EstartsWith,page_size,page_token}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve a list of accounts that belong to a specific organization.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_getAccounts_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_getAccounts_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_getAccounts_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_getAccounts_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_getAccounts_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a list of accounts that belong to a specific organization.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.Accounts.AccountsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve a list of accounts that belong to a specific organization.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsRequestBuilderGetQueryParameters 
        {
            /// <summary>(case-insensitive) Filter the list of accounts to where the account_pubname is equal toa particular string.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("account_pubname")]
            public string? AccountPubname { get; set; }
#nullable restore
#else
            [QueryParameter("account_pubname")]
            public string AccountPubname { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the account_pubname containsa particular string.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("account_pubname%2Econtains")]
            public string? AccountPubnameContains { get; set; }
#nullable restore
#else
            [QueryParameter("account_pubname%2Econtains")]
            public string AccountPubnameContains { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the account_pubname ends witha particular string.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("account_pubname%2EendsWith")]
            public string? AccountPubnameEndsWith { get; set; }
#nullable restore
#else
            [QueryParameter("account_pubname%2EendsWith")]
            public string AccountPubnameEndsWith { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the account_pubname starts witha particular string.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("account_pubname%2EstartsWith")]
            public string? AccountPubnameStartsWith { get; set; }
#nullable restore
#else
            [QueryParameter("account_pubname%2EstartsWith")]
            public string AccountPubnameStartsWith { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the name is equal to aparticular string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the name contains a particularstring.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2Econtains")]
            public string? NameContains { get; set; }
#nullable restore
#else
            [QueryParameter("name%2Econtains")]
            public string NameContains { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the name ends with a particularstring.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2EendsWith")]
            public string? NameEndsWith { get; set; }
#nullable restore
#else
            [QueryParameter("name%2EendsWith")]
            public string NameEndsWith { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of accounts to where the name starts with aparticular string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2EstartsWith")]
            public string? NameStartsWith { get; set; }
#nullable restore
#else
            [QueryParameter("name%2EstartsWith")]
            public string NameStartsWith { get; set; }
#endif
            /// <summary>The amount of items to return. Defaults to 10.</summary>
            [QueryParameter("page_size")]
            public int? PageSize { get; set; }
            /// <summary>An opaque token returned from the last list response that whenprovided will retrieve the next page.Parameters used to filter the retrieved list must remain in subsequentrequests with a page token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page_token")]
            public string? PageToken { get; set; }
#nullable restore
#else
            [QueryParameter("page_token")]
            public string PageToken { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
