// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using Soenneker.Cloudflare.OpenApiClient.Organizations.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Organizations
{
    /// <summary>
    /// Builds and executes requests for operations under \organizations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrganizationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.organizations.item collection</summary>
        /// <param name="position">The ID of the organization to delete.</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.WithOrganization_ItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.WithOrganization_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("organization_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Organizations.Item.WithOrganization_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrganizationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/organizations{?containing%2Eaccount,containing%2Eorganization,containing%2Euser,id,name,name%2Econtains,name%2EendsWith,name%2EstartsWith,page_size,page_token,parent%2Eid}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrganizationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/organizations{?containing%2Eaccount,containing%2Eorganization,containing%2Euser,id,name,name%2Econtains,name%2EendsWith,name%2EstartsWith,page_size,page_token,parent%2Eid}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve a list of organizations a particular user has access to.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organization_listOrganizations_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organization_listOrganizations_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder.OrganizationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organization_listOrganizations_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder.OrganizationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Organization_listOrganizations_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Organization_listOrganizations_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new organization for a user.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_createUserOrganization_200"/></returns>
        /// <param name="body">References an Organization in the Cloudflare data model.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_createUserOrganization_200?> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Organization body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_createUserOrganization_200> PostAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Organization body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_V4ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_createUserOrganization_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_createUserOrganization_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a list of organizations a particular user has access to.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder.OrganizationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder.OrganizationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new organization for a user.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">References an Organization in the Cloudflare data model.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Organization body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Organizations_api_Organization body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Organizations.OrganizationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve a list of organizations a particular user has access to.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrganizationsRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter the list of organizations to the ones that contain this particularaccount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("containing%2Eaccount")]
            public string? ContainingAccount { get; set; }
#nullable restore
#else
            [QueryParameter("containing%2Eaccount")]
            public string ContainingAccount { get; set; }
#endif
            /// <summary>Filter the list of organizations to the ones that contain this particularorganization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("containing%2Eorganization")]
            public string? ContainingOrganization { get; set; }
#nullable restore
#else
            [QueryParameter("containing%2Eorganization")]
            public string ContainingOrganization { get; set; }
#endif
            /// <summary>Filter the list of organizations to the ones that contain this particularuser.IMPORTANT: Just because an organization &quot;contains&quot; a user is not arepresentation of any authorization or privilege to manage any resourcestherein. An organization &quot;containing&quot; a user simply means the user is managed bythat organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("containing%2Euser")]
            public string? ContainingUser { get; set; }
#nullable restore
#else
            [QueryParameter("containing%2Euser")]
            public string ContainingUser { get; set; }
#endif
            /// <summary>Only return organizations with the specified IDs (ex. id=foo&amp;id=bar). Send multiple elementsby repeating the query value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public string[]? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public string[] Id { get; set; }
#endif
            /// <summary>(case-sensitive) Filter the list of organizations to where the name is equal to aparticular string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of organizations to where the name contains a particularstring.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2Econtains")]
            public string? NameContains { get; set; }
#nullable restore
#else
            [QueryParameter("name%2Econtains")]
            public string NameContains { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of organizations to where the name ends with a particularstring.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2EendsWith")]
            public string? NameEndsWith { get; set; }
#nullable restore
#else
            [QueryParameter("name%2EendsWith")]
            public string NameEndsWith { get; set; }
#endif
            /// <summary>(case-insensitive) Filter the list of organizations to where the name starts with aparticular string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name%2EstartsWith")]
            public string? NameStartsWith { get; set; }
#nullable restore
#else
            [QueryParameter("name%2EstartsWith")]
            public string NameStartsWith { get; set; }
#endif
            /// <summary>The amount of items to return. Defaults to 10.</summary>
            [QueryParameter("page_size")]
            public int? PageSize { get; set; }
            /// <summary>An opaque token returned from the last list response that whenprovided will retrieve the next page.Parameters used to filter the retrieved list must remain in subsequentrequests with a page token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page_token")]
            public string? PageToken { get; set; }
#nullable restore
#else
            [QueryParameter("page_token")]
            public string PageToken { get; set; }
#endif
            /// <summary>Filter the list of organizations to the ones that are a sub-organizationof the specified organization.&quot;null&quot; is a valid value to provide for this parameter. It means &quot;wherean organization has no parent (i.e. it is a &apos;root&apos; organization).&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("parent%2Eid")]
            public string? ParentId { get; set; }
#nullable restore
#else
            [QueryParameter("parent%2Eid")]
            public string ParentId { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
