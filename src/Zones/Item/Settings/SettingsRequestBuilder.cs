// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Aegis;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Fonts;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Item;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_h2_max_streams;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_max_http_version;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Rum;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Speed_brain;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Ssl_automatic_mode;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Zaraz;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{zone_identifier-id}\settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SettingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The aegis property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Aegis.AegisRequestBuilder Aegis
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Aegis.AegisRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fonts property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Fonts.FontsRequestBuilder Fonts
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Fonts.FontsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The origin_h2_max_streams property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_h2_max_streams.Origin_h2_max_streamsRequestBuilder Origin_h2_max_streams
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_h2_max_streams.Origin_h2_max_streamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The origin_max_http_version property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_max_http_version.Origin_max_http_versionRequestBuilder Origin_max_http_version
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Origin_max_http_version.Origin_max_http_versionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rum property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Rum.RumRequestBuilder Rum
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Rum.RumRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The speed_brain property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Speed_brain.Speed_brainRequestBuilder Speed_brain
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Speed_brain.Speed_brainRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ssl_automatic_mode property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Ssl_automatic_mode.Ssl_automatic_modeRequestBuilder Ssl_automatic_mode
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Ssl_automatic_mode.Ssl_automatic_modeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zaraz property</summary>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Zaraz.ZarazRequestBuilder Zaraz
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Zaraz.ZarazRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.zones.item.settings.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Item.WithSetting_ItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Item.WithSetting_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("setting_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.Item.WithSetting_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/settings", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/settings", rawUrl)
        {
        }
        /// <summary>
        /// Available settings for your user in relation to a zone.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_components_schemas_api_response_common_failure">When receiving a 4XX status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_components_schemas_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Edit settings for a zone.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_components_schemas_api_response_common_failure">When receiving a 4XX status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection?> PatchAsync(List<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection> PatchAsync(List<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_components_schemas_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_zone_settings_response_collection.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Available settings for your user in relation to a zone.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Edit settings for a zone.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(List<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(List<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_h2_max_streams"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_proxy_read_timeout"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_always_use_https"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_https_rewrites"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_platform_optimization"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_cache_ttl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_check"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_cache_level"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_edge_cache_ttl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_email_obfuscation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ip_geolocation"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_mirage"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_opportunistic_encryption"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_origin_error_page_pass_thru"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_polish"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_response_buffering"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_rocket_loader"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_security_level"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_sort_query_string_for_cache"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ssl"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_true_client_ip_header"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_waf"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_recommender"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp"/>, <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Zones_multiple_settings : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt? Zones0rtt { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt Zones0rtt { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos? ZonesAdvancedDdos { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos ZonesAdvancedDdos { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online? ZonesAlwaysOnline { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online ZonesAlwaysOnline { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli? ZonesBrotli { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli ZonesBrotli { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis? ZonesCacheRulesAegis { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis ZonesCacheRulesAegis { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_h2_max_streams"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_h2_max_streams? ZonesCacheRulesOriginH2MaxStreams { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_h2_max_streams ZonesCacheRulesOriginH2MaxStreams { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version? ZonesCacheRulesOriginMaxHttpVersion { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version ZonesCacheRulesOriginMaxHttpVersion { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl? ZonesChallengeTtl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl ZonesChallengeTtl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled? ZonesChinaNetworkEnabled { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled ZonesChinaNetworkEnabled { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers? ZonesCiphers { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers ZonesCiphers { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening? ZonesCnameFlattening { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening ZonesCnameFlattening { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode? ZonesDevelopmentMode { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode ZonesDevelopmentMode { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints? ZonesEarlyHints { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints ZonesEarlyHints { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization? ZonesH2Prioritization { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization ZonesH2Prioritization { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection? ZonesHotlinkProtection { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection ZonesHotlinkProtection { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2? ZonesHttp2 { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2 ZonesHttp2 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3? ZonesHttp3 { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3 ZonesHttp3 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6? ZonesIpv6 { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6 ZonesIpv6 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload? ZonesMaxUpload { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload ZonesMaxUpload { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version? ZonesMinTlsVersion { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version ZonesMinTlsVersion { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel? ZonesNel { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel ZonesNel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion? ZonesOpportunisticOnion { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion ZonesOpportunisticOnion { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange? ZonesOrangeToOrange { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange ZonesOrangeToOrange { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload? ZonesPrefetchPreload { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload ZonesPrefetchPreload { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass? ZonesPrivacyPass { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass ZonesPrivacyPass { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_proxy_read_timeout"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_proxy_read_timeout? ZonesProxyReadTimeout { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_proxy_read_timeout ZonesProxyReadTimeout { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4? ZonesPseudoIpv4 { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4 ZonesPseudoIpv4 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js? ZonesReplaceInsecureJs { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js ZonesReplaceInsecureJs { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_always_use_https"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_always_use_https? ZonesSchemasAlwaysUseHttps { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_always_use_https ZonesSchemasAlwaysUseHttps { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_https_rewrites"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_https_rewrites? ZonesSchemasAutomaticHttpsRewrites { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_https_rewrites ZonesSchemasAutomaticHttpsRewrites { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_platform_optimization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_platform_optimization? ZonesSchemasAutomaticPlatformOptimization { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_platform_optimization ZonesSchemasAutomaticPlatformOptimization { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_cache_ttl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_cache_ttl? ZonesSchemasBrowserCacheTtl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_cache_ttl ZonesSchemasBrowserCacheTtl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_check"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_check? ZonesSchemasBrowserCheck { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_check ZonesSchemasBrowserCheck { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_cache_level"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_cache_level? ZonesSchemasCacheLevel { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_cache_level ZonesSchemasCacheLevel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_edge_cache_ttl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_edge_cache_ttl? ZonesSchemasEdgeCacheTtl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_edge_cache_ttl ZonesSchemasEdgeCacheTtl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_email_obfuscation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_email_obfuscation? ZonesSchemasEmailObfuscation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_email_obfuscation ZonesSchemasEmailObfuscation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ip_geolocation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ip_geolocation? ZonesSchemasIpGeolocation { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ip_geolocation ZonesSchemasIpGeolocation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_mirage"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_mirage? ZonesSchemasMirage { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_mirage ZonesSchemasMirage { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_opportunistic_encryption"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_opportunistic_encryption? ZonesSchemasOpportunisticEncryption { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_opportunistic_encryption ZonesSchemasOpportunisticEncryption { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_origin_error_page_pass_thru"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_origin_error_page_pass_thru? ZonesSchemasOriginErrorPagePassThru { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_origin_error_page_pass_thru ZonesSchemasOriginErrorPagePassThru { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_polish"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_polish? ZonesSchemasPolish { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_polish ZonesSchemasPolish { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_response_buffering"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_response_buffering? ZonesSchemasResponseBuffering { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_response_buffering ZonesSchemasResponseBuffering { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_rocket_loader"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_rocket_loader? ZonesSchemasRocketLoader { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_rocket_loader ZonesSchemasRocketLoader { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_security_level"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_security_level? ZonesSchemasSecurityLevel { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_security_level ZonesSchemasSecurityLevel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_sort_query_string_for_cache"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_sort_query_string_for_cache? ZonesSchemasSortQueryStringForCache { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_sort_query_string_for_cache ZonesSchemasSortQueryStringForCache { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ssl"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ssl? ZonesSchemasSsl { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ssl ZonesSchemasSsl { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_true_client_ip_header"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_true_client_ip_header? ZonesSchemasTrueClientIpHeader { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_true_client_ip_header ZonesSchemasTrueClientIpHeader { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_waf"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_waf? ZonesSchemasWaf { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_waf ZonesSchemasWaf { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header? ZonesSecurityHeader { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header ZonesSecurityHeader { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude? ZonesServerSideExclude { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude ZonesServerSideExclude { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support? ZonesSha1Support { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support ZonesSha1Support { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_recommender"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_recommender? ZonesSslRecommender { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_recommender ZonesSslRecommender { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only? ZonesTls12Only { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only ZonesTls12Only { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3? ZonesTls13 { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3 ZonesTls13 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth? ZonesTlsClientAuth { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth ZonesTlsClientAuth { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp? ZonesWebp { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp ZonesWebp { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets? ZonesWebsockets { get; set; }
#nullable restore
#else
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets ZonesWebsockets { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder.Zones_multiple_settings();
                result.Zones0rtt = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt();
                result.ZonesAdvancedDdos = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_advanced_ddos();
                result.ZonesAlwaysOnline = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_always_online();
                result.ZonesBrotli = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_brotli();
                result.ZonesCacheRulesAegis = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_aegis();
                result.ZonesCacheRulesOriginH2MaxStreams = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_h2_max_streams();
                result.ZonesCacheRulesOriginMaxHttpVersion = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cache_rules_origin_max_http_version();
                result.ZonesChallengeTtl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_challenge_ttl();
                result.ZonesChinaNetworkEnabled = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_china_network_enabled();
                result.ZonesCiphers = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ciphers();
                result.ZonesCnameFlattening = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_cname_flattening();
                result.ZonesDevelopmentMode = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_development_mode();
                result.ZonesEarlyHints = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_early_hints();
                result.ZonesH2Prioritization = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_h2_prioritization();
                result.ZonesHotlinkProtection = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_hotlink_protection();
                result.ZonesHttp2 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http2();
                result.ZonesHttp3 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_http3();
                result.ZonesIpv6 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ipv6();
                result.ZonesMaxUpload = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_max_upload();
                result.ZonesMinTlsVersion = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_min_tls_version();
                result.ZonesNel = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_nel();
                result.ZonesOpportunisticOnion = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_opportunistic_onion();
                result.ZonesOrangeToOrange = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_orange_to_orange();
                result.ZonesPrefetchPreload = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_prefetch_preload();
                result.ZonesPrivacyPass = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_privacy_pass();
                result.ZonesProxyReadTimeout = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_proxy_read_timeout();
                result.ZonesPseudoIpv4 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_pseudo_ipv4();
                result.ZonesReplaceInsecureJs = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_replace_insecure_js();
                result.ZonesSchemasAlwaysUseHttps = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_always_use_https();
                result.ZonesSchemasAutomaticHttpsRewrites = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_https_rewrites();
                result.ZonesSchemasAutomaticPlatformOptimization = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_automatic_platform_optimization();
                result.ZonesSchemasBrowserCacheTtl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_cache_ttl();
                result.ZonesSchemasBrowserCheck = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_browser_check();
                result.ZonesSchemasCacheLevel = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_cache_level();
                result.ZonesSchemasEdgeCacheTtl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_edge_cache_ttl();
                result.ZonesSchemasEmailObfuscation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_email_obfuscation();
                result.ZonesSchemasIpGeolocation = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ip_geolocation();
                result.ZonesSchemasMirage = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_mirage();
                result.ZonesSchemasOpportunisticEncryption = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_opportunistic_encryption();
                result.ZonesSchemasOriginErrorPagePassThru = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_origin_error_page_pass_thru();
                result.ZonesSchemasPolish = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_polish();
                result.ZonesSchemasResponseBuffering = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_response_buffering();
                result.ZonesSchemasRocketLoader = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_rocket_loader();
                result.ZonesSchemasSecurityLevel = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_security_level();
                result.ZonesSchemasSortQueryStringForCache = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_sort_query_string_for_cache();
                result.ZonesSchemasSsl = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_ssl();
                result.ZonesSchemasTrueClientIpHeader = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_true_client_ip_header();
                result.ZonesSchemasWaf = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_schemas_waf();
                result.ZonesSecurityHeader = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_security_header();
                result.ZonesServerSideExclude = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_server_side_exclude();
                result.ZonesSha1Support = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_sha1_support();
                result.ZonesSslRecommender = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_ssl_recommender();
                result.ZonesTls12Only = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_2_only();
                result.ZonesTls13 = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_1_3();
                result.ZonesTlsClientAuth = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_tls_client_auth();
                result.ZonesWebp = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_webp();
                result.ZonesWebsockets = new global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_websockets();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Zones0rtt != null || ZonesAdvancedDdos != null || ZonesAlwaysOnline != null || ZonesBrotli != null || ZonesCacheRulesAegis != null || ZonesCacheRulesOriginH2MaxStreams != null || ZonesCacheRulesOriginMaxHttpVersion != null || ZonesChallengeTtl != null || ZonesChinaNetworkEnabled != null || ZonesCiphers != null || ZonesCnameFlattening != null || ZonesDevelopmentMode != null || ZonesEarlyHints != null || ZonesH2Prioritization != null || ZonesHotlinkProtection != null || ZonesHttp2 != null || ZonesHttp3 != null || ZonesIpv6 != null || ZonesMaxUpload != null || ZonesMinTlsVersion != null || ZonesNel != null || ZonesOpportunisticOnion != null || ZonesOrangeToOrange != null || ZonesPrefetchPreload != null || ZonesPrivacyPass != null || ZonesProxyReadTimeout != null || ZonesPseudoIpv4 != null || ZonesReplaceInsecureJs != null || ZonesSchemasAlwaysUseHttps != null || ZonesSchemasAutomaticHttpsRewrites != null || ZonesSchemasAutomaticPlatformOptimization != null || ZonesSchemasBrowserCacheTtl != null || ZonesSchemasBrowserCheck != null || ZonesSchemasCacheLevel != null || ZonesSchemasEdgeCacheTtl != null || ZonesSchemasEmailObfuscation != null || ZonesSchemasIpGeolocation != null || ZonesSchemasMirage != null || ZonesSchemasOpportunisticEncryption != null || ZonesSchemasOriginErrorPagePassThru != null || ZonesSchemasPolish != null || ZonesSchemasResponseBuffering != null || ZonesSchemasRocketLoader != null || ZonesSchemasSecurityLevel != null || ZonesSchemasSortQueryStringForCache != null || ZonesSchemasSsl != null || ZonesSchemasTrueClientIpHeader != null || ZonesSchemasWaf != null || ZonesSecurityHeader != null || ZonesServerSideExclude != null || ZonesSha1Support != null || ZonesSslRecommender != null || ZonesTls12Only != null || ZonesTls13 != null || ZonesTlsClientAuth != null || ZonesWebp != null || ZonesWebsockets != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesBrotli, ZonesCacheRulesAegis, ZonesCacheRulesOriginH2MaxStreams, ZonesCacheRulesOriginMaxHttpVersion, ZonesChallengeTtl, ZonesChinaNetworkEnabled, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesNel, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesPrefetchPreload, ZonesPrivacyPass, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesReplaceInsecureJs, ZonesSchemasAlwaysUseHttps, ZonesSchemasAutomaticHttpsRewrites, ZonesSchemasAutomaticPlatformOptimization, ZonesSchemasBrowserCacheTtl, ZonesSchemasBrowserCheck, ZonesSchemasCacheLevel, ZonesSchemasEdgeCacheTtl, ZonesSchemasEmailObfuscation, ZonesSchemasIpGeolocation, ZonesSchemasMirage, ZonesSchemasOpportunisticEncryption, ZonesSchemasOriginErrorPagePassThru, ZonesSchemasPolish, ZonesSchemasResponseBuffering, ZonesSchemasRocketLoader, ZonesSchemasSecurityLevel, ZonesSchemasSortQueryStringForCache, ZonesSchemasSsl, ZonesSchemasTrueClientIpHeader, ZonesSchemasWaf, ZonesSecurityHeader, ZonesServerSideExclude, ZonesSha1Support, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesWebp, ZonesWebsockets);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0rtt>(null, Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesBrotli, ZonesCacheRulesAegis, ZonesCacheRulesOriginH2MaxStreams, ZonesCacheRulesOriginMaxHttpVersion, ZonesChallengeTtl, ZonesChinaNetworkEnabled, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesNel, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesPrefetchPreload, ZonesPrivacyPass, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesReplaceInsecureJs, ZonesSchemasAlwaysUseHttps, ZonesSchemasAutomaticHttpsRewrites, ZonesSchemasAutomaticPlatformOptimization, ZonesSchemasBrowserCacheTtl, ZonesSchemasBrowserCheck, ZonesSchemasCacheLevel, ZonesSchemasEdgeCacheTtl, ZonesSchemasEmailObfuscation, ZonesSchemasIpGeolocation, ZonesSchemasMirage, ZonesSchemasOpportunisticEncryption, ZonesSchemasOriginErrorPagePassThru, ZonesSchemasPolish, ZonesSchemasResponseBuffering, ZonesSchemasRocketLoader, ZonesSchemasSecurityLevel, ZonesSchemasSortQueryStringForCache, ZonesSchemasSsl, ZonesSchemasTrueClientIpHeader, ZonesSchemasWaf, ZonesSecurityHeader, ZonesServerSideExclude, ZonesSha1Support, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesWebp, ZonesWebsockets);
            }
        }
    }
}
#pragma warning restore CS0618
