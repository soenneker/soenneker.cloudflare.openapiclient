// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{identifier-id}\purge_cache
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Purge_cacheRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Purge_cacheRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{identifier%2Did}/purge_cache", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Purge_cacheRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{identifier%2Did}/purge_cache", rawUrl)
        {
        }
        /// <summary>
        /// ### Purge All Cached ContentRemoves ALL files from Cloudflare&apos;s cache. All tiers can purge everything.```{&quot;purge_everything&quot;: true}```### Purge Cached Content by URLGranularly removes one or more files from Cloudflare&apos;s cache by specifying URLs. All tiers can purge by URL.To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.**NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise.Single file purge example with files:```{&quot;files&quot;: [&quot;http://www.example.com/css/styles.css&quot;, &quot;http://www.example.com/js/index.js&quot;]}```Single file purge example with url and header pairs:```{&quot;files&quot;: [{url: &quot;http://www.example.com/cat_picture.jpg&quot;, headers: { &quot;CF-IPCountry&quot;: &quot;US&quot;, &quot;CF-Device-Type&quot;: &quot;desktop&quot;, &quot;Accept-Language&quot;: &quot;zh-CN&quot; }}, {url: &quot;http://www.example.com/dog_picture.jpg&quot;, headers: { &quot;CF-IPCountry&quot;: &quot;EU&quot;, &quot;CF-Device-Type&quot;: &quot;mobile&quot;, &quot;Accept-Language&quot;: &quot;en-US&quot; }}]}```### Purge Cached Content by Tag, Host or PrefixGranularly removes one or more files from Cloudflare&apos;s cache either by specifying the host, the associated Cache-Tag, or a Prefix.Flex purge with tags:```{&quot;tags&quot;: [&quot;a-cache-tag&quot;, &quot;another-cache-tag&quot;]}```Flex purge with hosts:```{&quot;hosts&quot;: [&quot;www.example.com&quot;, &quot;images.example.com&quot;]}```Flex purge with prefixes:```{&quot;prefixes&quot;: [&quot;www.example.com/foo&quot;, &quot;images.example.com/bar/baz&quot;]}```### Availability and limitsplease refer to [purge cache availability and limits documentation page](https://developers.cloudflare.com/cache/how-to/purge-cache/#availability-and-limits).
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// ### Purge All Cached ContentRemoves ALL files from Cloudflare&apos;s cache. All tiers can purge everything.```{&quot;purge_everything&quot;: true}```### Purge Cached Content by URLGranularly removes one or more files from Cloudflare&apos;s cache by specifying URLs. All tiers can purge by URL.To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.**NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise.Single file purge example with files:```{&quot;files&quot;: [&quot;http://www.example.com/css/styles.css&quot;, &quot;http://www.example.com/js/index.js&quot;]}```Single file purge example with url and header pairs:```{&quot;files&quot;: [{url: &quot;http://www.example.com/cat_picture.jpg&quot;, headers: { &quot;CF-IPCountry&quot;: &quot;US&quot;, &quot;CF-Device-Type&quot;: &quot;desktop&quot;, &quot;Accept-Language&quot;: &quot;zh-CN&quot; }}, {url: &quot;http://www.example.com/dog_picture.jpg&quot;, headers: { &quot;CF-IPCountry&quot;: &quot;EU&quot;, &quot;CF-Device-Type&quot;: &quot;mobile&quot;, &quot;Accept-Language&quot;: &quot;en-US&quot; }}]}```### Purge Cached Content by Tag, Host or PrefixGranularly removes one or more files from Cloudflare&apos;s cache either by specifying the host, the associated Cache-Tag, or a Prefix.Flex purge with tags:```{&quot;tags&quot;: [&quot;a-cache-tag&quot;, &quot;another-cache-tag&quot;]}```Flex purge with hosts:```{&quot;hosts&quot;: [&quot;www.example.com&quot;, &quot;images.example.com&quot;]}```Flex purge with prefixes:```{&quot;prefixes&quot;: [&quot;www.example.com/foo&quot;, &quot;images.example.com/bar/baz&quot;]}```### Availability and limitsplease refer to [purge cache availability and limits documentation page](https://developers.cloudflare.com/cache/how-to/purge-cache/#availability-and-limits).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Purge_cacheRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
