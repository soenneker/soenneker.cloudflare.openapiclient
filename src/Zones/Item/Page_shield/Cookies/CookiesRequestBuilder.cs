// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{zone_identifier-id}\page_shield\cookies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CookiesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.Cloudflare.OpenApiClient.zones.item.page_shield.cookies.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.Item.WithCookie_ItemRequestBuilder"/></returns>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.Item.WithCookie_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("cookie_id", position);
                return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.Item.WithCookie_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CookiesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/page_shield/cookies{?direction*,domain*,export*,hosts*,http_only*,name*,order_by*,page*,page_url*,path*,per_page*,same_site*,secure*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CookiesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/page_shield/cookies{?direction*,domain*,export*,hosts*,http_only*,name*,order_by*,page*,page_url*,path*,per_page*,same_site*,secure*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists all cookies collected by Page Shield.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_list_zone_cookies_response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_list_zone_cookies_response?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder.CookiesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_list_zone_cookies_response> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder.CookiesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_list_zone_cookies_response>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Page_shield_list_zone_cookies_response.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists all cookies collected by Page Shield.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder.CookiesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder.CookiesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.CookiesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists all cookies collected by Page Shield.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CookiesRequestBuilderGetQueryParameters 
        {
            [QueryParameter("direction")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.GetDirectionQueryParameterType? Direction { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("domain")]
            public string? Domain { get; set; }
#nullable restore
#else
            [QueryParameter("domain")]
            public string Domain { get; set; }
#endif
            [QueryParameter("export")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.GetExportQueryParameterType? Export { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("hosts")]
            public string? Hosts { get; set; }
#nullable restore
#else
            [QueryParameter("hosts")]
            public string Hosts { get; set; }
#endif
            [QueryParameter("http_only")]
            public bool? HttpOnly { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            [QueryParameter("order_by")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.GetOrder_byQueryParameterType? OrderBy { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page")]
            public string? Page { get; set; }
#nullable restore
#else
            [QueryParameter("page")]
            public string Page { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page_url")]
            public string? PageUrl { get; set; }
#nullable restore
#else
            [QueryParameter("page_url")]
            public string PageUrl { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("path")]
            public string? Path { get; set; }
#nullable restore
#else
            [QueryParameter("path")]
            public string Path { get; set; }
#endif
            [QueryParameter("per_page")]
            public double? PerPage { get; set; }
            [QueryParameter("same_site")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.GetSame_siteQueryParameterType? SameSite { get; set; }
            [QueryParameter("secure")]
            public bool? Secure { get; set; }
            [QueryParameter("type")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Cookies.GetTypeQueryParameterType? Type { get; set; }
        }
    }
}
#pragma warning restore CS0618
