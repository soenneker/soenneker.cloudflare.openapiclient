// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Access;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Acm;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Activation_check;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Addressing;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Analytics;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Api_gateway;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Argo;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_plans;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_rate_plans;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Bot_management;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Certificate_authorities;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Client_certificates;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cloud_connector;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_certificates;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_hostnames;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_ns;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_pages;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dcv_delegation;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Devices;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_analytics;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_records;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_settings;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dnssec;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Email;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Filters;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Firewall;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Healthchecks;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hold;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hostnames;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Keyless_certificates;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.LeakedCredentialChecks;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Load_balancers;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logpush;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logs;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Managed_headers;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Origin_tls_client_auth;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Pagerules;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.PayPerCrawl;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rate_limits;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rulesets;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Schema_validation;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Secondary_dns;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Snippets;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Spectrum;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Speed_api;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Ssl;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Subscription;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Url_normalization;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Waiting_rooms;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Web3;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Workers;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{zone_identifier-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Zone_identifierItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The access property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Access.AccessRequestBuilder Access
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Access.AccessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The acm property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Acm.AcmRequestBuilder Acm
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Acm.AcmRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The activation_check property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Activation_check.Activation_checkRequestBuilder Activation_check
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Activation_check.Activation_checkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addressing property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Addressing.AddressingRequestBuilder Addressing
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Addressing.AddressingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The analytics property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Analytics.AnalyticsRequestBuilder Analytics
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Analytics.AnalyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The api_gateway property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Api_gateway.Api_gatewayRequestBuilder Api_gateway
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Api_gateway.Api_gatewayRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The argo property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Argo.ArgoRequestBuilder Argo
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Argo.ArgoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The available_plans property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_plans.Available_plansRequestBuilder Available_plans
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_plans.Available_plansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The available_rate_plans property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_rate_plans.Available_rate_plansRequestBuilder Available_rate_plans
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Available_rate_plans.Available_rate_plansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bot_management property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Bot_management.Bot_managementRequestBuilder Bot_management
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Bot_management.Bot_managementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cache property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.CacheRequestBuilder Cache
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.CacheRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The certificate_authorities property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Certificate_authorities.Certificate_authoritiesRequestBuilder Certificate_authorities
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Certificate_authorities.Certificate_authoritiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The client_certificates property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Client_certificates.Client_certificatesRequestBuilder Client_certificates
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Client_certificates.Client_certificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cloud_connector property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cloud_connector.Cloud_connectorRequestBuilder Cloud_connector
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cloud_connector.Cloud_connectorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_certificates property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_certificates.Custom_certificatesRequestBuilder Custom_certificates
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_certificates.Custom_certificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_hostnames property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_hostnames.Custom_hostnamesRequestBuilder Custom_hostnames
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_hostnames.Custom_hostnamesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_ns property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_ns.Custom_nsRequestBuilder Custom_ns
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_ns.Custom_nsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The custom_pages property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_pages.Custom_pagesRequestBuilder Custom_pages
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Custom_pages.Custom_pagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dcv_delegation property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dcv_delegation.Dcv_delegationRequestBuilder Dcv_delegation
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dcv_delegation.Dcv_delegationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The devices property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Devices.DevicesRequestBuilder Devices
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Devices.DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dns_analytics property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_analytics.Dns_analyticsRequestBuilder Dns_analytics
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_analytics.Dns_analyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dns_records property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_records.Dns_recordsRequestBuilder Dns_records
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_records.Dns_recordsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dns_settings property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_settings.Dns_settingsRequestBuilder Dns_settings
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dns_settings.Dns_settingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dnssec property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dnssec.DnssecRequestBuilder Dnssec
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Dnssec.DnssecRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The email property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Email.EmailRequestBuilder Email
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Email.EmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filters property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Filters.FiltersRequestBuilder Filters
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Filters.FiltersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The firewall property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Firewall.FirewallRequestBuilder Firewall
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Firewall.FirewallRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The healthchecks property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Healthchecks.HealthchecksRequestBuilder Healthchecks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Healthchecks.HealthchecksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hold property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hold.HoldRequestBuilder Hold
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hold.HoldRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hostnames property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hostnames.HostnamesRequestBuilder Hostnames
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Hostnames.HostnamesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keyless_certificates property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Keyless_certificates.Keyless_certificatesRequestBuilder Keyless_certificates
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Keyless_certificates.Keyless_certificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The leakedCredentialChecks property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.LeakedCredentialChecks.LeakedCredentialChecksRequestBuilder LeakedCredentialChecks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.LeakedCredentialChecks.LeakedCredentialChecksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The load_balancers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Load_balancers.Load_balancersRequestBuilder Load_balancers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Load_balancers.Load_balancersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logpush property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logpush.LogpushRequestBuilder Logpush
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logpush.LogpushRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logs property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logs.LogsRequestBuilder Logs
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Logs.LogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The managed_headers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Managed_headers.Managed_headersRequestBuilder Managed_headers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Managed_headers.Managed_headersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The origin_tls_client_auth property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Origin_tls_client_auth.Origin_tls_client_authRequestBuilder Origin_tls_client_auth
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Origin_tls_client_auth.Origin_tls_client_authRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The page_shield property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Page_shieldRequestBuilder Page_shield
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Page_shield.Page_shieldRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pagerules property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Pagerules.PagerulesRequestBuilder Pagerules
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Pagerules.PagerulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The payPerCrawl property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.PayPerCrawl.PayPerCrawlRequestBuilder PayPerCrawl
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.PayPerCrawl.PayPerCrawlRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purge_cache property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder Purge_cache
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Purge_cache.Purge_cacheRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rate_limits property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rate_limits.Rate_limitsRequestBuilder Rate_limits
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rate_limits.Rate_limitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rulesets property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rulesets.RulesetsRequestBuilder Rulesets
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Rulesets.RulesetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schema_validation property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Schema_validation.Schema_validationRequestBuilder Schema_validation
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Schema_validation.Schema_validationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The secondary_dns property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Secondary_dns.Secondary_dnsRequestBuilder Secondary_dns
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Secondary_dns.Secondary_dnsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The securityCenter property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.SecurityCenterRequestBuilder SecurityCenter
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.SecurityCenterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The snippets property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Snippets.SnippetsRequestBuilder Snippets
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Snippets.SnippetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The spectrum property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Spectrum.SpectrumRequestBuilder Spectrum
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Spectrum.SpectrumRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The speed_api property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Speed_api.Speed_apiRequestBuilder Speed_api
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Speed_api.Speed_apiRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ssl property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Ssl.SslRequestBuilder Ssl
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Ssl.SslRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscription property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Subscription.SubscriptionRequestBuilder Subscription
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Subscription.SubscriptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The url_normalization property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Url_normalization.Url_normalizationRequestBuilder Url_normalization
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Url_normalization.Url_normalizationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The waiting_rooms property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Waiting_rooms.Waiting_roomsRequestBuilder Waiting_rooms
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Waiting_rooms.Waiting_roomsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The web3 property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Web3.Web3RequestBuilder Web3
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Web3.Web3RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workers property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Workers.WorkersRequestBuilder Workers
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Workers.WorkersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Zone_identifierItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Zone_identifierItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an existing zone.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_single_id"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_single_id?> DeleteAsync(global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_single_id> DeleteAsync(global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_single_id>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_single_id.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Zone Details
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_get_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_get_200?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_get_200> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_get_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_get_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Edits a zone. Only one zone property can be changed at a time.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_200"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_200?> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_200> PatchAsync(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an existing zone.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Zone Details
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Edits a zone. Only one zone property can be changed at a time.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Cloudflare.OpenApiClient.Models.Zones_0_patch body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Zone_identifierItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
