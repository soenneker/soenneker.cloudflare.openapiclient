// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve_clear;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Origin_post_quantum_encryption;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Regional_tiered_cache;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Tiered_cache_smart_topology_enable;
using Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Variants;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
using System.Threading;

namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{identifier-id}\cache
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CacheRequestBuilder : BaseRequestBuilder, ICacheRequestBuilder
    {
        /// <summary>The cache_reserve property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve.Cache_reserveRequestBuilder Cache_reserve
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve.Cache_reserveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cache_reserve_clear property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve_clear.Cache_reserve_clearRequestBuilder Cache_reserve_clear
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Cache_reserve_clear.Cache_reserve_clearRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The origin_post_quantum_encryption property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Origin_post_quantum_encryption.Origin_post_quantum_encryptionRequestBuilder Origin_post_quantum_encryption
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Origin_post_quantum_encryption.Origin_post_quantum_encryptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The regional_tiered_cache property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Regional_tiered_cache.Regional_tiered_cacheRequestBuilder Regional_tiered_cache
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Regional_tiered_cache.Regional_tiered_cacheRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tiered_cache_smart_topology_enable property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Tiered_cache_smart_topology_enable.Tiered_cache_smart_topology_enableRequestBuilder Tiered_cache_smart_topology_enable
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Tiered_cache_smart_topology_enable.Tiered_cache_smart_topology_enableRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The variants property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Variants.VariantsRequestBuilder Variants
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.Variants.VariantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.CacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CacheRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{identifier%2Did}/cache", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.Cache.CacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CacheRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{identifier%2Did}/cache", rawUrl)
        {
        }

        /// <summary>
        /// Gets the cache settings for a zone
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <returns>A <see cref="Task{T}"/> of type <see cref="CacheSettings"/></returns>
        public async Task<CacheSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<CacheSettings>(requestInfo, CacheSettings.CreateFromDiscriminatorValue, default, cancellationToken);
        }

        /// <summary>
        /// Updates the cache settings for a zone
        /// </summary>
        /// <param name="body">The cache settings to update</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <returns>A <see cref="Task{T}"/> of type <see cref="CacheSettings"/></returns>
        public async Task<CacheSettings> PutAsync(CacheSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
            if (body == null) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<CacheSettings>(requestInfo, CacheSettings.CreateFromDiscriminatorValue, default, cancellationToken);
        }

        /// <summary>
        /// Returns a request information object for the GET request
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <returns>A <see cref="RequestInformation"/></returns>
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
            var requestInfo = new RequestInformation
            {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null)
            {
                var requestConfig = new RequestConfiguration<DefaultQueryParameters>();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }

        /// <summary>
        /// Returns a request information object for the PUT request
        /// </summary>
        /// <param name="body">The cache settings to update</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <returns>A <see cref="RequestInformation"/></returns>
        public RequestInformation ToPutRequestInformation(CacheSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
            if (body == null) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation
            {
                HttpMethod = Method.PUT,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            if (requestConfiguration != null)
            {
                var requestConfig = new RequestConfiguration<DefaultQueryParameters>();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
    }
}
#pragma warning restore CS0618
