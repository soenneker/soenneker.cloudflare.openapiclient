// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace
{
    /// <summary>
    /// Builds and executes requests for operations under \zones\{zone_identifier-id}\security-center\insights\type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TypeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/security-center/insights/type{?dismissed*,issue_class*,issue_class%7Eneq*,issue_type*,issue_type%7Eneq*,product*,product%7Eneq*,severity*,severity%7Eneq*,subject*,subject%7Eneq*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zones/{zone_identifier%2Did}/security-center/insights/type{?dismissed*,issue_class*,issue_class%7Eneq*,issue_type*,issue_type%7Eneq*,product*,product%7Eneq*,severity*,severity%7Eneq*,subject*,subject%7Eneq*}", rawUrl)
        {
        }
        /// <summary>
        /// Get Zone Security Center Insight Counts by Type
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_valueCountsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_api_response_common_failure">When receiving a 4XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_valueCountsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder.TypeRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_valueCountsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder.TypeRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_api_response_common_failure.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_valueCountsResponse>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_valueCountsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Zone Security Center Insight Counts by Type
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder.TypeRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder.TypeRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.TypeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get Zone Security Center Insight Counts by Type
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TypeRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dismissed")]
            public string? Dismissed { get; set; }
#nullable restore
#else
            [QueryParameter("dismissed")]
            public string Dismissed { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issue_class")]
            public string[]? IssueClass { get; set; }
#nullable restore
#else
            [QueryParameter("issue_class")]
            public string[] IssueClass { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issue_class%7Eneq")]
            public string[]? IssueClassNeq { get; set; }
#nullable restore
#else
            [QueryParameter("issue_class%7Eneq")]
            public string[] IssueClassNeq { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issue_type")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_issueType[]? IssueType { get; set; }
#nullable restore
#else
            [QueryParameter("issue_type")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_issueType[] IssueType { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issue_type%7Eneq")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_issueType[]? IssueTypeNeq { get; set; }
#nullable restore
#else
            [QueryParameter("issue_type%7Eneq")]
            public global::Soenneker.Cloudflare.OpenApiClient.Models.Security_center_issueType[] IssueTypeNeq { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("product")]
            public string[]? Product { get; set; }
#nullable restore
#else
            [QueryParameter("product")]
            public string[] Product { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("product%7Eneq")]
            public string[]? ProductNeq { get; set; }
#nullable restore
#else
            [QueryParameter("product%7Eneq")]
            public string[] ProductNeq { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("severity")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.GetSeverityQueryParameterType[]? Severity { get; set; }
#nullable restore
#else
            [QueryParameter("severity")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.GetSeverityQueryParameterType[] Severity { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("severity%7Eneq")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.GetSeverityNeqQueryParameterType[]? SeverityNeq { get; set; }
#nullable restore
#else
            [QueryParameter("severity%7Eneq")]
            public global::Soenneker.Cloudflare.OpenApiClient.Zones.Item.SecurityCenter.Insights.TypeNamespace.GetSeverityNeqQueryParameterType[] SeverityNeq { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subject")]
            public string[]? Subject { get; set; }
#nullable restore
#else
            [QueryParameter("subject")]
            public string[] Subject { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subject%7Eneq")]
            public string[]? SubjectNeq { get; set; }
#nullable restore
#else
            [QueryParameter("subject%7Eneq")]
            public string[] SubjectNeq { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
