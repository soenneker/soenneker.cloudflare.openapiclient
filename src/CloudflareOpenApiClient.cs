// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using Soenneker.Cloudflare.Accounts;
using Soenneker.Cloudflare.Certificates;
using Soenneker.Cloudflare.Configs;
using Soenneker.Cloudflare.Ips;
using Soenneker.Cloudflare.Memberships;
using Soenneker.Cloudflare.Notification;
using Soenneker.Cloudflare.Organizations;
using Soenneker.Cloudflare.Radar;
using Soenneker.Cloudflare.Scans;
using Soenneker.Cloudflare.User;
using Soenneker.Cloudflare.Zones;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Soenneker.Cloudflare
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CloudflareOpenApiClient : BaseRequestBuilder
    {
        /// <summary>The accounts property</summary>
        public global::Soenneker.Cloudflare.Accounts.AccountsRequestBuilder Accounts
        {
            get => new global::Soenneker.Cloudflare.Accounts.AccountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The certificates property</summary>
        public global::Soenneker.Cloudflare.Certificates.CertificatesRequestBuilder Certificates
        {
            get => new global::Soenneker.Cloudflare.Certificates.CertificatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The configs property</summary>
        public global::Soenneker.Cloudflare.Configs.ConfigsRequestBuilder Configs
        {
            get => new global::Soenneker.Cloudflare.Configs.ConfigsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ips property</summary>
        public global::Soenneker.Cloudflare.Ips.IpsRequestBuilder Ips
        {
            get => new global::Soenneker.Cloudflare.Ips.IpsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The memberships property</summary>
        public global::Soenneker.Cloudflare.Memberships.MembershipsRequestBuilder Memberships
        {
            get => new global::Soenneker.Cloudflare.Memberships.MembershipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notification property</summary>
        public global::Soenneker.Cloudflare.Notification.NotificationRequestBuilder Notification
        {
            get => new global::Soenneker.Cloudflare.Notification.NotificationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public global::Soenneker.Cloudflare.Organizations.OrganizationsRequestBuilder Organizations
        {
            get => new global::Soenneker.Cloudflare.Organizations.OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The radar property</summary>
        public global::Soenneker.Cloudflare.Radar.RadarRequestBuilder Radar
        {
            get => new global::Soenneker.Cloudflare.Radar.RadarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scans property</summary>
        public global::Soenneker.Cloudflare.Scans.ScansRequestBuilder Scans
        {
            get => new global::Soenneker.Cloudflare.Scans.ScansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public global::Soenneker.Cloudflare.User.UserRequestBuilder User
        {
            get => new global::Soenneker.Cloudflare.User.UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zones property</summary>
        public global::Soenneker.Cloudflare.Zones.ZonesRequestBuilder Zones
        {
            get => new global::Soenneker.Cloudflare.Zones.ZonesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.CloudflareOpenApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CloudflareOpenApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.cloudflare.com/client/v4";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
