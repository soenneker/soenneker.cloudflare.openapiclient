// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version
{
    /// <summary>
    /// Builds and executes requests for operations under \radar\email\routing\summary\ip_version
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Ip_versionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Ip_versionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/email/routing/summary/ip_version{?arc*,dateEnd*,dateRange*,dateStart*,dkim*,dmarc*,encrypted*,format*,name*,spf*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Ip_versionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/email/routing/summary/ip_version{?arc*,dateEnd*,dateRange*,dateStart*,dkim*,dmarc*,encrypted*,format*,name*,spf*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves the distribution of emails by IP version.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_400">When receiving a 400 status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder.Ip_versionRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder.Ip_versionRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_400.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_email_routing_summary_by_ip_version_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the distribution of emails by IP version.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder.Ip_versionRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder.Ip_versionRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.Ip_versionRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the distribution of emails by IP version.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Ip_versionRequestBuilderGetQueryParameters 
        {
            /// <summary>Filters results by ARC (Authenticated Received Chain) validation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("arc")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetArcQueryParameterType[]? Arc { get; set; }
#nullable restore
#else
            [QueryParameter("arc")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetArcQueryParameterType[] Arc { get; set; }
#endif
            /// <summary>End of the date range (inclusive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateEnd")]
            public DateTimeOffset?[]? DateEnd { get; set; }
#nullable restore
#else
            [QueryParameter("dateEnd")]
            public DateTimeOffset?[] DateEnd { get; set; }
#endif
            /// <summary>Filters results by date range. For example, use `7d` and `7dcontrol` to compare this week with the previous week. Use this parameter or set specific start and end dates (`dateStart` and `dateEnd` parameters).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateRange")]
            public string[]? DateRange { get; set; }
#nullable restore
#else
            [QueryParameter("dateRange")]
            public string[] DateRange { get; set; }
#endif
            /// <summary>Start of the date range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateStart")]
            public DateTimeOffset?[]? DateStart { get; set; }
#nullable restore
#else
            [QueryParameter("dateStart")]
            public DateTimeOffset?[] DateStart { get; set; }
#endif
            /// <summary>Filters results by DKIM (DomainKeys Identified Mail) validation status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dkim")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetDkimQueryParameterType[]? Dkim { get; set; }
#nullable restore
#else
            [QueryParameter("dkim")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetDkimQueryParameterType[] Dkim { get; set; }
#endif
            /// <summary>Filters results by DMARC (Domain-based Message Authentication, Reporting and Conformance) validation status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dmarc")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetDmarcQueryParameterType[]? Dmarc { get; set; }
#nullable restore
#else
            [QueryParameter("dmarc")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetDmarcQueryParameterType[] Dmarc { get; set; }
#endif
            /// <summary>Filters results by encryption status (encrypted vs. not-encrypted).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("encrypted")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetEncryptedQueryParameterType[]? Encrypted { get; set; }
#nullable restore
#else
            [QueryParameter("encrypted")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetEncryptedQueryParameterType[] Encrypted { get; set; }
#endif
            /// <summary>Format in which results will be returned.</summary>
            [QueryParameter("format")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetFormatQueryParameterType? Format { get; set; }
            /// <summary>Array of names used to label the series in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string[]? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string[] Name { get; set; }
#endif
            /// <summary>Filters results by SPF (Sender Policy Framework) validation status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("spf")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetSpfQueryParameterType[]? Spf { get; set; }
#nullable restore
#else
            [QueryParameter("spf")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Email.Routing.Summary.Ip_version.GetSpfQueryParameterType[] Spf { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
