// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Hijacks;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Ips;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Leaks;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Routes;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Timeseries;
using Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Top;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Radar.Bgp
{
    /// <summary>
    /// Builds and executes requests for operations under \radar\bgp
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BgpRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The hijacks property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Hijacks.HijacksRequestBuilder Hijacks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Hijacks.HijacksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ips property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Ips.IpsRequestBuilder Ips
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Ips.IpsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The leaks property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Leaks.LeaksRequestBuilder Leaks
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Leaks.LeaksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The routes property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Routes.RoutesRequestBuilder Routes
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Routes.RoutesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timeseries property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Timeseries.TimeseriesRequestBuilder Timeseries
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Timeseries.TimeseriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The top property</summary>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Top.TopRequestBuilder Top
        {
            get => new global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.Top.TopRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.BgpRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BgpRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/bgp", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Bgp.BgpRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BgpRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/bgp", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
