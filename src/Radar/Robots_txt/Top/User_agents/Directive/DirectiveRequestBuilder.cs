// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive
{
    /// <summary>
    /// Builds and executes requests for operations under \radar\robots_txt\top\user_agents\directive
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DirectiveRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DirectiveRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/robots_txt/top/user_agents/directive{?date*,directive*,domainCategory*,format*,limit*,name*,userAgentCategory*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DirectiveRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/robots_txt/top/user_agents/directive{?date*,directive*,domainCategory*,format*,limit*,name*,userAgentCategory*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves the top user agents on robots.txt files.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_404">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder.DirectiveRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder.DirectiveRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_404.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_robots_txt_top_user_agents_by_directive_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the top user agents on robots.txt files.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder.DirectiveRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder.DirectiveRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.DirectiveRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the top user agents on robots.txt files.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DirectiveRequestBuilderGetQueryParameters 
        {
            /// <summary>Filters results by the specified array of dates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("date")]
            public Date?[]? Date { get; set; }
#nullable restore
#else
            [QueryParameter("date")]
            public Date?[] Date { get; set; }
#endif
            /// <summary>Filters results by robots.txt directive.</summary>
            [QueryParameter("directive")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.GetDirectiveQueryParameterType? Directive { get; set; }
            /// <summary>Filters results by domain category.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("domainCategory")]
            public string[]? DomainCategory { get; set; }
#nullable restore
#else
            [QueryParameter("domainCategory")]
            public string[] DomainCategory { get; set; }
#endif
            /// <summary>Format in which results will be returned.</summary>
            [QueryParameter("format")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.GetFormatQueryParameterType? Format { get; set; }
            /// <summary>Limits the number of objects returned in the response.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Array of names used to label the series in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string[]? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string[] Name { get; set; }
#endif
            /// <summary>Filters results by user agent category.</summary>
            [QueryParameter("userAgentCategory")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Robots_txt.Top.User_agents.Directive.GetUserAgentCategoryQueryParameterType? UserAgentCategory { get; set; }
        }
    }
}
#pragma warning restore CS0618
