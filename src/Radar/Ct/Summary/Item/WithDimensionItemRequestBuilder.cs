// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Cloudflare.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \radar\ct\summary\{dimension}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithDimensionItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDimensionItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/ct/summary/{dimension}{?ca*,caOwner*,dateEnd*,dateRange*,dateStart*,duration*,entryType*,expirationStatus*,format*,hasIps*,hasWildcards*,limitPerGroup*,log*,logApi*,logOperator*,name*,normalization*,publicKeyAlgorithm*,signatureAlgorithm*,tld*,uniqueEntries*,validationLevel*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDimensionItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/radar/ct/summary/{dimension}{?ca*,caOwner*,dateEnd*,dateRange*,dateStart*,duration*,entryType*,expirationStatus*,format*,hasIps*,hasWildcards*,limitPerGroup*,log*,logApi*,logOperator*,name*,normalization*,publicKeyAlgorithm*,signatureAlgorithm*,tld*,uniqueEntries*,validationLevel*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves an aggregated summary of certificates grouped by the specified dimension.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_400">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder.WithDimensionItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_200> GetAsync(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder.WithDimensionItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_400.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_200>(requestInfo, global::Soenneker.Cloudflare.OpenApiClient.Models.Radar_get_ct_summary_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves an aggregated summary of certificates grouped by the specified dimension.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder.WithDimensionItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder.WithDimensionItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.WithDimensionItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves an aggregated summary of certificates grouped by the specified dimension.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDimensionItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Filters results by certificate authority.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ca")]
            public string[]? Ca { get; set; }
#nullable restore
#else
            [QueryParameter("ca")]
            public string[] Ca { get; set; }
#endif
            /// <summary>Filters results by certificate authority owner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("caOwner")]
            public string[]? CaOwner { get; set; }
#nullable restore
#else
            [QueryParameter("caOwner")]
            public string[] CaOwner { get; set; }
#endif
            /// <summary>End of the date range (inclusive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateEnd")]
            public DateTimeOffset?[]? DateEnd { get; set; }
#nullable restore
#else
            [QueryParameter("dateEnd")]
            public DateTimeOffset?[] DateEnd { get; set; }
#endif
            /// <summary>Filters results by date range. For example, use `7d` and `7dcontrol` to compare this week with the previous week. Use this parameter or set specific start and end dates (`dateStart` and `dateEnd` parameters).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateRange")]
            public string[]? DateRange { get; set; }
#nullable restore
#else
            [QueryParameter("dateRange")]
            public string[] DateRange { get; set; }
#endif
            /// <summary>Start of the date range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateStart")]
            public DateTimeOffset?[]? DateStart { get; set; }
#nullable restore
#else
            [QueryParameter("dateStart")]
            public DateTimeOffset?[] DateStart { get; set; }
#endif
            /// <summary>Filters results by certificate duration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("duration")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetDurationQueryParameterType[]? Duration { get; set; }
#nullable restore
#else
            [QueryParameter("duration")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetDurationQueryParameterType[] Duration { get; set; }
#endif
            /// <summary>Filters results by entry type (certificate vs. pre-certificate).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("entryType")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetEntryTypeQueryParameterType[]? EntryType { get; set; }
#nullable restore
#else
            [QueryParameter("entryType")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetEntryTypeQueryParameterType[] EntryType { get; set; }
#endif
            /// <summary>Filters results by expiration status (expired vs. valid).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expirationStatus")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetExpirationStatusQueryParameterType[]? ExpirationStatus { get; set; }
#nullable restore
#else
            [QueryParameter("expirationStatus")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetExpirationStatusQueryParameterType[] ExpirationStatus { get; set; }
#endif
            /// <summary>Format in which results will be returned.</summary>
            [QueryParameter("format")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetFormatQueryParameterType? Format { get; set; }
            /// <summary>Filters results based on whether the certificates are bound to specific IP addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("hasIps")]
            public bool?[]? HasIps { get; set; }
#nullable restore
#else
            [QueryParameter("hasIps")]
            public bool?[] HasIps { get; set; }
#endif
            /// <summary>Filters results based on whether the certificates contain wildcard domains.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("hasWildcards")]
            public bool?[]? HasWildcards { get; set; }
#nullable restore
#else
            [QueryParameter("hasWildcards")]
            public bool?[] HasWildcards { get; set; }
#endif
            /// <summary>Limits the number of objects per group to the top items within the specified time range. When item count exceeds the limit, extra items appear grouped under an &quot;other&quot; category.</summary>
            [QueryParameter("limitPerGroup")]
            public int? LimitPerGroup { get; set; }
            /// <summary>Filters results by certificate log.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("log")]
            public string[]? Log { get; set; }
#nullable restore
#else
            [QueryParameter("log")]
            public string[] Log { get; set; }
#endif
            /// <summary>Filters results by certificate log API (RFC6962 vs. static).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("logApi")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetLogApiQueryParameterType[]? LogApi { get; set; }
#nullable restore
#else
            [QueryParameter("logApi")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetLogApiQueryParameterType[] LogApi { get; set; }
#endif
            /// <summary>Filters results by certificate log operator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("logOperator")]
            public string[]? LogOperator { get; set; }
#nullable restore
#else
            [QueryParameter("logOperator")]
            public string[] LogOperator { get; set; }
#endif
            /// <summary>Array of names used to label the series in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string[]? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string[] Name { get; set; }
#endif
            /// <summary>Normalization method applied to the results. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).</summary>
            [QueryParameter("normalization")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetNormalizationQueryParameterType? Normalization { get; set; }
            /// <summary>Filters results by public key algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("publicKeyAlgorithm")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetPublicKeyAlgorithmQueryParameterType[]? PublicKeyAlgorithm { get; set; }
#nullable restore
#else
            [QueryParameter("publicKeyAlgorithm")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetPublicKeyAlgorithmQueryParameterType[] PublicKeyAlgorithm { get; set; }
#endif
            /// <summary>Filters results by signature algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("signatureAlgorithm")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetSignatureAlgorithmQueryParameterType[]? SignatureAlgorithm { get; set; }
#nullable restore
#else
            [QueryParameter("signatureAlgorithm")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetSignatureAlgorithmQueryParameterType[] SignatureAlgorithm { get; set; }
#endif
            /// <summary>Filters results by top-level domain.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tld")]
            public string[]? Tld { get; set; }
#nullable restore
#else
            [QueryParameter("tld")]
            public string[] Tld { get; set; }
#endif
            /// <summary>Specifies whether to filter out duplicate certificates and pre-certificates. Set to true for unique entries only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("uniqueEntries")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetUniqueEntriesQueryParameterType[]? UniqueEntries { get; set; }
#nullable restore
#else
            [QueryParameter("uniqueEntries")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetUniqueEntriesQueryParameterType[] UniqueEntries { get; set; }
#endif
            /// <summary>Filters results by validation level.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("validationLevel")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetValidationLevelQueryParameterType[]? ValidationLevel { get; set; }
#nullable restore
#else
            [QueryParameter("validationLevel")]
            public global::Soenneker.Cloudflare.OpenApiClient.Radar.Ct.Summary.Item.GetValidationLevelQueryParameterType[] ValidationLevel { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
